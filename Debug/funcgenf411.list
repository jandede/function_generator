
funcgenf411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  08006fe0  08006fe0  00007fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc8  08007dc8  00009480  2**0
                  CONTENTS
  4 .ARM          00000008  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dd0  08007dd0  00009480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000480  20000000  08007dd8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  20000480  08008258  00009480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  08008258  0000a36c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001180f  00000000  00000000  000094b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245c  00000000  00000000  0001acbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d56  00000000  00000000  0001e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018520  00000000  00000000  0001ef46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137de  00000000  00000000  00037466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ceac  00000000  00000000  0004ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  000e7b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ecd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000480 	.word	0x20000480
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fc4 	.word	0x08006fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000484 	.word	0x20000484
 80001dc:	08006fc4 	.word	0x08006fc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f001 fae7 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f873 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 fa23 	bl	8001390 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4a:	f000 f9f7 	bl	800133c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f957 	bl	8001200 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f52:	f000 f9a5 	bl	80012a0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f56:	f000 f925 	bl	80011a4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f8d1 	bl	8001100 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  calc_dac_values(); // do once on startup
 8000f5e:	f000 fb37 	bl	80015d0 <calc_dac_values>

  SSD1306_Init (); // initialise the display
 8000f62:	f000 fe0b 	bl	8001b7c <SSD1306_Init>
  char oled_buffer_line1[10] = {0};
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	809a      	strh	r2, [r3, #4]
  char oled_buffer_line2[10] = {0};
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	809a      	strh	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(func_mode){
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <main+0xdc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d002      	beq.n	8000f90 <main+0x58>
 8000f8a:	2b63      	cmp	r3, #99	@ 0x63
 8000f8c:	d024      	beq.n	8000fd8 <main+0xa0>
 8000f8e:	e7f8      	b.n	8000f82 <main+0x4a>
	  case 1:
		  MODE_GENERATION = 1;
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <main+0xe0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		  sprintf(oled_buffer_line1, "sin()%c", '\0');
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	491f      	ldr	r1, [pc, #124]	@ (800101c <main+0xe4>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fc12 	bl	80057c8 <siprintf>
		  sprintf(oled_buffer_line2, "%d Hz%c", (uint16_t) f, '\0');
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <main+0xe8>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f107 000c 	add.w	r0, r7, #12
 8000fba:	2300      	movs	r3, #0
 8000fbc:	4919      	ldr	r1, [pc, #100]	@ (8001024 <main+0xec>)
 8000fbe:	f004 fc03 	bl	80057c8 <siprintf>
		  print_to_oled(oled_buffer_line1, oled_buffer_line2);
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fa8f 	bl	80014f0 <print_to_oled>
		  sinefunc();
 8000fd2:	f000 fd0f 	bl	80019f4 <sinefunc>
		  break;
 8000fd6:	e01b      	b.n	8001010 <main+0xd8>
	  case 99:
		  for (int i = 0; i <256; i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	e014      	b.n	8001008 <main+0xd0>
			  dac_out(Vout_possible_values[i]);
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <main+0xf0>)
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ff2:	793b      	ldrb	r3, [r7, #4]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fc60 	bl	80018bc <dac_out>
			  HAL_Delay(20);
 8000ffc:	2014      	movs	r0, #20
 8000ffe:	f001 faf9 	bl	80025f4 <HAL_Delay>
		  for (int i = 0; i <256; i++){
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	3301      	adds	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	2bff      	cmp	r3, #255	@ 0xff
 800100c:	dde7      	ble.n	8000fde <main+0xa6>
		  }
		  break;
 800100e:	bf00      	nop
	  switch(func_mode){
 8001010:	e7b7      	b.n	8000f82 <main+0x4a>
 8001012:	bf00      	nop
 8001014:	20000408 	.word	0x20000408
 8001018:	20000e10 	.word	0x20000e10
 800101c:	08006fe0 	.word	0x08006fe0
 8001020:	2000040c 	.word	0x2000040c
 8001024:	08006fe8 	.word	0x08006fe8
 8001028:	20000610 	.word	0x20000610

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	@ 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	@ 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fbe4 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <SystemClock_Config+0xcc>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <SystemClock_Config+0xcc>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <SystemClock_Config+0xcc>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <SystemClock_Config+0xd0>)
 8001076:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800109c:	2310      	movs	r3, #16
 800109e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff48 	bl	8003f48 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010be:	f000 fd57 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f9aa 	bl	8004438 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ea:	f000 fd41 	bl	8001b70 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	@ 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <MX_ADC1_Init+0x9c>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_ADC1_Init+0x98>)
 800111a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800111e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001128:	2201      	movs	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_ADC1_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_ADC1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_ADC1_Init+0xa0>)
 8001144:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC1_Init+0x98>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_ADC1_Init+0x98>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001162:	f001 fa6b 	bl	800263c <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800116c:	f000 fd00 	bl	8001b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001182:	f001 fc1f 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800118c:	f000 fcf0 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000049c 	.word	0x2000049c
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f002 f8e5 	bl	80033b0 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 fcc0 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200004e4 	.word	0x200004e4
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00061a80 	.word	0x00061a80

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM1_Init+0x98>)
 800121e:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <MX_TIM1_Init+0x9c>)
 8001220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001224:	2254      	movs	r2, #84	@ 0x54
 8001226:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_TIM1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001230:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001234:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_TIM1_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001248:	4813      	ldr	r0, [pc, #76]	@ (8001298 <MX_TIM1_Init+0x98>)
 800124a:	f003 fb15 	bl	8004878 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 fc8c 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001266:	f003 fd5a 	bl	8004d1e <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001270:	f000 fc7e 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_TIM1_Init+0x98>)
 8001282:	f003 ff5b 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800128c:	f000 fc70 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000538 	.word	0x20000538
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <MX_TIM3_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012c4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80012c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012e6:	f003 fac7 	bl	8004878 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012f0:	f000 fc3e 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_TIM3_Init+0x94>)
 8001302:	f003 fd0c 	bl	8004d1e <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800130c:	f000 fc30 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_TIM3_Init+0x94>)
 800131e:	f003 ff0d 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 fc22 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000580 	.word	0x20000580
 8001338:	40000400 	.word	0x40000400

0800133c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_USART2_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001374:	f003 ff64 	bl	8005240 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 fbf7 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200005c8 	.word	0x200005c8
 800138c:	40004400 	.word	0x40004400

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a4c      	ldr	r2, [pc, #304]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b46      	ldr	r3, [pc, #280]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a45      	ldr	r2, [pc, #276]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a3e      	ldr	r2, [pc, #248]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <MX_GPIO_Init+0x150>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x150>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a37      	ldr	r2, [pc, #220]	@ (80014e0 <MX_GPIO_Init+0x150>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_GPIO_Init+0x150>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2103      	movs	r1, #3
 800141a:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <MX_GPIO_Init+0x154>)
 800141c:	f001 ff96 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8001426:	4830      	ldr	r0, [pc, #192]	@ (80014e8 <MX_GPIO_Init+0x158>)
 8001428:	f001 ff90 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f240 4111 	movw	r1, #1041	@ 0x411
 8001432:	482e      	ldr	r0, [pc, #184]	@ (80014ec <MX_GPIO_Init+0x15c>)
 8001434:	f001 ff8a 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4825      	ldr	r0, [pc, #148]	@ (80014e4 <MX_GPIO_Init+0x154>)
 8001450:	f001 fdf8 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001454:	2303      	movs	r3, #3
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	481e      	ldr	r0, [pc, #120]	@ (80014e4 <MX_GPIO_Init+0x154>)
 800146c:	f001 fdea 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8001470:	f44f 7399 	mov.w	r3, #306	@ 0x132
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4817      	ldr	r0, [pc, #92]	@ (80014e8 <MX_GPIO_Init+0x158>)
 800148a:	f001 fddb 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 800148e:	f240 4311 	movw	r3, #1041	@ 0x411
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4811      	ldr	r0, [pc, #68]	@ (80014ec <MX_GPIO_Init+0x15c>)
 80014a8:	f001 fdcc 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <MX_GPIO_Init+0x154>)
 80014c4:	f001 fdbe 	bl	8003044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2028      	movs	r0, #40	@ 0x28
 80014ce:	f001 fd82 	bl	8002fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d2:	2028      	movs	r0, #40	@ 0x28
 80014d4:	f001 fd9b 	bl	800300e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400

080014f0 <print_to_oled>:

/* USER CODE BEGIN 4 */

// OLED screen write to 1st and 2nd line
void print_to_oled(char* str1, char* str2){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b09a      	sub	sp, #104	@ 0x68
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	SSD1306_Clear();
 80014fa:	f000 fd62 	bl	8001fc2 <SSD1306_Clear>
	/*SSD1306_DrawPixel(10, 5, 1);
	SSD1306_DrawPixel(11, 4, 1);
	SSD1306_DrawPixel(12, 3, 1);
	SSD1306_DrawPixel(13, 2, 1);
	SSD1306_DrawPixel(14, 1, 1);*/
	int *oled_sin[21] = {7,5,3,2,1,11,2,3,5,7,9,11,12,13,13,13,12,11,9};
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2254      	movs	r2, #84	@ 0x54
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f004 f97e 	bl	8005808 <memset>
 800150c:	2307      	movs	r3, #7
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	2305      	movs	r3, #5
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	2303      	movs	r3, #3
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	230b      	movs	r3, #11
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	2302      	movs	r3, #2
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152c:	2305      	movs	r3, #5
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001530:	2307      	movs	r3, #7
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
 8001534:	2309      	movs	r3, #9
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
 8001538:	230b      	movs	r3, #11
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800153c:	230c      	movs	r3, #12
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001540:	230d      	movs	r3, #13
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
 8001544:	230d      	movs	r3, #13
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
 8001548:	230d      	movs	r3, #13
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800154c:	230c      	movs	r3, #12
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001550:	230b      	movs	r3, #11
 8001552:	653b      	str	r3, [r7, #80]	@ 0x50
 8001554:	2309      	movs	r3, #9
 8001556:	657b      	str	r3, [r7, #84]	@ 0x54
	for (int j=0;j<4; j++){
 8001558:	2300      	movs	r3, #0
 800155a:	667b      	str	r3, [r7, #100]	@ 0x64
 800155c:	e023      	b.n	80015a6 <print_to_oled+0xb6>
		for (int i=0;i<19;i++){
 800155e:	2300      	movs	r3, #0
 8001560:	663b      	str	r3, [r7, #96]	@ 0x60
 8001562:	e01a      	b.n	800159a <print_to_oled+0xaa>
			SSD1306_DrawPixel(10+20*j+i, oled_sin[i], 1);
 8001564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	b29a      	uxth	r2, r3
 8001572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001574:	b29b      	uxth	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	330a      	adds	r3, #10
 800157c:	b298      	uxth	r0, r3
 800157e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	3368      	adds	r3, #104	@ 0x68
 8001584:	443b      	add	r3, r7
 8001586:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800158a:	b29b      	uxth	r3, r3
 800158c:	2201      	movs	r2, #1
 800158e:	4619      	mov	r1, r3
 8001590:	f000 fbfe 	bl	8001d90 <SSD1306_DrawPixel>
		for (int i=0;i<19;i++){
 8001594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001596:	3301      	adds	r3, #1
 8001598:	663b      	str	r3, [r7, #96]	@ 0x60
 800159a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800159c:	2b12      	cmp	r3, #18
 800159e:	dde1      	ble.n	8001564 <print_to_oled+0x74>
	for (int j=0;j<4; j++){
 80015a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015a2:	3301      	adds	r3, #1
 80015a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80015a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	ddd8      	ble.n	800155e <print_to_oled+0x6e>
		}
	}
	//SSD1306_Puts (str1, &Font_11x18, 1);
	SSD1306_GotoXY (10,30);
 80015ac:	211e      	movs	r1, #30
 80015ae:	200a      	movs	r0, #10
 80015b0:	f000 fc4e 	bl	8001e50 <SSD1306_GotoXY>
	SSD1306_Puts (str2, &Font_11x18, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	4905      	ldr	r1, [pc, #20]	@ (80015cc <print_to_oled+0xdc>)
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f000 fcdd 	bl	8001f78 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80015be:	f000 fba1 	bl	8001d04 <SSD1306_UpdateScreen>
}
 80015c2:	bf00      	nop
 80015c4:	3768      	adds	r7, #104	@ 0x68
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000

080015d0 <calc_dac_values>:

// Runs only at startup
// Calculates this equation with every 8bit combination (Va-Vh)
// Vout = (1Va + 2Vb + 4Vc + 8Vd + 16Ve + 32Vf + 64Vg + 128Vh) / 256
void calc_dac_values(){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
	    int sum = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
	    for (int i = 0; i < 256; i++){
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	e052      	b.n	8001686 <calc_dac_values+0xb6>
			sum = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
			for (int j = 0 ; j<=7; j++){
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	e033      	b.n	8001652 <calc_dac_values+0x82>
				sum += ((i>>j)&1) * pow(2,j);
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	fa42 f303 	asr.w	r3, r2, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff94 	bl	8000524 <__aeabi_i2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7fe ff8f 	bl	8000524 <__aeabi_i2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	ec43 2b11 	vmov	d1, r2, r3
 800160e:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8001698 <calc_dac_values+0xc8>
 8001612:	f004 fd79 	bl	8006108 <pow>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe ffeb 	bl	80005f8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7fe ff7a 	bl	8000524 <__aeabi_i2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fe28 	bl	800028c <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa88 	bl	8000b58 <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0
 800164a:	60fb      	str	r3, [r7, #12]
			for (int j = 0 ; j<=7; j++){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b07      	cmp	r3, #7
 8001656:	ddc8      	ble.n	80015ea <calc_dac_values+0x1a>
			}
		Vout_possible_values[i] = (sum/256.0);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7fe ff63 	bl	8000524 <__aeabi_i2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <calc_dac_values+0xd0>)
 8001664:	f7ff f8f2 	bl	800084c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fa9a 	bl	8000ba8 <__aeabi_d2f>
 8001674:	4602      	mov	r2, r0
 8001676:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <calc_dac_values+0xd4>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < 256; i++){
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2bff      	cmp	r3, #255	@ 0xff
 800168a:	dda9      	ble.n	80015e0 <calc_dac_values+0x10>
	    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bdb0      	pop	{r4, r5, r7, pc}
 8001696:	bf00      	nop
 8001698:	00000000 	.word	0x00000000
 800169c:	40000000 	.word	0x40000000
 80016a0:	40700000 	.word	0x40700000
 80016a4:	20000610 	.word	0x20000610

080016a8 <calc_sin_steps>:

// Run once when sine mode is started for optimization
// When a full sine period is divided into 1024 time steps, calculate each timestep voltage index (out of Vout_possible_values)
void calc_sin_steps(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
	int index = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i<1024; i++){
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	e0d7      	b.n	8001868 <calc_sin_steps+0x1c0>
		index = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
		float fraction_of_period = (i*1.0)/1023.0;
 80016bc:	68b8      	ldr	r0, [r7, #8]
 80016be:	f7fe ff31 	bl	8000524 <__aeabi_i2d>
 80016c2:	a37c      	add	r3, pc, #496	@ (adr r3, 80018b4 <calc_sin_steps+0x20c>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7ff f8c0 	bl	800084c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa68 	bl	8000ba8 <__aeabi_d2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	603b      	str	r3, [r7, #0]
		// first ¼ ´ 	sinlookup[128:-1]
		// second ¼ ` 	sinlookup[-1:128]
		// third ¼ ` 	sinlookup [128:0]
		// fourth ¼ ´ 	sinlookup[0:128]
		if (fraction_of_period < 1.0/4.0){
 80016dc:	edd7 7a00 	vldr	s15, [r7]
 80016e0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	d50f      	bpl.n	800170e <calc_sin_steps+0x66>
			index = 127 + (255*2 * fraction_of_period);
 80016ee:	edd7 7a00 	vldr	s15, [r7]
 80016f2:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001890 <calc_sin_steps+0x1e8>
 80016f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fa:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001894 <calc_sin_steps+0x1ec>
 80016fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001706:	ee17 3a90 	vmov	r3, s15
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e06c      	b.n	80017e8 <calc_sin_steps+0x140>
		} else if(fraction_of_period <= 2.0/4.0){
 800170e:	edd7 7a00 	vldr	s15, [r7]
 8001712:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d820      	bhi.n	8001762 <calc_sin_steps+0xba>
			index = 255 - (255*2 * (fraction_of_period-0.25));
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <calc_sin_steps+0x1f0>)
 800172c:	f7fe fdac 	bl	8000288 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a351      	add	r3, pc, #324	@ (adr r3, 8001880 <calc_sin_steps+0x1d8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff5b 	bl	80005f8 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	a150      	add	r1, pc, #320	@ (adr r1, 8001888 <calc_sin_steps+0x1e0>)
 8001748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174c:	f7fe fd9c 	bl	8000288 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f9fe 	bl	8000b58 <__aeabi_d2iz>
 800175c:	4603      	mov	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e042      	b.n	80017e8 <calc_sin_steps+0x140>
		} else if(fraction_of_period <= 3.0/4.0){
 8001762:	edd7 7a00 	vldr	s15, [r7]
 8001766:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d820      	bhi.n	80017b6 <calc_sin_steps+0x10e>
			index = 128 - (255*2 * (fraction_of_period-0.5));
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <calc_sin_steps+0x1f4>)
 8001780:	f7fe fd82 	bl	8000288 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001880 <calc_sin_steps+0x1d8>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe ff31 	bl	80005f8 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	4940      	ldr	r1, [pc, #256]	@ (80018a0 <calc_sin_steps+0x1f8>)
 80017a0:	f7fe fd72 	bl	8000288 <__aeabi_dsub>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9d4 	bl	8000b58 <__aeabi_d2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e018      	b.n	80017e8 <calc_sin_steps+0x140>
		} else {
			index = (255*2 * (fraction_of_period-0.75));
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f7fe fec6 	bl	8000548 <__aeabi_f2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <calc_sin_steps+0x1fc>)
 80017c2:	f7fe fd61 	bl	8000288 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	a32c      	add	r3, pc, #176	@ (adr r3, 8001880 <calc_sin_steps+0x1d8>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9ba 	bl	8000b58 <__aeabi_d2iz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
		}
		for (int j = 0; j<=255; j++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e036      	b.n	800185c <calc_sin_steps+0x1b4>
			if (j==255){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2bff      	cmp	r3, #255	@ 0xff
 80017f2:	d105      	bne.n	8001800 <calc_sin_steps+0x158>
				sin_voltage_steps[i] = 255;
 80017f4:	4a2c      	ldr	r2, [pc, #176]	@ (80018a8 <calc_sin_steps+0x200>)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4413      	add	r3, r2
 80017fa:	22ff      	movs	r2, #255	@ 0xff
 80017fc:	701a      	strb	r2, [r3, #0]
				break;
 80017fe:	e030      	b.n	8001862 <calc_sin_steps+0x1ba>
			}
			else if (Vout_possible_values[j] < sinlookup[index] && Vout_possible_values[j+1] > sinlookup[index]){
 8001800:	4a2a      	ldr	r2, [pc, #168]	@ (80018ac <calc_sin_steps+0x204>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	4a28      	ldr	r2, [pc, #160]	@ (80018b0 <calc_sin_steps+0x208>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d519      	bpl.n	8001856 <calc_sin_steps+0x1ae>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3301      	adds	r3, #1
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <calc_sin_steps+0x204>)
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	ed93 7a00 	vldr	s14, [r3]
 8001830:	4a1f      	ldr	r2, [pc, #124]	@ (80018b0 <calc_sin_steps+0x208>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dd07      	ble.n	8001856 <calc_sin_steps+0x1ae>
				sin_voltage_steps[i] = j;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	b2d9      	uxtb	r1, r3
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <calc_sin_steps+0x200>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	460a      	mov	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
				break;
 8001854:	e005      	b.n	8001862 <calc_sin_steps+0x1ba>
		for (int j = 0; j<=255; j++){
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2bff      	cmp	r3, #255	@ 0xff
 8001860:	ddc5      	ble.n	80017ee <calc_sin_steps+0x146>
	for (int i = 0; i<1024; i++){
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3301      	adds	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800186e:	f6ff af23 	blt.w	80016b8 <calc_sin_steps+0x10>
			}
		}
	}
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	f3af 8000 	nop.w
 8001880:	00000000 	.word	0x00000000
 8001884:	407fe000 	.word	0x407fe000
 8001888:	00000000 	.word	0x00000000
 800188c:	406fe000 	.word	0x406fe000
 8001890:	43ff0000 	.word	0x43ff0000
 8001894:	42fe0000 	.word	0x42fe0000
 8001898:	3fd00000 	.word	0x3fd00000
 800189c:	3fe00000 	.word	0x3fe00000
 80018a0:	40600000 	.word	0x40600000
 80018a4:	3fe80000 	.word	0x3fe80000
 80018a8:	20000a10 	.word	0x20000a10
 80018ac:	20000610 	.word	0x20000610
 80018b0:	20000008 	.word	0x20000008
 80018b4:	00000000 	.word	0x00000000
 80018b8:	408ff800 	.word	0x408ff800

080018bc <dac_out>:

// Sends parallel 8bit "digital out" to respective gpio pins
// input argument is precalculated 8bit value that matches with target voltage value
void dac_out(uint8_t val){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, val & (1<<0));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d4:	4823      	ldr	r0, [pc, #140]	@ (8001964 <dac_out+0xa8>)
 80018d6:	f001 fd39 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, val & (1<<1));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e8:	481f      	ldr	r0, [pc, #124]	@ (8001968 <dac_out+0xac>)
 80018ea:	f001 fd2f 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, val & (1<<2));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	2110      	movs	r1, #16
 80018fa:	481b      	ldr	r0, [pc, #108]	@ (8001968 <dac_out+0xac>)
 80018fc:	f001 fd26 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, val & (1<<3));
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	2102      	movs	r1, #2
 800190c:	4815      	ldr	r0, [pc, #84]	@ (8001964 <dac_out+0xa8>)
 800190e:	f001 fd1d 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, val & (1<<4));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	2110      	movs	r1, #16
 800191e:	4811      	ldr	r0, [pc, #68]	@ (8001964 <dac_out+0xa8>)
 8001920:	f001 fd14 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, val & (1<<5));
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	2101      	movs	r1, #1
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <dac_out+0xac>)
 8001932:	f001 fd0b 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, val & (1<<6));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	2102      	movs	r1, #2
 8001942:	480a      	ldr	r0, [pc, #40]	@ (800196c <dac_out+0xb0>)
 8001944:	f001 fd02 	bl	800334c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, val & (1<<7));
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	2101      	movs	r1, #1
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <dac_out+0xb0>)
 8001956:	f001 fcf9 	bl	800334c <HAL_GPIO_WritePin>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800

08001970 <prescale_timer>:

// Divide timer so that it only ticks 1024 times every 1/f
// (using 8 bit dac and more ticks doesn't bring any benefits, only makes code more complex ... maybe slower too?)
void prescale_timer(int16_t sinfreq){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	float prescaler = (CPU_FREQ*1.0) / (1024.0*sinfreq);
 800197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <prescale_timer+0x78>)
 800198a:	f7fe fe35 	bl	80005f8 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	a113      	add	r1, pc, #76	@ (adr r1, 80019e0 <prescale_timer+0x70>)
 8001994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f900 	bl	8000ba8 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	60fb      	str	r3, [r7, #12]
	// ~0.13 Hz or less..
	if (prescaler >= 65535){
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80019ec <prescale_timer+0x7c>
 80019b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	db00      	blt.n	80019c0 <prescale_timer+0x50>
		asm("nop");
 80019be:	bf00      	nop
	}
	htim1.Instance->PSC = prescaler;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <prescale_timer+0x80>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	ee17 2a90 	vmov	r2, s15
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	00000000 	.word	0x00000000
 80019e4:	419406f4 	.word	0x419406f4
 80019e8:	40900000 	.word	0x40900000
 80019ec:	477fff00 	.word	0x477fff00
 80019f0:	20000538 	.word	0x20000538

080019f4 <sinefunc>:

// Main loop when SINE is selected as tool mode
void sinefunc(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	calc_sin_steps();
 80019f8:	f7ff fe56 	bl	80016a8 <calc_sin_steps>
	prescale_timer(f);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <sinefunc+0x44>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ffaf 	bl	8001970 <prescale_timer>
	HAL_TIM_Base_Start(&htim1);
 8001a12:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <sinefunc+0x48>)
 8001a14:	f002 ff80 	bl	8004918 <HAL_TIM_Base_Start>
	while(MODE_GENERATION){
 8001a18:	e007      	b.n	8001a2a <sinefunc+0x36>
		dac_out(sin_voltage_steps[htim1.Instance->CNT]);
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <sinefunc+0x48>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	4a07      	ldr	r2, [pc, #28]	@ (8001a40 <sinefunc+0x4c>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff49 	bl	80018bc <dac_out>
	while(MODE_GENERATION){
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <sinefunc+0x50>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f3      	bne.n	8001a1a <sinefunc+0x26>
	}
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000040c 	.word	0x2000040c
 8001a3c:	20000538 	.word	0x20000538
 8001a40:	20000a10 	.word	0x20000a10
 8001a44:	20000e10 	.word	0x20000e10

08001a48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_11)
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a58:	d150      	bne.n	8001afc <HAL_GPIO_EXTI_Callback+0xb4>
    {
    	if (!debounce_timer){
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d14c      	bne.n	8001afc <HAL_GPIO_EXTI_Callback+0xb4>
    		debounce_timer = 1;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	801a      	strh	r2, [r3, #0]
    		HAL_TIM_Base_Start_IT(&htim3); //start background clock for debouncing
 8001a68:	482c      	ldr	r0, [pc, #176]	@ (8001b1c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001a6a:	f002 ffd7 	bl	8004a1c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_Base_Stop(&htim1);
 8001a6e:	482c      	ldr	r0, [pc, #176]	@ (8001b20 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a70:	f002 ffac 	bl	80049cc <HAL_TIM_Base_Stop>
			MODE_GENERATION = 0;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8001a7a:	482b      	ldr	r0, [pc, #172]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a7c:	f000 fe22 	bl	80026c4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8001a80:	210a      	movs	r1, #10
 8001a82:	4829      	ldr	r0, [pc, #164]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a84:	f000 ff05 	bl	8002892 <HAL_ADC_PollForConversion>
			f = (uint16_t) HAL_ADC_GetValue(&hadc1)/4095.0 * FMAX;
 8001a88:	4827      	ldr	r0, [pc, #156]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a8a:	f000 ff8d 	bl	80029a8 <HAL_ADC_GetValue>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd46 	bl	8000524 <__aeabi_i2d>
 8001a98:	a31b      	add	r3, pc, #108	@ (adr r3, 8001b08 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fed5 	bl	800084c <__aeabi_ddiv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	a319      	add	r3, pc, #100	@ (adr r3, 8001b10 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f874 	bl	8000ba8 <__aeabi_d2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ac4:	6013      	str	r3, [r2, #0]
		    HAL_ADC_Stop(&hadc1);
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ac8:	f000 feb0 	bl	800282c <HAL_ADC_Stop>
		    if (f > FMAX || f < 1){
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b30 <HAL_GPIO_EXTI_Callback+0xe8>
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	dc0a      	bgt.n	8001af6 <HAL_GPIO_EXTI_Callback+0xae>
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d400      	bmi.n	8001af6 <HAL_GPIO_EXTI_Callback+0xae>
		    	f = 3002;
		    }
    	}

    }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_EXTI_Callback+0xb4>
		    	f = 3002;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001af8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0xec>)
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40affe00 	.word	0x40affe00
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40c38800 	.word	0x40c38800
 8001b18:	20000e12 	.word	0x20000e12
 8001b1c:	20000580 	.word	0x20000580
 8001b20:	20000538 	.word	0x20000538
 8001b24:	20000e10 	.word	0x20000e10
 8001b28:	2000049c 	.word	0x2000049c
 8001b2c:	2000040c 	.word	0x2000040c
 8001b30:	461c4000 	.word	0x461c4000
 8001b34:	453ba000 	.word	0x453ba000

08001b38 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	// Debounce timeout, clear for next button press
	if (htim->Instance==TIM3){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d108      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001b4a:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b4c:	f002 ffc8 	bl	8004ae0 <HAL_TIM_Base_Stop_IT>
		TIM3->CNT = 0;
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
		debounce_timer = 0;
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	801a      	strh	r2, [r3, #0]
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40000400 	.word	0x40000400
 8001b68:	20000580 	.word	0x20000580
 8001b6c:	20000e12 	.word	0x20000e12

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <Error_Handler+0x8>

08001b7c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b82:	f000 fa27 	bl	8001fd4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b86:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2178      	movs	r1, #120	@ 0x78
 8001b8e:	485b      	ldr	r0, [pc, #364]	@ (8001cfc <SSD1306_Init+0x180>)
 8001b90:	f001 fe50 	bl	8003834 <HAL_I2C_IsDeviceReady>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e0a9      	b.n	8001cf2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001b9e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001ba2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ba4:	e002      	b.n	8001bac <SSD1306_Init+0x30>
		p--;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bb2:	22ae      	movs	r2, #174	@ 0xae
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2078      	movs	r0, #120	@ 0x78
 8001bb8:	f000 fa88 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2078      	movs	r0, #120	@ 0x78
 8001bc2:	f000 fa83 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2078      	movs	r0, #120	@ 0x78
 8001bcc:	f000 fa7e 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bd0:	22b0      	movs	r2, #176	@ 0xb0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2078      	movs	r0, #120	@ 0x78
 8001bd6:	f000 fa79 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bda:	22c8      	movs	r2, #200	@ 0xc8
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2078      	movs	r0, #120	@ 0x78
 8001be0:	f000 fa74 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2078      	movs	r0, #120	@ 0x78
 8001bea:	f000 fa6f 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bee:	2210      	movs	r2, #16
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2078      	movs	r0, #120	@ 0x78
 8001bf4:	f000 fa6a 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001bf8:	2240      	movs	r2, #64	@ 0x40
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2078      	movs	r0, #120	@ 0x78
 8001bfe:	f000 fa65 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c02:	2281      	movs	r2, #129	@ 0x81
 8001c04:	2100      	movs	r1, #0
 8001c06:	2078      	movs	r0, #120	@ 0x78
 8001c08:	f000 fa60 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c0c:	22ff      	movs	r2, #255	@ 0xff
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2078      	movs	r0, #120	@ 0x78
 8001c12:	f000 fa5b 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c16:	22a1      	movs	r2, #161	@ 0xa1
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2078      	movs	r0, #120	@ 0x78
 8001c1c:	f000 fa56 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c20:	22a6      	movs	r2, #166	@ 0xa6
 8001c22:	2100      	movs	r1, #0
 8001c24:	2078      	movs	r0, #120	@ 0x78
 8001c26:	f000 fa51 	bl	80020cc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c2a:	22a8      	movs	r2, #168	@ 0xa8
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2078      	movs	r0, #120	@ 0x78
 8001c30:	f000 fa4c 	bl	80020cc <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001c34:	223f      	movs	r2, #63	@ 0x3f
 8001c36:	2100      	movs	r1, #0
 8001c38:	2078      	movs	r0, #120	@ 0x78
 8001c3a:	f000 fa47 	bl	80020cc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c3e:	22a4      	movs	r2, #164	@ 0xa4
 8001c40:	2100      	movs	r1, #0
 8001c42:	2078      	movs	r0, #120	@ 0x78
 8001c44:	f000 fa42 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c48:	22d3      	movs	r2, #211	@ 0xd3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2078      	movs	r0, #120	@ 0x78
 8001c4e:	f000 fa3d 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2078      	movs	r0, #120	@ 0x78
 8001c58:	f000 fa38 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c5c:	22d5      	movs	r2, #213	@ 0xd5
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2078      	movs	r0, #120	@ 0x78
 8001c62:	f000 fa33 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c66:	22f0      	movs	r2, #240	@ 0xf0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2078      	movs	r0, #120	@ 0x78
 8001c6c:	f000 fa2e 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c70:	22d9      	movs	r2, #217	@ 0xd9
 8001c72:	2100      	movs	r1, #0
 8001c74:	2078      	movs	r0, #120	@ 0x78
 8001c76:	f000 fa29 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c7a:	2222      	movs	r2, #34	@ 0x22
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2078      	movs	r0, #120	@ 0x78
 8001c80:	f000 fa24 	bl	80020cc <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c84:	22da      	movs	r2, #218	@ 0xda
 8001c86:	2100      	movs	r1, #0
 8001c88:	2078      	movs	r0, #120	@ 0x78
 8001c8a:	f000 fa1f 	bl	80020cc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8001c8e:	2212      	movs	r2, #18
 8001c90:	2100      	movs	r1, #0
 8001c92:	2078      	movs	r0, #120	@ 0x78
 8001c94:	f000 fa1a 	bl	80020cc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c98:	22db      	movs	r2, #219	@ 0xdb
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2078      	movs	r0, #120	@ 0x78
 8001c9e:	f000 fa15 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2078      	movs	r0, #120	@ 0x78
 8001ca8:	f000 fa10 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cac:	228d      	movs	r2, #141	@ 0x8d
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2078      	movs	r0, #120	@ 0x78
 8001cb2:	f000 fa0b 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cb6:	2214      	movs	r2, #20
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2078      	movs	r0, #120	@ 0x78
 8001cbc:	f000 fa06 	bl	80020cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cc0:	22af      	movs	r2, #175	@ 0xaf
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2078      	movs	r0, #120	@ 0x78
 8001cc6:	f000 fa01 	bl	80020cc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cca:	222e      	movs	r2, #46	@ 0x2e
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2078      	movs	r0, #120	@ 0x78
 8001cd0:	f000 f9fc 	bl	80020cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f843 	bl	8001d60 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001cda:	f000 f813 	bl	8001d04 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <SSD1306_Init+0x184>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SSD1306_Init+0x184>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <SSD1306_Init+0x184>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200004e4 	.word	0x200004e4
 8001d00:	20001214 	.word	0x20001214

08001d04 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	e01d      	b.n	8001d4c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	3b50      	subs	r3, #80	@ 0x50
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2078      	movs	r0, #120	@ 0x78
 8001d1c:	f000 f9d6 	bl	80020cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2078      	movs	r0, #120	@ 0x78
 8001d26:	f000 f9d1 	bl	80020cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2078      	movs	r0, #120	@ 0x78
 8001d30:	f000 f9cc 	bl	80020cc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <SSD1306_UpdateScreen+0x58>)
 8001d3a:	441a      	add	r2, r3
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	2140      	movs	r1, #64	@ 0x40
 8001d40:	2078      	movs	r0, #120	@ 0x78
 8001d42:	f000 f95d 	bl	8002000 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b07      	cmp	r3, #7
 8001d50:	d9de      	bls.n	8001d10 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000e14 	.word	0x20000e14

08001d60 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <SSD1306_Fill+0x14>
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <SSD1306_Fill+0x16>
 8001d74:	23ff      	movs	r3, #255	@ 0xff
 8001d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <SSD1306_Fill+0x2c>)
 8001d7e:	f003 fd43 	bl	8005808 <memset>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000e14 	.word	0x20000e14

08001d90 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	70fb      	strb	r3, [r7, #3]
	if (
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001da6:	d848      	bhi.n	8001e3a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dac:	d845      	bhi.n	8001e3a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001dae:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <SSD1306_DrawPixel+0xb8>)
 8001db0:	791b      	ldrb	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d11a      	bne.n	8001e00 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	08db      	lsrs	r3, r3, #3
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <SSD1306_DrawPixel+0xbc>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	b25a      	sxtb	r2, r3
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b259      	sxtb	r1, r3
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	4603      	mov	r3, r0
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	4413      	add	r3, r2
 8001df8:	b2c9      	uxtb	r1, r1
 8001dfa:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <SSD1306_DrawPixel+0xbc>)
 8001dfc:	54d1      	strb	r1, [r2, r3]
 8001dfe:	e01d      	b.n	8001e3c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	b298      	uxth	r0, r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <SSD1306_DrawPixel+0xbc>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	b25a      	sxtb	r2, r3
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	4013      	ands	r3, r2
 8001e28:	b259      	sxtb	r1, r3
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	01db      	lsls	r3, r3, #7
 8001e30:	4413      	add	r3, r2
 8001e32:	b2c9      	uxtb	r1, r1
 8001e34:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <SSD1306_DrawPixel+0xbc>)
 8001e36:	54d1      	strb	r1, [r2, r3]
 8001e38:	e000      	b.n	8001e3c <SSD1306_DrawPixel+0xac>
		return;
 8001e3a:	bf00      	nop
	}
}
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20001214 	.word	0x20001214
 8001e4c:	20000e14 	.word	0x20000e14

08001e50 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	80fb      	strh	r3, [r7, #6]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e60:	4a05      	ldr	r2, [pc, #20]	@ (8001e78 <SSD1306_GotoXY+0x28>)
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <SSD1306_GotoXY+0x28>)
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	8053      	strh	r3, [r2, #2]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	20001214 	.word	0x20001214

08001e7c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
	if (
 8001e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e9a:	dc07      	bgt.n	8001eac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ea8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eaa:	dd01      	ble.n	8001eb0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e05d      	b.n	8001f6c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e04b      	b.n	8001f4e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	3b20      	subs	r3, #32
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	7849      	ldrb	r1, [r1, #1]
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	440b      	add	r3, r1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e030      	b.n	8001f3c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b298      	uxth	r0, r3
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001ef8:	885a      	ldrh	r2, [r3, #2]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	79ba      	ldrb	r2, [r7, #6]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7ff ff43 	bl	8001d90 <SSD1306_DrawPixel>
 8001f0a:	e014      	b.n	8001f36 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b298      	uxth	r0, r3
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001f1a:	885a      	ldrh	r2, [r3, #2]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b299      	uxth	r1, r3
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	f7ff ff2d 	bl	8001d90 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d3c8      	bcc.n	8001eda <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	785b      	ldrb	r3, [r3, #1]
 8001f52:	461a      	mov	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d3ad      	bcc.n	8001eb6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <SSD1306_Putc+0xf8>)
 8001f68:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20001214 	.word	0x20001214

08001f78 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001f86:	e012      	b.n	8001fae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff73 	bl	8001e7c <SSD1306_Putc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d002      	beq.n	8001fa8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	e008      	b.n	8001fba <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1e8      	bne.n	8001f88 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff feca 	bl	8001d60 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fcc:	f7ff fe9a 	bl	8001d04 <SSD1306_UpdateScreen>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <ssd1306_I2C_Init+0x28>)
 8001fdc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fde:	e002      	b.n	8001fe6 <ssd1306_I2C_Init+0x12>
		p--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	0003d090 	.word	0x0003d090

08002000 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b0c7      	sub	sp, #284	@ 0x11c
 8002004:	af02      	add	r7, sp, #8
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800200e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002012:	600a      	str	r2, [r1, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800201e:	4622      	mov	r2, r4
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800202a:	4602      	mov	r2, r0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002036:	460a      	mov	r2, r1
 8002038:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800203a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002042:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002046:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002054:	e015      	b.n	8002082 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002056:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800205a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800205e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	441a      	add	r2, r3
 8002066:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800206a:	3301      	adds	r3, #1
 800206c:	7811      	ldrb	r1, [r2, #0]
 800206e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002072:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002076:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002078:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800207c:	3301      	adds	r3, #1
 800207e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002082:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002086:	b29b      	uxth	r3, r3
 8002088:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800208c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002090:	8812      	ldrh	r2, [r2, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d8df      	bhi.n	8002056 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800209a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b299      	uxth	r1, r3
 80020a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f107 020c 	add.w	r2, r7, #12
 80020b4:	200a      	movs	r0, #10
 80020b6:	9000      	str	r0, [sp, #0]
 80020b8:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <ssd1306_I2C_WriteMulti+0xc8>)
 80020ba:	f001 fabd 	bl	8003638 <HAL_I2C_Master_Transmit>
}
 80020be:	bf00      	nop
 80020c0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	200004e4 	.word	0x200004e4

080020cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	460b      	mov	r3, r1
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	4613      	mov	r3, r2
 80020dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80020e2:	797b      	ldrb	r3, [r7, #5]
 80020e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	b299      	uxth	r1, r3
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	230a      	movs	r3, #10
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2302      	movs	r3, #2
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <ssd1306_I2C_Write+0x38>)
 80020f6:	f001 fa9f 	bl	8003638 <HAL_I2C_Master_Transmit>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200004e4 	.word	0x200004e4

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a0f      	ldr	r2, [pc, #60]	@ (8002154 <HAL_MspInit+0x4c>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_MspInit+0x4c>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4a08      	ldr	r2, [pc, #32]	@ (8002154 <HAL_MspInit+0x4c>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	@ 0x40
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_MspInit+0x4c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002146:	2007      	movs	r0, #7
 8002148:	f000 ff3a 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_ADC_MspInit+0x7c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d127      	bne.n	80021ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6453      	str	r3, [r2, #68]	@ 0x44
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a0e      	ldr	r2, [pc, #56]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_ADC_MspInit+0x80>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b2:	2301      	movs	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b6:	2303      	movs	r3, #3
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	@ (80021dc <HAL_ADC_MspInit+0x84>)
 80021c6:	f000 ff3d 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80021ca:	bf00      	nop
 80021cc:	3728      	adds	r7, #40	@ 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40012000 	.word	0x40012000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020000 	.word	0x40020000

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_I2C_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12b      	bne.n	800225a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23c0      	movs	r3, #192	@ 0xc0
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002222:	2312      	movs	r3, #18
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222e:	2304      	movs	r3, #4
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <HAL_I2C_MspInit+0x8c>)
 800223a:	f000 ff03 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_I2C_MspInit+0x88>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40005400 	.word	0x40005400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_TIM_Base_MspInit+0x80>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d116      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	201b      	movs	r0, #27
 80022a4:	f000 fe97 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022a8:	201b      	movs	r0, #27
 80022aa:	f000 feb0 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ae:	e01a      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_TIM_Base_MspInit+0x88>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d115      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_TIM_Base_MspInit+0x84>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	201d      	movs	r0, #29
 80022dc:	f000 fe7b 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022e0:	201d      	movs	r0, #29
 80022e2:	f000 fe94 	bl	800300e <HAL_NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40000400 	.word	0x40000400

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	@ 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_UART_MspInit+0x84>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12b      	bne.n	8002376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <HAL_UART_MspInit+0x88>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_UART_MspInit+0x88>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800232c:	6413      	str	r3, [r2, #64]	@ 0x40
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_UART_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_UART_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_UART_MspInit+0x88>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002356:	230c      	movs	r3, #12
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002366:	2307      	movs	r3, #7
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <HAL_UART_MspInit+0x8c>)
 8002372:	f000 fe67 	bl	8003044 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	@ 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40004400 	.word	0x40004400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <NMI_Handler+0x4>

08002394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <MemManage_Handler+0x4>

080023a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e2:	f000 f8e7 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <TIM1_CC_IRQHandler+0x10>)
 80023f2:	f002 fba4 	bl	8004b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000538 	.word	0x20000538

08002400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <TIM3_IRQHandler+0x10>)
 8002406:	f002 fb9a 	bl	8004b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000580 	.word	0x20000580

08002414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002418:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800241c:	f000 ffb0 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002420:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002424:	f000 ffac 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <_sbrk+0x5c>)
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <_sbrk+0x60>)
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <_sbrk+0x64>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <_sbrk+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800245c:	f003 f9dc 	bl	8005818 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800246a:	e009      	b.n	8002480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20020000 	.word	0x20020000
 800248c:	00000400 	.word	0x00000400
 8002490:	2000121c 	.word	0x2000121c
 8002494:	20001370 	.word	0x20001370

08002498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <SystemInit+0x20>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <SystemInit+0x20>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c0:	f7ff ffea 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c4:	480c      	ldr	r0, [pc, #48]	@ (80024f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024c6:	490d      	ldr	r1, [pc, #52]	@ (80024fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ea:	f003 f99b 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ee:	f7fe fd23 	bl	8000f38 <main>
  bx  lr    
 80024f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8002500:	08007dd8 	.word	0x08007dd8
  ldr r2, =_sbss
 8002504:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8002508:	2000136c 	.word	0x2000136c

0800250c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <HAL_Init+0x40>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <HAL_Init+0x40>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <HAL_Init+0x40>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 fd41 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253e:	2000      	movs	r0, #0
 8002540:	f000 f808 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002544:	f7ff fde0 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_InitTick+0x54>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_InitTick+0x58>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256a:	fbb3 f3f1 	udiv	r3, r3, r1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fd59 	bl	800302a <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00e      	b.n	80025a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d80a      	bhi.n	800259e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002588:	2200      	movs	r2, #0
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002590:	f000 fd21 	bl	8002fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <HAL_InitTick+0x5c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000410 	.word	0x20000410
 80025ac:	20000418 	.word	0x20000418
 80025b0:	20000414 	.word	0x20000414

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000418 	.word	0x20000418
 80025d8:	20001220 	.word	0x20001220

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20001220 	.word	0x20001220

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000418 	.word	0x20000418

0800263c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e033      	b.n	80026ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fd7c 	bl	8002158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002682:	f023 0302 	bic.w	r3, r3, #2
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 faca 	bl	8002c28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f023 0303 	bic.w	r3, r3, #3
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Start+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e097      	b.n	800280e <HAL_ADC_Start+0x14a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d018      	beq.n	8002726 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002704:	4b45      	ldr	r3, [pc, #276]	@ (800281c <HAL_ADC_Start+0x158>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a45      	ldr	r2, [pc, #276]	@ (8002820 <HAL_ADC_Start+0x15c>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9a      	lsrs	r2, r3, #18
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002718:	e002      	b.n	8002720 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3b01      	subs	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d15f      	bne.n	80027f4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800275e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002772:	d106      	bne.n	8002782 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	f023 0206 	bic.w	r2, r3, #6
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002780:	e002      	b.n	8002788 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_ADC_Start+0x160>)
 8002792:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800279c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d129      	bne.n	800280c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e020      	b.n	800280c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <HAL_ADC_Start+0x164>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d11b      	bne.n	800280c <HAL_ADC_Start+0x148>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d114      	bne.n	800280c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	e00b      	b.n	800280c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000410 	.word	0x20000410
 8002820:	431bde83 	.word	0x431bde83
 8002824:	40012300 	.word	0x40012300
 8002828:	40012000 	.word	0x40012000

0800282c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_ADC_Stop+0x16>
 800283e:	2302      	movs	r3, #2
 8002840:	e021      	b.n	8002886 <HAL_ADC_Stop+0x5a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ae:	d113      	bne.n	80028d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028be:	d10b      	bne.n	80028d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e063      	b.n	80029a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d8:	f7ff fe80 	bl	80025dc <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028de:	e021      	b.n	8002924 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028e6:	d01d      	beq.n	8002924 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_ADC_PollForConversion+0x6c>
 80028ee:	f7ff fe75 	bl	80025dc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d212      	bcs.n	8002924 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d00b      	beq.n	8002924 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03d      	b.n	80029a0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d1d6      	bne.n	80028e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0212 	mvn.w	r2, #18
 800293a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d123      	bne.n	800299e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11f      	bne.n	800299e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d111      	bne.n	800299e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e113      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x244>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d925      	bls.n	8002a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	3b1e      	subs	r3, #30
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	e022      	b.n	8002a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	2207      	movs	r2, #7
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d824      	bhi.n	8002ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b05      	subs	r3, #5
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ad2:	e04c      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b23      	subs	r3, #35	@ 0x23
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b23      	subs	r3, #35	@ 0x23
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b24:	e023      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b41      	subs	r3, #65	@ 0x41
 8002b38:	221f      	movs	r2, #31
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b41      	subs	r3, #65	@ 0x41
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6e:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <HAL_ADC_ConfigChannel+0x250>)
 8002b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x1f4>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d122      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	@ (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_ADC_ConfigChannel+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <HAL_ADC_ConfigChannel+0x260>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9a      	lsrs	r2, r3, #18
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	10000012 	.word	0x10000012
 8002c20:	20000410 	.word	0x20000410
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <ADC_Init+0x1f0>)
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <ADC_Init+0x1f4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e00f      	b.n	8002d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0202 	bic.w	r2, r2, #2
 8002d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
 8002d40:	005a      	lsls	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	035a      	lsls	r2, r3, #13
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e007      	b.n	8002d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	051a      	lsls	r2, r3, #20
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dde:	025a      	lsls	r2, r3, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	029a      	lsls	r2, r3, #10
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	0f000001 	.word	0x0f000001

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	@ (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	@ (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	@ (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	@ 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f8c:	d301      	bcc.n	8002f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <SysTick_Config+0x40>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fa0:	f7ff ff8e 	bl	8002ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <SysTick_Config+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <SysTick_Config+0x40>)
 8002fac:	2207      	movs	r2, #7
 8002fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e010 	.word	0xe000e010

08002fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff29 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe8:	f7ff ff3e 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ff8e 	bl	8002f14 <NVIC_EncodePriority>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff5d 	bl	8002ec0 <__NVIC_SetPriority>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff31 	bl	8002e84 <__NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffa2 	bl	8002f7c <SysTick_Config>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e159      	b.n	8003314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8148 	bne.w	800330e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d005      	beq.n	8003096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003092:	2b02      	cmp	r3, #2
 8003094:	d130      	bne.n	80030f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d017      	beq.n	8003134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d123      	bne.n	8003188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a2 	beq.w	800330e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b57      	ldr	r3, [pc, #348]	@ (800332c <HAL_GPIO_Init+0x2e8>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	4a56      	ldr	r2, [pc, #344]	@ (800332c <HAL_GPIO_Init+0x2e8>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031da:	4b54      	ldr	r3, [pc, #336]	@ (800332c <HAL_GPIO_Init+0x2e8>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e6:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a49      	ldr	r2, [pc, #292]	@ (8003334 <HAL_GPIO_Init+0x2f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d019      	beq.n	8003246 <HAL_GPIO_Init+0x202>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a48      	ldr	r2, [pc, #288]	@ (8003338 <HAL_GPIO_Init+0x2f4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x1fe>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a47      	ldr	r2, [pc, #284]	@ (800333c <HAL_GPIO_Init+0x2f8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x1fa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a46      	ldr	r2, [pc, #280]	@ (8003340 <HAL_GPIO_Init+0x2fc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x1f6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a45      	ldr	r2, [pc, #276]	@ (8003344 <HAL_GPIO_Init+0x300>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x1f2>
 8003232:	2304      	movs	r3, #4
 8003234:	e008      	b.n	8003248 <HAL_GPIO_Init+0x204>
 8003236:	2307      	movs	r3, #7
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x204>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_Init+0x204>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_Init+0x204>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_Init+0x204>
 8003246:	2300      	movs	r3, #0
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003258:	4935      	ldr	r1, [pc, #212]	@ (8003330 <HAL_GPIO_Init+0x2ec>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003266:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <HAL_GPIO_Init+0x304>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328a:	4a2f      	ldr	r2, [pc, #188]	@ (8003348 <HAL_GPIO_Init+0x304>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <HAL_GPIO_Init+0x304>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b4:	4a24      	ldr	r2, [pc, #144]	@ (8003348 <HAL_GPIO_Init+0x304>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ba:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <HAL_GPIO_Init+0x304>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032de:	4a1a      	ldr	r2, [pc, #104]	@ (8003348 <HAL_GPIO_Init+0x304>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e4:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <HAL_GPIO_Init+0x304>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003308:	4a0f      	ldr	r2, [pc, #60]	@ (8003348 <HAL_GPIO_Init+0x304>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	f67f aea2 	bls.w	8003060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3724      	adds	r7, #36	@ 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40013800 	.word	0x40013800
 8003334:	40020000 	.word	0x40020000
 8003338:	40020400 	.word	0x40020400
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40021000 	.word	0x40021000
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003368:	e003      	b.n	8003372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800338a:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	@ (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fb52 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013c00 	.word	0x40013c00

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e12b      	b.n	800361a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fe ff02 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	@ 0x24
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003414:	f001 fa08 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8003418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a81      	ldr	r2, [pc, #516]	@ (8003624 <HAL_I2C_Init+0x274>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d807      	bhi.n	8003434 <HAL_I2C_Init+0x84>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a80      	ldr	r2, [pc, #512]	@ (8003628 <HAL_I2C_Init+0x278>)
 8003428:	4293      	cmp	r3, r2
 800342a:	bf94      	ite	ls
 800342c:	2301      	movls	r3, #1
 800342e:	2300      	movhi	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e006      	b.n	8003442 <HAL_I2C_Init+0x92>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a7d      	ldr	r2, [pc, #500]	@ (800362c <HAL_I2C_Init+0x27c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	bf94      	ite	ls
 800343c:	2301      	movls	r3, #1
 800343e:	2300      	movhi	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0e7      	b.n	800361a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a78      	ldr	r2, [pc, #480]	@ (8003630 <HAL_I2C_Init+0x280>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	0c9b      	lsrs	r3, r3, #18
 8003454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a6a      	ldr	r2, [pc, #424]	@ (8003624 <HAL_I2C_Init+0x274>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d802      	bhi.n	8003484 <HAL_I2C_Init+0xd4>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3301      	adds	r3, #1
 8003482:	e009      	b.n	8003498 <HAL_I2C_Init+0xe8>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a69      	ldr	r2, [pc, #420]	@ (8003634 <HAL_I2C_Init+0x284>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	3301      	adds	r3, #1
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	430b      	orrs	r3, r1
 800349e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	495c      	ldr	r1, [pc, #368]	@ (8003624 <HAL_I2C_Init+0x274>)
 80034b4:	428b      	cmp	r3, r1
 80034b6:	d819      	bhi.n	80034ec <HAL_I2C_Init+0x13c>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e59      	subs	r1, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c6:	1c59      	adds	r1, r3, #1
 80034c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034cc:	400b      	ands	r3, r1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_I2C_Init+0x138>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1e59      	subs	r1, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e6:	e051      	b.n	800358c <HAL_I2C_Init+0x1dc>
 80034e8:	2304      	movs	r3, #4
 80034ea:	e04f      	b.n	800358c <HAL_I2C_Init+0x1dc>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <HAL_I2C_Init+0x168>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e58      	subs	r0, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e012      	b.n	800353e <HAL_I2C_Init+0x18e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	0099      	lsls	r1, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	fbb0 f3f3 	udiv	r3, r0, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Init+0x196>
 8003542:	2301      	movs	r3, #1
 8003544:	e022      	b.n	800358c <HAL_I2C_Init+0x1dc>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10e      	bne.n	800356c <HAL_I2C_Init+0x1bc>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1e58      	subs	r0, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	440b      	add	r3, r1
 800355c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003560:	3301      	adds	r3, #1
 8003562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356a:	e00f      	b.n	800358c <HAL_I2C_Init+0x1dc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e58      	subs	r0, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	0099      	lsls	r1, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003582:	3301      	adds	r3, #1
 8003584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003588:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	6809      	ldr	r1, [r1, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6911      	ldr	r1, [r2, #16]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	000186a0 	.word	0x000186a0
 8003628:	001e847f 	.word	0x001e847f
 800362c:	003d08ff 	.word	0x003d08ff
 8003630:	431bde83 	.word	0x431bde83
 8003634:	10624dd3 	.word	0x10624dd3

08003638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	461a      	mov	r2, r3
 8003644:	460b      	mov	r3, r1
 8003646:	817b      	strh	r3, [r7, #10]
 8003648:	4613      	mov	r3, r2
 800364a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7fe ffc6 	bl	80025dc <HAL_GetTick>
 8003650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	f040 80e0 	bne.w	8003820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2319      	movs	r3, #25
 8003666:	2201      	movs	r2, #1
 8003668:	4970      	ldr	r1, [pc, #448]	@ (800382c <HAL_I2C_Master_Transmit+0x1f4>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa92 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	e0d3      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_I2C_Master_Transmit+0x50>
 8003684:	2302      	movs	r3, #2
 8003686:	e0cc      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d007      	beq.n	80036ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2221      	movs	r2, #33	@ 0x21
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2210      	movs	r2, #16
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	893a      	ldrh	r2, [r7, #8]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a50      	ldr	r2, [pc, #320]	@ (8003830 <HAL_I2C_Master_Transmit+0x1f8>)
 80036ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036f0:	8979      	ldrh	r1, [r7, #10]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f9ca 	bl	8003a90 <I2C_MasterRequestWrite>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08d      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800371c:	e066      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6a39      	ldr	r1, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fb50 	bl	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06b      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d11b      	bne.n	80037c0 <HAL_I2C_Master_Transmit+0x188>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	6a39      	ldr	r1, [r7, #32]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb47 	bl	8003e58 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d107      	bne.n	80037e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e01a      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d194      	bne.n	800371e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	00100002 	.word	0x00100002
 8003830:	ffff0000 	.word	0xffff0000

08003834 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	460b      	mov	r3, r1
 8003842:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7fe feca 	bl	80025dc <HAL_GetTick>
 8003848:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b20      	cmp	r3, #32
 8003858:	f040 8111 	bne.w	8003a7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2319      	movs	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	4988      	ldr	r1, [pc, #544]	@ (8003a88 <HAL_I2C_IsDeviceReady+0x254>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f994 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	e104      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2C_IsDeviceReady+0x50>
 8003880:	2302      	movs	r3, #2
 8003882:	e0fd      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d007      	beq.n	80038aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2224      	movs	r2, #36	@ 0x24
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a70      	ldr	r2, [pc, #448]	@ (8003a8c <HAL_I2C_IsDeviceReady+0x258>)
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f952 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003904:	d103      	bne.n	800390e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0b6      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003920:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fe5b 	bl	80025dc <HAL_GetTick>
 8003926:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003956:	e025      	b.n	80039a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7fe fe40 	bl	80025dc <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <HAL_I2C_IsDeviceReady+0x13a>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22a0      	movs	r2, #160	@ 0xa0
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80039ae:	d005      	beq.n	80039bc <HAL_I2C_IsDeviceReady+0x188>
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_I2C_IsDeviceReady+0x188>
 80039b6:	7dbb      	ldrb	r3, [r7, #22]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0cd      	beq.n	8003958 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d129      	bne.n	8003a26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2319      	movs	r3, #25
 80039fe:	2201      	movs	r2, #1
 8003a00:	4921      	ldr	r1, [pc, #132]	@ (8003a88 <HAL_I2C_IsDeviceReady+0x254>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f8c6 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e036      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e02c      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2319      	movs	r3, #25
 8003a46:	2201      	movs	r2, #1
 8003a48:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <HAL_I2C_IsDeviceReady+0x254>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8a2 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e012      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f4ff af32 	bcc.w	80038ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000

08003a90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d006      	beq.n	8003aba <I2C_MasterRequestWrite+0x2a>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d003      	beq.n	8003aba <I2C_MasterRequestWrite+0x2a>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e00b      	b.n	8003ae4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	d107      	bne.n	8003ae4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ae2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f84f 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0a:	d103      	bne.n	8003b14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e035      	b.n	8003b84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b20:	d108      	bne.n	8003b34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	e01b      	b.n	8003b6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	11db      	asrs	r3, r3, #7
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0306 	and.w	r3, r3, #6
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f063 030f 	orn	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	490e      	ldr	r1, [pc, #56]	@ (8003b8c <I2C_MasterRequestWrite+0xfc>)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f898 	bl	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e010      	b.n	8003b84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4907      	ldr	r1, [pc, #28]	@ (8003b90 <I2C_MasterRequestWrite+0x100>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f888 	bl	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010008 	.word	0x00010008
 8003b90:	00010002 	.word	0x00010002

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e048      	b.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bac:	d044      	beq.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fd15 	bl	80025dc <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d139      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	e00c      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d116      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e023      	b.n	8003c80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10d      	bne.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	e00c      	b.n	8003c78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d093      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c96:	e071      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d123      	bne.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e067      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cf6:	d041      	beq.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf8:	f7fe fc70 	bl	80025dc <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d136      	bne.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10c      	bne.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	e00b      	b.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e021      	b.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10c      	bne.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e00b      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf14      	ite	ne
 8003db2:	2301      	movne	r3, #1
 8003db4:	2300      	moveq	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f af6d 	bne.w	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd4:	e034      	b.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f886 	bl	8003ee8 <I2C_IsAcknowledgeFailed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e034      	b.n	8003e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dec:	d028      	beq.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fe fbf5 	bl	80025dc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11d      	bne.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d016      	beq.n	8003e40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d1c3      	bne.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e64:	e034      	b.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f83e 	bl	8003ee8 <I2C_IsAcknowledgeFailed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e034      	b.n	8003ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e7c:	d028      	beq.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe fbad 	bl	80025dc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d11d      	bne.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d016      	beq.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e007      	b.n	8003ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d1c3      	bne.n	8003e66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d11b      	bne.n	8003f38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e267      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d075      	beq.n	8004052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f66:	4b88      	ldr	r3, [pc, #544]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f72:	4b85      	ldr	r3, [pc, #532]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d112      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b82      	ldr	r3, [pc, #520]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05b      	beq.n	8004050 <HAL_RCC_OscConfig+0x108>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d157      	bne.n	8004050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e242      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCC_OscConfig+0x74>
 8003fae:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e01d      	b.n	8003ff8 <HAL_RCC_OscConfig+0xb0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x98>
 8003fc6:	4b70      	ldr	r3, [pc, #448]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6f      	ldr	r2, [pc, #444]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6c      	ldr	r2, [pc, #432]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0xb0>
 8003fe0:	4b69      	ldr	r3, [pc, #420]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a68      	ldr	r2, [pc, #416]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b66      	ldr	r3, [pc, #408]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a65      	ldr	r2, [pc, #404]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe faec 	bl	80025dc <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe fae8 	bl	80025dc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	@ 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e207      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b5b      	ldr	r3, [pc, #364]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0xc0>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fad8 	bl	80025dc <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe fad4 	bl	80025dc <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1f3      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004042:	4b51      	ldr	r3, [pc, #324]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0xe8>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d063      	beq.n	8004126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800405e:	4b4a      	ldr	r3, [pc, #296]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406a:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004072:	2b08      	cmp	r3, #8
 8004074:	d11c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b44      	ldr	r3, [pc, #272]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_RCC_OscConfig+0x152>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e1c7      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4937      	ldr	r1, [pc, #220]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	e03a      	b.n	8004126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b8:	4b34      	ldr	r3, [pc, #208]	@ (800418c <HAL_RCC_OscConfig+0x244>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fa8d 	bl	80025dc <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fe fa89 	bl	80025dc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1a8      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4925      	ldr	r1, [pc, #148]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e015      	b.n	8004126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_RCC_OscConfig+0x244>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fa6c 	bl	80025dc <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe fa68 	bl	80025dc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e187      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d036      	beq.n	80041a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_RCC_OscConfig+0x248>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe fa4c 	bl	80025dc <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004148:	f7fe fa48 	bl	80025dc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e167      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_OscConfig+0x240>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x200>
 8004166:	e01b      	b.n	80041a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004168:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_OscConfig+0x248>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416e:	f7fe fa35 	bl	80025dc <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004176:	f7fe fa31 	bl	80025dc <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e150      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	42470000 	.word	0x42470000
 8004190:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	4b88      	ldr	r3, [pc, #544]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ea      	bne.n	8004176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8097 	beq.w	80042dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b81      	ldr	r3, [pc, #516]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	4b7d      	ldr	r3, [pc, #500]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	4a7c      	ldr	r2, [pc, #496]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ce:	4b7a      	ldr	r3, [pc, #488]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	4b77      	ldr	r3, [pc, #476]	@ (80043bc <HAL_RCC_OscConfig+0x474>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ea:	4b74      	ldr	r3, [pc, #464]	@ (80043bc <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a73      	ldr	r2, [pc, #460]	@ (80043bc <HAL_RCC_OscConfig+0x474>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f6:	f7fe f9f1 	bl	80025dc <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fe f9ed 	bl	80025dc <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e10c      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	4b6a      	ldr	r3, [pc, #424]	@ (80043bc <HAL_RCC_OscConfig+0x474>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x2ea>
 8004224:	4b64      	ldr	r3, [pc, #400]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004228:	4a63      	ldr	r2, [pc, #396]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004230:	e01c      	b.n	800426c <HAL_RCC_OscConfig+0x324>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x30c>
 800423a:	4b5f      	ldr	r3, [pc, #380]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	4a5e      	ldr	r2, [pc, #376]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	6713      	str	r3, [r2, #112]	@ 0x70
 8004246:	4b5c      	ldr	r3, [pc, #368]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a5b      	ldr	r2, [pc, #364]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	@ 0x70
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0x324>
 8004254:	4b58      	ldr	r3, [pc, #352]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	4a57      	ldr	r2, [pc, #348]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004260:	4b55      	ldr	r3, [pc, #340]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	4a54      	ldr	r2, [pc, #336]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0304 	bic.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe f9b2 	bl	80025dc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe f9ae 	bl	80025dc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0cb      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	4b49      	ldr	r3, [pc, #292]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ee      	beq.n	800427c <HAL_RCC_OscConfig+0x334>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a0:	f7fe f99c 	bl	80025dc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe f998 	bl	80025dc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0b5      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	4b3e      	ldr	r3, [pc, #248]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ee      	bne.n	80042a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	4a38      	ldr	r2, [pc, #224]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80a1 	beq.w	8004428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e6:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d05c      	beq.n	80043ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d141      	bne.n	800437e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <HAL_RCC_OscConfig+0x478>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe f96c 	bl	80025dc <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe f968 	bl	80025dc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e087      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	019b      	lsls	r3, r3, #6
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	3b01      	subs	r3, #1
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	491b      	ldr	r1, [pc, #108]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004350:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <HAL_RCC_OscConfig+0x478>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe f941 	bl	80025dc <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435e:	f7fe f93d 	bl	80025dc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e05c      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x416>
 800437c:	e054      	b.n	8004428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <HAL_RCC_OscConfig+0x478>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe f92a 	bl	80025dc <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fe f926 	bl	80025dc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e045      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_RCC_OscConfig+0x470>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x444>
 80043aa:	e03d      	b.n	8004428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e038      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40007000 	.word	0x40007000
 80043c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4ec>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d028      	beq.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d121      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d11a      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	3b01      	subs	r3, #1
 800440e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800

08004438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0cc      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800444c:	4b68      	ldr	r3, [pc, #416]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d90c      	bls.n	8004474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b65      	ldr	r3, [pc, #404]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b63      	ldr	r3, [pc, #396]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0b8      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800448c:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a58      	ldr	r2, [pc, #352]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004496:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a4:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a52      	ldr	r2, [pc, #328]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b0:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	494d      	ldr	r1, [pc, #308]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d044      	beq.n	8004558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b47      	ldr	r3, [pc, #284]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d119      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	4b3f      	ldr	r3, [pc, #252]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004506:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e067      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004516:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 0203 	bic.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4934      	ldr	r1, [pc, #208]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004528:	f7fe f858 	bl	80025dc <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	e00a      	b.n	8004546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7fe f854 	bl	80025dc <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 020c 	and.w	r2, r3, #12
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	429a      	cmp	r2, r3
 8004556:	d1eb      	bne.n	8004530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004558:	4b25      	ldr	r3, [pc, #148]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d20c      	bcs.n	8004580 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e032      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800458c:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4916      	ldr	r1, [pc, #88]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045aa:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	490e      	ldr	r1, [pc, #56]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045be:	f000 f821 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	490a      	ldr	r1, [pc, #40]	@ (80045f8 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	4a09      	ldr	r2, [pc, #36]	@ (80045fc <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045da:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd ffb8 	bl	8002554 <HAL_InitTick>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023c00 	.word	0x40023c00
 80045f4:	40023800 	.word	0x40023800
 80045f8:	08007d4c 	.word	0x08007d4c
 80045fc:	20000410 	.word	0x20000410
 8004600:	20000414 	.word	0x20000414

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004608:	b094      	sub	sp, #80	@ 0x50
 800460a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461c:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d00d      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x40>
 8004628:	2b08      	cmp	r3, #8
 800462a:	f200 80e1 	bhi.w	80047f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x34>
 8004632:	2b04      	cmp	r3, #4
 8004634:	d003      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x3a>
 8004636:	e0db      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b73      	ldr	r3, [pc, #460]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x204>)
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800463c:	e0db      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463e:	4b73      	ldr	r3, [pc, #460]	@ (800480c <HAL_RCC_GetSysClockFreq+0x208>)
 8004640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004642:	e0d8      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004644:	4b6f      	ldr	r3, [pc, #444]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800464c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464e:	4b6d      	ldr	r3, [pc, #436]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b6a      	ldr	r3, [pc, #424]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	2200      	movs	r2, #0
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004664:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	633b      	str	r3, [r7, #48]	@ 0x30
 800466e:	2300      	movs	r3, #0
 8004670:	637b      	str	r3, [r7, #52]	@ 0x34
 8004672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004688:	0150      	lsls	r0, r2, #5
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4621      	mov	r1, r4
 8004690:	1a51      	subs	r1, r2, r1
 8004692:	6139      	str	r1, [r7, #16]
 8004694:	4629      	mov	r1, r5
 8004696:	eb63 0301 	sbc.w	r3, r3, r1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a8:	4659      	mov	r1, fp
 80046aa:	018b      	lsls	r3, r1, #6
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b2:	4651      	mov	r1, sl
 80046b4:	018a      	lsls	r2, r1, #6
 80046b6:	4651      	mov	r1, sl
 80046b8:	ebb2 0801 	subs.w	r8, r2, r1
 80046bc:	4659      	mov	r1, fp
 80046be:	eb63 0901 	sbc.w	r9, r3, r1
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d6:	4690      	mov	r8, r2
 80046d8:	4699      	mov	r9, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	eb18 0303 	adds.w	r3, r8, r3
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	462b      	mov	r3, r5
 80046e4:	eb49 0303 	adc.w	r3, r9, r3
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f6:	4629      	mov	r1, r5
 80046f8:	024b      	lsls	r3, r1, #9
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004700:	4621      	mov	r1, r4
 8004702:	024a      	lsls	r2, r1, #9
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800470a:	2200      	movs	r2, #0
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004714:	f7fc fa98 	bl	8000c48 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004720:	e058      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004722:	4b38      	ldr	r3, [pc, #224]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	2200      	movs	r2, #0
 800472a:	4618      	mov	r0, r3
 800472c:	4611      	mov	r1, r2
 800472e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
 8004738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	f04f 0000 	mov.w	r0, #0
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	0159      	lsls	r1, r3, #5
 800474a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474e:	0150      	lsls	r0, r2, #5
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4641      	mov	r1, r8
 8004756:	ebb2 0a01 	subs.w	sl, r2, r1
 800475a:	4649      	mov	r1, r9
 800475c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800476c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004774:	ebb2 040a 	subs.w	r4, r2, sl
 8004778:	eb63 050b 	sbc.w	r5, r3, fp
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	00eb      	lsls	r3, r5, #3
 8004786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478a:	00e2      	lsls	r2, r4, #3
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
 8004790:	4643      	mov	r3, r8
 8004792:	18e3      	adds	r3, r4, r3
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	464b      	mov	r3, r9
 8004798:	eb45 0303 	adc.w	r3, r5, r3
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047aa:	4629      	mov	r1, r5
 80047ac:	028b      	lsls	r3, r1, #10
 80047ae:	4621      	mov	r1, r4
 80047b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b4:	4621      	mov	r1, r4
 80047b6:	028a      	lsls	r2, r1, #10
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047be:	2200      	movs	r2, #0
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	61fa      	str	r2, [r7, #28]
 80047c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c8:	f7fc fa3e 	bl	8000c48 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4613      	mov	r3, r2
 80047d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	3301      	adds	r3, #1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80047e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x204>)
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3750      	adds	r7, #80	@ 0x50
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	00f42400 	.word	0x00f42400
 800480c:	007a1200 	.word	0x007a1200

08004810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_RCC_GetHCLKFreq+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000410 	.word	0x20000410

08004828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800482c:	f7ff fff0 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0a9b      	lsrs	r3, r3, #10
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	@ (800484c <HAL_RCC_GetPCLK1Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	08007d5c 	.word	0x08007d5c

08004850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004854:	f7ff ffdc 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0b5b      	lsrs	r3, r3, #13
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4903      	ldr	r1, [pc, #12]	@ (8004874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	08007d5c 	.word	0x08007d5c

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e041      	b.n	800490e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fce6 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 fb20 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e03c      	b.n	80049aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1e      	ldr	r2, [pc, #120]	@ (80049b8 <HAL_TIM_Base_Start+0xa0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIM_Base_Start+0x5c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	d013      	beq.n	8004974 <HAL_TIM_Base_Start+0x5c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <HAL_TIM_Base_Start+0xa4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIM_Base_Start+0x5c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a19      	ldr	r2, [pc, #100]	@ (80049c0 <HAL_TIM_Base_Start+0xa8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIM_Base_Start+0x5c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	@ (80049c4 <HAL_TIM_Base_Start+0xac>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_Base_Start+0x5c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	@ (80049c8 <HAL_TIM_Base_Start+0xb0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d111      	bne.n	8004998 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d010      	beq.n	80049a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	e007      	b.n	80049a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40014000 	.word	0x40014000

080049cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_TIM_Base_Stop+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_Base_Stop+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d001      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e044      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1e      	ldr	r2, [pc, #120]	@ (8004acc <HAL_TIM_Base_Start_IT+0xb0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x6c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x6c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x6c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	@ (8004adc <HAL_TIM_Base_Start_IT+0xc0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40014000 	.word	0x40014000

08004ae0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10f      	bne.n	8004b28 <HAL_TIM_Base_Stop_IT+0x48>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1a      	ldr	r2, [r3, #32]
 8004b0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_Base_Stop_IT+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0202 	mvn.w	r2, #2
 8004b72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f999 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004b8e:	e005      	b.n	8004b9c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f98b 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f99c 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d020      	beq.n	8004bee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0204 	mvn.w	r2, #4
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f973 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e005      	b.n	8004be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f965 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f976 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01b      	beq.n	8004c3a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0208 	mvn.w	r2, #8
 8004c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f94d 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004c26:	e005      	b.n	8004c34 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f93f 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f950 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01b      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0210 	mvn.w	r2, #16
 8004c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f927 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004c72:	e005      	b.n	8004c80 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f919 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f92a 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f06f 0201 	mvn.w	r2, #1
 8004ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fc ff47 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 faaf 	bl	800522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8fb 	bl	8004ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00c      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0220 	mvn.w	r2, #32
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fa81 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_ConfigClockSource+0x1c>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0b4      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x186>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d72:	d03e      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0xd4>
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d78:	f200 8087 	bhi.w	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d80:	f000 8086 	beq.w	8004e90 <HAL_TIM_ConfigClockSource+0x172>
 8004d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d88:	d87f      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004d8a:	2b70      	cmp	r3, #112	@ 0x70
 8004d8c:	d01a      	beq.n	8004dc4 <HAL_TIM_ConfigClockSource+0xa6>
 8004d8e:	2b70      	cmp	r3, #112	@ 0x70
 8004d90:	d87b      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004d92:	2b60      	cmp	r3, #96	@ 0x60
 8004d94:	d050      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x11a>
 8004d96:	2b60      	cmp	r3, #96	@ 0x60
 8004d98:	d877      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004d9a:	2b50      	cmp	r3, #80	@ 0x50
 8004d9c:	d03c      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xfa>
 8004d9e:	2b50      	cmp	r3, #80	@ 0x50
 8004da0:	d873      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004da2:	2b40      	cmp	r3, #64	@ 0x40
 8004da4:	d058      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0x13a>
 8004da6:	2b40      	cmp	r3, #64	@ 0x40
 8004da8:	d86f      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004daa:	2b30      	cmp	r3, #48	@ 0x30
 8004dac:	d064      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x15a>
 8004dae:	2b30      	cmp	r3, #48	@ 0x30
 8004db0:	d86b      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d060      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x15a>
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d867      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d05c      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d05a      	beq.n	8004e78 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc2:	e062      	b.n	8004e8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	f000 f992 	bl	80050fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004de6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]
      break;
 8004df0:	e04f      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	f000 f97b 	bl	80050fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e03c      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e24:	461a      	mov	r2, r3
 8004e26:	f000 f8ef 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2150      	movs	r1, #80	@ 0x50
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f948 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e36:	e02c      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e44:	461a      	mov	r2, r3
 8004e46:	f000 f90e 	bl	8005066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2160      	movs	r1, #96	@ 0x60
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f938 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e56:	e01c      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e64:	461a      	mov	r2, r3
 8004e66:	f000 f8cf 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2140      	movs	r1, #64	@ 0x40
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f928 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e76:	e00c      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 f91f 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e003      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a37      	ldr	r2, [pc, #220]	@ (8004fec <TIM_Base_SetConfig+0xf0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a34      	ldr	r2, [pc, #208]	@ (8004ff0 <TIM_Base_SetConfig+0xf4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a33      	ldr	r2, [pc, #204]	@ (8004ff4 <TIM_Base_SetConfig+0xf8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x38>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ff8 <TIM_Base_SetConfig+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <TIM_Base_SetConfig+0xf0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01b      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d017      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a25      	ldr	r2, [pc, #148]	@ (8004ff0 <TIM_Base_SetConfig+0xf4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <TIM_Base_SetConfig+0xf8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a23      	ldr	r2, [pc, #140]	@ (8004ff8 <TIM_Base_SetConfig+0xfc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <TIM_Base_SetConfig+0x100>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <TIM_Base_SetConfig+0x104>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a20      	ldr	r2, [pc, #128]	@ (8005004 <TIM_Base_SetConfig+0x108>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d108      	bne.n	8004f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004fec <TIM_Base_SetConfig+0xf0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d103      	bne.n	8004fc6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800

08005008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 030a 	bic.w	r3, r3, #10
 8005044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f023 0210 	bic.w	r2, r3, #16
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	431a      	orrs	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e050      	b.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a0:	d013      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a18      	ldr	r2, [pc, #96]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a13      	ldr	r2, [pc, #76]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10c      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40014000 	.word	0x40014000

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e042      	b.n	80052d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd f848 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2224      	movs	r2, #36	@ 0x24
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f82b 	bl	80052e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b0c0      	sub	sp, #256	@ 0x100
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	68d9      	ldr	r1, [r3, #12]
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	ea40 0301 	orr.w	r3, r0, r1
 8005308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	431a      	orrs	r2, r3
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005338:	f021 010c 	bic.w	r1, r1, #12
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005346:	430b      	orrs	r3, r1
 8005348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	6999      	ldr	r1, [r3, #24]
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	ea40 0301 	orr.w	r3, r0, r1
 8005366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b8f      	ldr	r3, [pc, #572]	@ (80055ac <UART_SetConfig+0x2cc>)
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <UART_SetConfig+0xa0>
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b8d      	ldr	r3, [pc, #564]	@ (80055b0 <UART_SetConfig+0x2d0>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d104      	bne.n	800538a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7ff fa66 	bl	8004850 <HAL_RCC_GetPCLK2Freq>
 8005384:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005388:	e003      	b.n	8005392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538a:	f7ff fa4d 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 800538e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539c:	f040 810c 	bne.w	80055b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053ba:	415b      	adcs	r3, r3
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053c2:	4621      	mov	r1, r4
 80053c4:	eb12 0801 	adds.w	r8, r2, r1
 80053c8:	4629      	mov	r1, r5
 80053ca:	eb43 0901 	adc.w	r9, r3, r1
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e2:	4690      	mov	r8, r2
 80053e4:	4699      	mov	r9, r3
 80053e6:	4623      	mov	r3, r4
 80053e8:	eb18 0303 	adds.w	r3, r8, r3
 80053ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053f0:	462b      	mov	r3, r5
 80053f2:	eb49 0303 	adc.w	r3, r9, r3
 80053f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005406:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800540a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800540e:	460b      	mov	r3, r1
 8005410:	18db      	adds	r3, r3, r3
 8005412:	653b      	str	r3, [r7, #80]	@ 0x50
 8005414:	4613      	mov	r3, r2
 8005416:	eb42 0303 	adc.w	r3, r2, r3
 800541a:	657b      	str	r3, [r7, #84]	@ 0x54
 800541c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005424:	f7fb fc10 	bl	8000c48 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b61      	ldr	r3, [pc, #388]	@ (80055b4 <UART_SetConfig+0x2d4>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005440:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005450:	415b      	adcs	r3, r3
 8005452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005458:	4641      	mov	r1, r8
 800545a:	eb12 0a01 	adds.w	sl, r2, r1
 800545e:	4649      	mov	r1, r9
 8005460:	eb43 0b01 	adc.w	fp, r3, r1
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005478:	4692      	mov	sl, r2
 800547a:	469b      	mov	fp, r3
 800547c:	4643      	mov	r3, r8
 800547e:	eb1a 0303 	adds.w	r3, sl, r3
 8005482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005486:	464b      	mov	r3, r9
 8005488:	eb4b 0303 	adc.w	r3, fp, r3
 800548c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800549c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054a4:	460b      	mov	r3, r1
 80054a6:	18db      	adds	r3, r3, r3
 80054a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054aa:	4613      	mov	r3, r2
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054ba:	f7fb fbc5 	bl	8000c48 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	4b3b      	ldr	r3, [pc, #236]	@ (80055b4 <UART_SetConfig+0x2d4>)
 80054c6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	2264      	movs	r2, #100	@ 0x64
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	1acb      	subs	r3, r1, r3
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054da:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <UART_SetConfig+0x2d4>)
 80054dc:	fba3 2302 	umull	r2, r3, r3, r2
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054e8:	441c      	add	r4, r3
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005504:	415b      	adcs	r3, r3
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6339      	str	r1, [r7, #48]	@ 0x30
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005540:	464b      	mov	r3, r9
 8005542:	460a      	mov	r2, r1
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800555c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005560:	460b      	mov	r3, r1
 8005562:	18db      	adds	r3, r3, r3
 8005564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005566:	4613      	mov	r3, r2
 8005568:	eb42 0303 	adc.w	r3, r2, r3
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800556e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005576:	f7fb fb67 	bl	8000c48 <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <UART_SetConfig+0x2d4>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	2164      	movs	r1, #100	@ 0x64
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	3332      	adds	r3, #50	@ 0x32
 8005592:	4a08      	ldr	r2, [pc, #32]	@ (80055b4 <UART_SetConfig+0x2d4>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	f003 0207 	and.w	r2, r3, #7
 800559e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4422      	add	r2, r4
 80055a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a8:	e106      	b.n	80057b8 <UART_SetConfig+0x4d8>
 80055aa:	bf00      	nop
 80055ac:	40011000 	.word	0x40011000
 80055b0:	40011400 	.word	0x40011400
 80055b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055bc:	2200      	movs	r2, #0
 80055be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ca:	4642      	mov	r2, r8
 80055cc:	464b      	mov	r3, r9
 80055ce:	1891      	adds	r1, r2, r2
 80055d0:	6239      	str	r1, [r7, #32]
 80055d2:	415b      	adcs	r3, r3
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055da:	4641      	mov	r1, r8
 80055dc:	1854      	adds	r4, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb43 0501 	adc.w	r5, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	00eb      	lsls	r3, r5, #3
 80055ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f2:	00e2      	lsls	r2, r4, #3
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	18e3      	adds	r3, r4, r3
 80055fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005600:	464b      	mov	r3, r9
 8005602:	eb45 0303 	adc.w	r3, r5, r3
 8005606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005616:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005626:	4629      	mov	r1, r5
 8005628:	008b      	lsls	r3, r1, #2
 800562a:	4621      	mov	r1, r4
 800562c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005630:	4621      	mov	r1, r4
 8005632:	008a      	lsls	r2, r1, #2
 8005634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005638:	f7fb fb06 	bl	8000c48 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4b60      	ldr	r3, [pc, #384]	@ (80057c4 <UART_SetConfig+0x4e4>)
 8005642:	fba3 2302 	umull	r2, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	011c      	lsls	r4, r3, #4
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005654:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	1891      	adds	r1, r2, r2
 8005662:	61b9      	str	r1, [r7, #24]
 8005664:	415b      	adcs	r3, r3
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566c:	4641      	mov	r1, r8
 800566e:	1851      	adds	r1, r2, r1
 8005670:	6139      	str	r1, [r7, #16]
 8005672:	4649      	mov	r1, r9
 8005674:	414b      	adcs	r3, r1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005684:	4659      	mov	r1, fp
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	4651      	mov	r1, sl
 800568a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568e:	4651      	mov	r1, sl
 8005690:	00ca      	lsls	r2, r1, #3
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	4603      	mov	r3, r0
 8005698:	4642      	mov	r2, r8
 800569a:	189b      	adds	r3, r3, r2
 800569c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056a0:	464b      	mov	r3, r9
 80056a2:	460a      	mov	r2, r1
 80056a4:	eb42 0303 	adc.w	r3, r2, r3
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056c4:	4649      	mov	r1, r9
 80056c6:	008b      	lsls	r3, r1, #2
 80056c8:	4641      	mov	r1, r8
 80056ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ce:	4641      	mov	r1, r8
 80056d0:	008a      	lsls	r2, r1, #2
 80056d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056d6:	f7fb fab7 	bl	8000c48 <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	4b38      	ldr	r3, [pc, #224]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80056e2:	fba3 2301 	umull	r2, r3, r3, r1
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2264      	movs	r2, #100	@ 0x64
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	1acb      	subs	r3, r1, r3
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	3332      	adds	r3, #50	@ 0x32
 80056f4:	4a33      	ldr	r2, [pc, #204]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005700:	441c      	add	r4, r3
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	673b      	str	r3, [r7, #112]	@ 0x70
 800570a:	677a      	str	r2, [r7, #116]	@ 0x74
 800570c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005710:	4642      	mov	r2, r8
 8005712:	464b      	mov	r3, r9
 8005714:	1891      	adds	r1, r2, r2
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	415b      	adcs	r3, r3
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005720:	4641      	mov	r1, r8
 8005722:	1851      	adds	r1, r2, r1
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	4649      	mov	r1, r9
 8005728:	414b      	adcs	r3, r1
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005738:	4659      	mov	r1, fp
 800573a:	00cb      	lsls	r3, r1, #3
 800573c:	4651      	mov	r1, sl
 800573e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005742:	4651      	mov	r1, sl
 8005744:	00ca      	lsls	r2, r1, #3
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	4603      	mov	r3, r0
 800574c:	4642      	mov	r2, r8
 800574e:	189b      	adds	r3, r3, r2
 8005750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005752:	464b      	mov	r3, r9
 8005754:	460a      	mov	r2, r1
 8005756:	eb42 0303 	adc.w	r3, r2, r3
 800575a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	663b      	str	r3, [r7, #96]	@ 0x60
 8005766:	667a      	str	r2, [r7, #100]	@ 0x64
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005774:	4649      	mov	r1, r9
 8005776:	008b      	lsls	r3, r1, #2
 8005778:	4641      	mov	r1, r8
 800577a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577e:	4641      	mov	r1, r8
 8005780:	008a      	lsls	r2, r1, #2
 8005782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005786:	f7fb fa5f 	bl	8000c48 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <UART_SetConfig+0x4e4>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	@ 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	3332      	adds	r3, #50	@ 0x32
 80057a2:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 020f 	and.w	r2, r3, #15
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4422      	add	r2, r4
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057be:	46bd      	mov	sp, r7
 80057c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c4:	51eb851f 	.word	0x51eb851f

080057c8 <siprintf>:
 80057c8:	b40e      	push	{r1, r2, r3}
 80057ca:	b500      	push	{lr}
 80057cc:	b09c      	sub	sp, #112	@ 0x70
 80057ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80057d0:	9002      	str	r0, [sp, #8]
 80057d2:	9006      	str	r0, [sp, #24]
 80057d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057d8:	4809      	ldr	r0, [pc, #36]	@ (8005800 <siprintf+0x38>)
 80057da:	9107      	str	r1, [sp, #28]
 80057dc:	9104      	str	r1, [sp, #16]
 80057de:	4909      	ldr	r1, [pc, #36]	@ (8005804 <siprintf+0x3c>)
 80057e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e4:	9105      	str	r1, [sp, #20]
 80057e6:	6800      	ldr	r0, [r0, #0]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	a902      	add	r1, sp, #8
 80057ec:	f000 f994 	bl	8005b18 <_svfiprintf_r>
 80057f0:	9b02      	ldr	r3, [sp, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	b01c      	add	sp, #112	@ 0x70
 80057f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057fc:	b003      	add	sp, #12
 80057fe:	4770      	bx	lr
 8005800:	2000041c 	.word	0x2000041c
 8005804:	ffff0208 	.word	0xffff0208

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <__errno>:
 8005818:	4b01      	ldr	r3, [pc, #4]	@ (8005820 <__errno+0x8>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2000041c 	.word	0x2000041c

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	4d0d      	ldr	r5, [pc, #52]	@ (800585c <__libc_init_array+0x38>)
 8005828:	4c0d      	ldr	r4, [pc, #52]	@ (8005860 <__libc_init_array+0x3c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	2600      	movs	r6, #0
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	4d0b      	ldr	r5, [pc, #44]	@ (8005864 <__libc_init_array+0x40>)
 8005836:	4c0c      	ldr	r4, [pc, #48]	@ (8005868 <__libc_init_array+0x44>)
 8005838:	f001 fbc4 	bl	8006fc4 <_init>
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	2600      	movs	r6, #0
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	08007dd0 	.word	0x08007dd0
 8005860:	08007dd0 	.word	0x08007dd0
 8005864:	08007dd0 	.word	0x08007dd0
 8005868:	08007dd4 	.word	0x08007dd4

0800586c <__retarget_lock_acquire_recursive>:
 800586c:	4770      	bx	lr

0800586e <__retarget_lock_release_recursive>:
 800586e:	4770      	bx	lr

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d041      	beq.n	80058fc <_free_r+0x8c>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 f8e0 	bl	8005a48 <__malloc_lock>
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <_free_r+0x90>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x2c>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005898:	f000 b8dc 	b.w	8005a54 <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x42>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	1821      	adds	r1, r4, r0
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1809      	addeq	r1, r1, r0
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x1e>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x4c>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x42>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1850      	adds	r0, r2, r1
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x6c>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4401      	add	r1, r0
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	4283      	cmp	r3, r0
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x22>
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6053      	str	r3, [r2, #4]
 80058d6:	4408      	add	r0, r1
 80058d8:	6010      	str	r0, [r2, #0]
 80058da:	e7da      	b.n	8005892 <_free_r+0x22>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x74>
 80058de:	230c      	movs	r3, #12
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x22>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf04      	itt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	bf04      	itt	eq
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	6054      	str	r4, [r2, #4]
 80058fa:	e7ca      	b.n	8005892 <_free_r+0x22>
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
 80058fe:	bf00      	nop
 8005900:	20001368 	.word	0x20001368

08005904 <sbrk_aligned>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4e0f      	ldr	r6, [pc, #60]	@ (8005944 <sbrk_aligned+0x40>)
 8005908:	460c      	mov	r4, r1
 800590a:	6831      	ldr	r1, [r6, #0]
 800590c:	4605      	mov	r5, r0
 800590e:	b911      	cbnz	r1, 8005916 <sbrk_aligned+0x12>
 8005910:	f000 fba6 	bl	8006060 <_sbrk_r>
 8005914:	6030      	str	r0, [r6, #0]
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 fba1 	bl	8006060 <_sbrk_r>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d103      	bne.n	800592a <sbrk_aligned+0x26>
 8005922:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005926:	4620      	mov	r0, r4
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	1cc4      	adds	r4, r0, #3
 800592c:	f024 0403 	bic.w	r4, r4, #3
 8005930:	42a0      	cmp	r0, r4
 8005932:	d0f8      	beq.n	8005926 <sbrk_aligned+0x22>
 8005934:	1a21      	subs	r1, r4, r0
 8005936:	4628      	mov	r0, r5
 8005938:	f000 fb92 	bl	8006060 <_sbrk_r>
 800593c:	3001      	adds	r0, #1
 800593e:	d1f2      	bne.n	8005926 <sbrk_aligned+0x22>
 8005940:	e7ef      	b.n	8005922 <sbrk_aligned+0x1e>
 8005942:	bf00      	nop
 8005944:	20001364 	.word	0x20001364

08005948 <_malloc_r>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	1ccd      	adds	r5, r1, #3
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	2d00      	cmp	r5, #0
 800595c:	4606      	mov	r6, r0
 800595e:	db01      	blt.n	8005964 <_malloc_r+0x1c>
 8005960:	42a9      	cmp	r1, r5
 8005962:	d904      	bls.n	800596e <_malloc_r+0x26>
 8005964:	230c      	movs	r3, #12
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	2000      	movs	r0, #0
 800596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a44 <_malloc_r+0xfc>
 8005972:	f000 f869 	bl	8005a48 <__malloc_lock>
 8005976:	f8d8 3000 	ldr.w	r3, [r8]
 800597a:	461c      	mov	r4, r3
 800597c:	bb44      	cbnz	r4, 80059d0 <_malloc_r+0x88>
 800597e:	4629      	mov	r1, r5
 8005980:	4630      	mov	r0, r6
 8005982:	f7ff ffbf 	bl	8005904 <sbrk_aligned>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	4604      	mov	r4, r0
 800598a:	d158      	bne.n	8005a3e <_malloc_r+0xf6>
 800598c:	f8d8 4000 	ldr.w	r4, [r8]
 8005990:	4627      	mov	r7, r4
 8005992:	2f00      	cmp	r7, #0
 8005994:	d143      	bne.n	8005a1e <_malloc_r+0xd6>
 8005996:	2c00      	cmp	r4, #0
 8005998:	d04b      	beq.n	8005a32 <_malloc_r+0xea>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	4639      	mov	r1, r7
 800599e:	4630      	mov	r0, r6
 80059a0:	eb04 0903 	add.w	r9, r4, r3
 80059a4:	f000 fb5c 	bl	8006060 <_sbrk_r>
 80059a8:	4581      	cmp	r9, r0
 80059aa:	d142      	bne.n	8005a32 <_malloc_r+0xea>
 80059ac:	6821      	ldr	r1, [r4, #0]
 80059ae:	1a6d      	subs	r5, r5, r1
 80059b0:	4629      	mov	r1, r5
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ffa6 	bl	8005904 <sbrk_aligned>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d03a      	beq.n	8005a32 <_malloc_r+0xea>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	442b      	add	r3, r5
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	f8d8 3000 	ldr.w	r3, [r8]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	bb62      	cbnz	r2, 8005a24 <_malloc_r+0xdc>
 80059ca:	f8c8 7000 	str.w	r7, [r8]
 80059ce:	e00f      	b.n	80059f0 <_malloc_r+0xa8>
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	1b52      	subs	r2, r2, r5
 80059d4:	d420      	bmi.n	8005a18 <_malloc_r+0xd0>
 80059d6:	2a0b      	cmp	r2, #11
 80059d8:	d917      	bls.n	8005a0a <_malloc_r+0xc2>
 80059da:	1961      	adds	r1, r4, r5
 80059dc:	42a3      	cmp	r3, r4
 80059de:	6025      	str	r5, [r4, #0]
 80059e0:	bf18      	it	ne
 80059e2:	6059      	strne	r1, [r3, #4]
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	bf08      	it	eq
 80059e8:	f8c8 1000 	streq.w	r1, [r8]
 80059ec:	5162      	str	r2, [r4, r5]
 80059ee:	604b      	str	r3, [r1, #4]
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 f82f 	bl	8005a54 <__malloc_unlock>
 80059f6:	f104 000b 	add.w	r0, r4, #11
 80059fa:	1d23      	adds	r3, r4, #4
 80059fc:	f020 0007 	bic.w	r0, r0, #7
 8005a00:	1ac2      	subs	r2, r0, r3
 8005a02:	bf1c      	itt	ne
 8005a04:	1a1b      	subne	r3, r3, r0
 8005a06:	50a3      	strne	r3, [r4, r2]
 8005a08:	e7af      	b.n	800596a <_malloc_r+0x22>
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	bf0c      	ite	eq
 8005a10:	f8c8 2000 	streq.w	r2, [r8]
 8005a14:	605a      	strne	r2, [r3, #4]
 8005a16:	e7eb      	b.n	80059f0 <_malloc_r+0xa8>
 8005a18:	4623      	mov	r3, r4
 8005a1a:	6864      	ldr	r4, [r4, #4]
 8005a1c:	e7ae      	b.n	800597c <_malloc_r+0x34>
 8005a1e:	463c      	mov	r4, r7
 8005a20:	687f      	ldr	r7, [r7, #4]
 8005a22:	e7b6      	b.n	8005992 <_malloc_r+0x4a>
 8005a24:	461a      	mov	r2, r3
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d1fb      	bne.n	8005a24 <_malloc_r+0xdc>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6053      	str	r3, [r2, #4]
 8005a30:	e7de      	b.n	80059f0 <_malloc_r+0xa8>
 8005a32:	230c      	movs	r3, #12
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 f80c 	bl	8005a54 <__malloc_unlock>
 8005a3c:	e794      	b.n	8005968 <_malloc_r+0x20>
 8005a3e:	6005      	str	r5, [r0, #0]
 8005a40:	e7d6      	b.n	80059f0 <_malloc_r+0xa8>
 8005a42:	bf00      	nop
 8005a44:	20001368 	.word	0x20001368

08005a48 <__malloc_lock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	@ (8005a50 <__malloc_lock+0x8>)
 8005a4a:	f7ff bf0f 	b.w	800586c <__retarget_lock_acquire_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20001360 	.word	0x20001360

08005a54 <__malloc_unlock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_unlock+0x8>)
 8005a56:	f7ff bf0a 	b.w	800586e <__retarget_lock_release_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20001360 	.word	0x20001360

08005a60 <__ssputs_r>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	688e      	ldr	r6, [r1, #8]
 8005a66:	461f      	mov	r7, r3
 8005a68:	42be      	cmp	r6, r7
 8005a6a:	680b      	ldr	r3, [r1, #0]
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4690      	mov	r8, r2
 8005a72:	d82d      	bhi.n	8005ad0 <__ssputs_r+0x70>
 8005a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a7c:	d026      	beq.n	8005acc <__ssputs_r+0x6c>
 8005a7e:	6965      	ldr	r5, [r4, #20]
 8005a80:	6909      	ldr	r1, [r1, #16]
 8005a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a86:	eba3 0901 	sub.w	r9, r3, r1
 8005a8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a8e:	1c7b      	adds	r3, r7, #1
 8005a90:	444b      	add	r3, r9
 8005a92:	106d      	asrs	r5, r5, #1
 8005a94:	429d      	cmp	r5, r3
 8005a96:	bf38      	it	cc
 8005a98:	461d      	movcc	r5, r3
 8005a9a:	0553      	lsls	r3, r2, #21
 8005a9c:	d527      	bpl.n	8005aee <__ssputs_r+0x8e>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7ff ff52 	bl	8005948 <_malloc_r>
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	b360      	cbz	r0, 8005b02 <__ssputs_r+0xa2>
 8005aa8:	6921      	ldr	r1, [r4, #16]
 8005aaa:	464a      	mov	r2, r9
 8005aac:	f000 fae8 	bl	8006080 <memcpy>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	6126      	str	r6, [r4, #16]
 8005abe:	6165      	str	r5, [r4, #20]
 8005ac0:	444e      	add	r6, r9
 8005ac2:	eba5 0509 	sub.w	r5, r5, r9
 8005ac6:	6026      	str	r6, [r4, #0]
 8005ac8:	60a5      	str	r5, [r4, #8]
 8005aca:	463e      	mov	r6, r7
 8005acc:	42be      	cmp	r6, r7
 8005ace:	d900      	bls.n	8005ad2 <__ssputs_r+0x72>
 8005ad0:	463e      	mov	r6, r7
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	f000 faa8 	bl	800602c <memmove>
 8005adc:	68a3      	ldr	r3, [r4, #8]
 8005ade:	1b9b      	subs	r3, r3, r6
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	4433      	add	r3, r6
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aee:	462a      	mov	r2, r5
 8005af0:	f000 fad4 	bl	800609c <_realloc_r>
 8005af4:	4606      	mov	r6, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1e0      	bne.n	8005abc <__ssputs_r+0x5c>
 8005afa:	6921      	ldr	r1, [r4, #16]
 8005afc:	4650      	mov	r0, sl
 8005afe:	f7ff feb7 	bl	8005870 <_free_r>
 8005b02:	230c      	movs	r3, #12
 8005b04:	f8ca 3000 	str.w	r3, [sl]
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b14:	e7e9      	b.n	8005aea <__ssputs_r+0x8a>
	...

08005b18 <_svfiprintf_r>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	4698      	mov	r8, r3
 8005b1e:	898b      	ldrh	r3, [r1, #12]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	b09d      	sub	sp, #116	@ 0x74
 8005b24:	4607      	mov	r7, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	d510      	bpl.n	8005b4e <_svfiprintf_r+0x36>
 8005b2c:	690b      	ldr	r3, [r1, #16]
 8005b2e:	b973      	cbnz	r3, 8005b4e <_svfiprintf_r+0x36>
 8005b30:	2140      	movs	r1, #64	@ 0x40
 8005b32:	f7ff ff09 	bl	8005948 <_malloc_r>
 8005b36:	6028      	str	r0, [r5, #0]
 8005b38:	6128      	str	r0, [r5, #16]
 8005b3a:	b930      	cbnz	r0, 8005b4a <_svfiprintf_r+0x32>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b44:	b01d      	add	sp, #116	@ 0x74
 8005b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4a:	2340      	movs	r3, #64	@ 0x40
 8005b4c:	616b      	str	r3, [r5, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b52:	2320      	movs	r3, #32
 8005b54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b5c:	2330      	movs	r3, #48	@ 0x30
 8005b5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cfc <_svfiprintf_r+0x1e4>
 8005b62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b66:	f04f 0901 	mov.w	r9, #1
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	469a      	mov	sl, r3
 8005b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b72:	b10a      	cbz	r2, 8005b78 <_svfiprintf_r+0x60>
 8005b74:	2a25      	cmp	r2, #37	@ 0x25
 8005b76:	d1f9      	bne.n	8005b6c <_svfiprintf_r+0x54>
 8005b78:	ebba 0b04 	subs.w	fp, sl, r4
 8005b7c:	d00b      	beq.n	8005b96 <_svfiprintf_r+0x7e>
 8005b7e:	465b      	mov	r3, fp
 8005b80:	4622      	mov	r2, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	4638      	mov	r0, r7
 8005b86:	f7ff ff6b 	bl	8005a60 <__ssputs_r>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f000 80a7 	beq.w	8005cde <_svfiprintf_r+0x1c6>
 8005b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b92:	445a      	add	r2, fp
 8005b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b96:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 809f 	beq.w	8005cde <_svfiprintf_r+0x1c6>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005baa:	f10a 0a01 	add.w	sl, sl, #1
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	9307      	str	r3, [sp, #28]
 8005bb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bb8:	4654      	mov	r4, sl
 8005bba:	2205      	movs	r2, #5
 8005bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc0:	484e      	ldr	r0, [pc, #312]	@ (8005cfc <_svfiprintf_r+0x1e4>)
 8005bc2:	f7fa fb0d 	bl	80001e0 <memchr>
 8005bc6:	9a04      	ldr	r2, [sp, #16]
 8005bc8:	b9d8      	cbnz	r0, 8005c02 <_svfiprintf_r+0xea>
 8005bca:	06d0      	lsls	r0, r2, #27
 8005bcc:	bf44      	itt	mi
 8005bce:	2320      	movmi	r3, #32
 8005bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd4:	0711      	lsls	r1, r2, #28
 8005bd6:	bf44      	itt	mi
 8005bd8:	232b      	movmi	r3, #43	@ 0x2b
 8005bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bde:	f89a 3000 	ldrb.w	r3, [sl]
 8005be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be4:	d015      	beq.n	8005c12 <_svfiprintf_r+0xfa>
 8005be6:	9a07      	ldr	r2, [sp, #28]
 8005be8:	4654      	mov	r4, sl
 8005bea:	2000      	movs	r0, #0
 8005bec:	f04f 0c0a 	mov.w	ip, #10
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf6:	3b30      	subs	r3, #48	@ 0x30
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d94b      	bls.n	8005c94 <_svfiprintf_r+0x17c>
 8005bfc:	b1b0      	cbz	r0, 8005c2c <_svfiprintf_r+0x114>
 8005bfe:	9207      	str	r2, [sp, #28]
 8005c00:	e014      	b.n	8005c2c <_svfiprintf_r+0x114>
 8005c02:	eba0 0308 	sub.w	r3, r0, r8
 8005c06:	fa09 f303 	lsl.w	r3, r9, r3
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	46a2      	mov	sl, r4
 8005c10:	e7d2      	b.n	8005bb8 <_svfiprintf_r+0xa0>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	9103      	str	r1, [sp, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfbb      	ittet	lt
 8005c1e:	425b      	neglt	r3, r3
 8005c20:	f042 0202 	orrlt.w	r2, r2, #2
 8005c24:	9307      	strge	r3, [sp, #28]
 8005c26:	9307      	strlt	r3, [sp, #28]
 8005c28:	bfb8      	it	lt
 8005c2a:	9204      	strlt	r2, [sp, #16]
 8005c2c:	7823      	ldrb	r3, [r4, #0]
 8005c2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c30:	d10a      	bne.n	8005c48 <_svfiprintf_r+0x130>
 8005c32:	7863      	ldrb	r3, [r4, #1]
 8005c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c36:	d132      	bne.n	8005c9e <_svfiprintf_r+0x186>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	9203      	str	r2, [sp, #12]
 8005c40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c44:	3402      	adds	r4, #2
 8005c46:	9305      	str	r3, [sp, #20]
 8005c48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d0c <_svfiprintf_r+0x1f4>
 8005c4c:	7821      	ldrb	r1, [r4, #0]
 8005c4e:	2203      	movs	r2, #3
 8005c50:	4650      	mov	r0, sl
 8005c52:	f7fa fac5 	bl	80001e0 <memchr>
 8005c56:	b138      	cbz	r0, 8005c68 <_svfiprintf_r+0x150>
 8005c58:	9b04      	ldr	r3, [sp, #16]
 8005c5a:	eba0 000a 	sub.w	r0, r0, sl
 8005c5e:	2240      	movs	r2, #64	@ 0x40
 8005c60:	4082      	lsls	r2, r0
 8005c62:	4313      	orrs	r3, r2
 8005c64:	3401      	adds	r4, #1
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6c:	4824      	ldr	r0, [pc, #144]	@ (8005d00 <_svfiprintf_r+0x1e8>)
 8005c6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c72:	2206      	movs	r2, #6
 8005c74:	f7fa fab4 	bl	80001e0 <memchr>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d036      	beq.n	8005cea <_svfiprintf_r+0x1d2>
 8005c7c:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <_svfiprintf_r+0x1ec>)
 8005c7e:	bb1b      	cbnz	r3, 8005cc8 <_svfiprintf_r+0x1b0>
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	3307      	adds	r3, #7
 8005c84:	f023 0307 	bic.w	r3, r3, #7
 8005c88:	3308      	adds	r3, #8
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8e:	4433      	add	r3, r6
 8005c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c92:	e76a      	b.n	8005b6a <_svfiprintf_r+0x52>
 8005c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c98:	460c      	mov	r4, r1
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	e7a8      	b.n	8005bf0 <_svfiprintf_r+0xd8>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	3401      	adds	r4, #1
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	f04f 0c0a 	mov.w	ip, #10
 8005caa:	4620      	mov	r0, r4
 8005cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cb0:	3a30      	subs	r2, #48	@ 0x30
 8005cb2:	2a09      	cmp	r2, #9
 8005cb4:	d903      	bls.n	8005cbe <_svfiprintf_r+0x1a6>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0c6      	beq.n	8005c48 <_svfiprintf_r+0x130>
 8005cba:	9105      	str	r1, [sp, #20]
 8005cbc:	e7c4      	b.n	8005c48 <_svfiprintf_r+0x130>
 8005cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e7f0      	b.n	8005caa <_svfiprintf_r+0x192>
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	4b0e      	ldr	r3, [pc, #56]	@ (8005d08 <_svfiprintf_r+0x1f0>)
 8005cd0:	a904      	add	r1, sp, #16
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	1c42      	adds	r2, r0, #1
 8005cda:	4606      	mov	r6, r0
 8005cdc:	d1d6      	bne.n	8005c8c <_svfiprintf_r+0x174>
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	065b      	lsls	r3, r3, #25
 8005ce2:	f53f af2d 	bmi.w	8005b40 <_svfiprintf_r+0x28>
 8005ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ce8:	e72c      	b.n	8005b44 <_svfiprintf_r+0x2c>
 8005cea:	ab03      	add	r3, sp, #12
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	462a      	mov	r2, r5
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <_svfiprintf_r+0x1f0>)
 8005cf2:	a904      	add	r1, sp, #16
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f000 f879 	bl	8005dec <_printf_i>
 8005cfa:	e7ed      	b.n	8005cd8 <_svfiprintf_r+0x1c0>
 8005cfc:	08007d64 	.word	0x08007d64
 8005d00:	08007d6e 	.word	0x08007d6e
 8005d04:	00000000 	.word	0x00000000
 8005d08:	08005a61 	.word	0x08005a61
 8005d0c:	08007d6a 	.word	0x08007d6a

08005d10 <_printf_common>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	4698      	mov	r8, r3
 8005d18:	688a      	ldr	r2, [r1, #8]
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bfb8      	it	lt
 8005d24:	4613      	movlt	r3, r2
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b10a      	cbz	r2, 8005d36 <_printf_common+0x26>
 8005d32:	3301      	adds	r3, #1
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	0699      	lsls	r1, r3, #26
 8005d3a:	bf42      	ittt	mi
 8005d3c:	6833      	ldrmi	r3, [r6, #0]
 8005d3e:	3302      	addmi	r3, #2
 8005d40:	6033      	strmi	r3, [r6, #0]
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	f015 0506 	ands.w	r5, r5, #6
 8005d48:	d106      	bne.n	8005d58 <_printf_common+0x48>
 8005d4a:	f104 0a19 	add.w	sl, r4, #25
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	6832      	ldr	r2, [r6, #0]
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dc26      	bgt.n	8005da6 <_printf_common+0x96>
 8005d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	3b00      	subs	r3, #0
 8005d60:	bf18      	it	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	0692      	lsls	r2, r2, #26
 8005d66:	d42b      	bmi.n	8005dc0 <_printf_common+0xb0>
 8005d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	4638      	mov	r0, r7
 8005d70:	47c8      	blx	r9
 8005d72:	3001      	adds	r0, #1
 8005d74:	d01e      	beq.n	8005db4 <_printf_common+0xa4>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	f003 0306 	and.w	r3, r3, #6
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf02      	ittt	eq
 8005d82:	68e5      	ldreq	r5, [r4, #12]
 8005d84:	6833      	ldreq	r3, [r6, #0]
 8005d86:	1aed      	subeq	r5, r5, r3
 8005d88:	68a3      	ldr	r3, [r4, #8]
 8005d8a:	bf0c      	ite	eq
 8005d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d90:	2500      	movne	r5, #0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	bfc4      	itt	gt
 8005d96:	1a9b      	subgt	r3, r3, r2
 8005d98:	18ed      	addgt	r5, r5, r3
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	341a      	adds	r4, #26
 8005d9e:	42b5      	cmp	r5, r6
 8005da0:	d11a      	bne.n	8005dd8 <_printf_common+0xc8>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e008      	b.n	8005db8 <_printf_common+0xa8>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4652      	mov	r2, sl
 8005daa:	4641      	mov	r1, r8
 8005dac:	4638      	mov	r0, r7
 8005dae:	47c8      	blx	r9
 8005db0:	3001      	adds	r0, #1
 8005db2:	d103      	bne.n	8005dbc <_printf_common+0xac>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7c6      	b.n	8005d4e <_printf_common+0x3e>
 8005dc0:	18e1      	adds	r1, r4, r3
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	2030      	movs	r0, #48	@ 0x30
 8005dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dca:	4422      	add	r2, r4
 8005dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	e7c7      	b.n	8005d68 <_printf_common+0x58>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4641      	mov	r1, r8
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c8      	blx	r9
 8005de2:	3001      	adds	r0, #1
 8005de4:	d0e6      	beq.n	8005db4 <_printf_common+0xa4>
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7d9      	b.n	8005d9e <_printf_common+0x8e>
	...

08005dec <_printf_i>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	7e0f      	ldrb	r7, [r1, #24]
 8005df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005df4:	2f78      	cmp	r7, #120	@ 0x78
 8005df6:	4691      	mov	r9, r2
 8005df8:	4680      	mov	r8, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	469a      	mov	sl, r3
 8005dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e02:	d807      	bhi.n	8005e14 <_printf_i+0x28>
 8005e04:	2f62      	cmp	r7, #98	@ 0x62
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x32>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	f000 80d2 	beq.w	8005fb2 <_printf_i+0x1c6>
 8005e0e:	2f58      	cmp	r7, #88	@ 0x58
 8005e10:	f000 80b9 	beq.w	8005f86 <_printf_i+0x19a>
 8005e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e1c:	e03a      	b.n	8005e94 <_printf_i+0xa8>
 8005e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e22:	2b15      	cmp	r3, #21
 8005e24:	d8f6      	bhi.n	8005e14 <_printf_i+0x28>
 8005e26:	a101      	add	r1, pc, #4	@ (adr r1, 8005e2c <_printf_i+0x40>)
 8005e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e15 	.word	0x08005e15
 8005e38:	08005e15 	.word	0x08005e15
 8005e3c:	08005e15 	.word	0x08005e15
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e15 	.word	0x08005e15
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005f99 	.word	0x08005f99
 8005e5c:	08005ec3 	.word	0x08005ec3
 8005e60:	08005f53 	.word	0x08005f53
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005fbb 	.word	0x08005fbb
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005ec3 	.word	0x08005ec3
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f5b 	.word	0x08005f5b
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6032      	str	r2, [r6, #0]
 8005e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e09d      	b.n	8005fd4 <_printf_i+0x1e8>
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	1d19      	adds	r1, r3, #4
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	0606      	lsls	r6, r0, #24
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_i+0xbc>
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	e003      	b.n	8005eb0 <_printf_i+0xc4>
 8005ea8:	0645      	lsls	r5, r0, #25
 8005eaa:	d5fb      	bpl.n	8005ea4 <_printf_i+0xb8>
 8005eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	da03      	bge.n	8005ebc <_printf_i+0xd0>
 8005eb4:	232d      	movs	r3, #45	@ 0x2d
 8005eb6:	426d      	negs	r5, r5
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ebc:	4859      	ldr	r0, [pc, #356]	@ (8006024 <_printf_i+0x238>)
 8005ebe:	230a      	movs	r3, #10
 8005ec0:	e011      	b.n	8005ee6 <_printf_i+0xfa>
 8005ec2:	6821      	ldr	r1, [r4, #0]
 8005ec4:	6833      	ldr	r3, [r6, #0]
 8005ec6:	0608      	lsls	r0, r1, #24
 8005ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ecc:	d402      	bmi.n	8005ed4 <_printf_i+0xe8>
 8005ece:	0649      	lsls	r1, r1, #25
 8005ed0:	bf48      	it	mi
 8005ed2:	b2ad      	uxthmi	r5, r5
 8005ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ed6:	4853      	ldr	r0, [pc, #332]	@ (8006024 <_printf_i+0x238>)
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	bf14      	ite	ne
 8005edc:	230a      	movne	r3, #10
 8005ede:	2308      	moveq	r3, #8
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ee6:	6866      	ldr	r6, [r4, #4]
 8005ee8:	60a6      	str	r6, [r4, #8]
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	bfa2      	ittt	ge
 8005eee:	6821      	ldrge	r1, [r4, #0]
 8005ef0:	f021 0104 	bicge.w	r1, r1, #4
 8005ef4:	6021      	strge	r1, [r4, #0]
 8005ef6:	b90d      	cbnz	r5, 8005efc <_printf_i+0x110>
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d04b      	beq.n	8005f94 <_printf_i+0x1a8>
 8005efc:	4616      	mov	r6, r2
 8005efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f02:	fb03 5711 	mls	r7, r3, r1, r5
 8005f06:	5dc7      	ldrb	r7, [r0, r7]
 8005f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0c:	462f      	mov	r7, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	460d      	mov	r5, r1
 8005f12:	d9f4      	bls.n	8005efe <_printf_i+0x112>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10b      	bne.n	8005f30 <_printf_i+0x144>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	07df      	lsls	r7, r3, #31
 8005f1c:	d508      	bpl.n	8005f30 <_printf_i+0x144>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	bfde      	ittt	le
 8005f26:	2330      	movle	r3, #48	@ 0x30
 8005f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f30:	1b92      	subs	r2, r2, r6
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	464b      	mov	r3, r9
 8005f3a:	aa03      	add	r2, sp, #12
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fee6 	bl	8005d10 <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d14a      	bne.n	8005fde <_printf_i+0x1f2>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f4c:	b004      	add	sp, #16
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f043 0320 	orr.w	r3, r3, #32
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	4833      	ldr	r0, [pc, #204]	@ (8006028 <_printf_i+0x23c>)
 8005f5c:	2778      	movs	r7, #120	@ 0x78
 8005f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	6831      	ldr	r1, [r6, #0]
 8005f66:	061f      	lsls	r7, r3, #24
 8005f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f6c:	d402      	bmi.n	8005f74 <_printf_i+0x188>
 8005f6e:	065f      	lsls	r7, r3, #25
 8005f70:	bf48      	it	mi
 8005f72:	b2ad      	uxthmi	r5, r5
 8005f74:	6031      	str	r1, [r6, #0]
 8005f76:	07d9      	lsls	r1, r3, #31
 8005f78:	bf44      	itt	mi
 8005f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f7e:	6023      	strmi	r3, [r4, #0]
 8005f80:	b11d      	cbz	r5, 8005f8a <_printf_i+0x19e>
 8005f82:	2310      	movs	r3, #16
 8005f84:	e7ac      	b.n	8005ee0 <_printf_i+0xf4>
 8005f86:	4827      	ldr	r0, [pc, #156]	@ (8006024 <_printf_i+0x238>)
 8005f88:	e7e9      	b.n	8005f5e <_printf_i+0x172>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f023 0320 	bic.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	e7f6      	b.n	8005f82 <_printf_i+0x196>
 8005f94:	4616      	mov	r6, r2
 8005f96:	e7bd      	b.n	8005f14 <_printf_i+0x128>
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	6961      	ldr	r1, [r4, #20]
 8005f9e:	1d18      	adds	r0, r3, #4
 8005fa0:	6030      	str	r0, [r6, #0]
 8005fa2:	062e      	lsls	r6, r5, #24
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0x1c0>
 8005fa8:	6019      	str	r1, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0x1c6>
 8005fac:	0668      	lsls	r0, r5, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0x1bc>
 8005fb0:	8019      	strh	r1, [r3, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	4616      	mov	r6, r2
 8005fb8:	e7bc      	b.n	8005f34 <_printf_i+0x148>
 8005fba:	6833      	ldr	r3, [r6, #0]
 8005fbc:	1d1a      	adds	r2, r3, #4
 8005fbe:	6032      	str	r2, [r6, #0]
 8005fc0:	681e      	ldr	r6, [r3, #0]
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7fa f90a 	bl	80001e0 <memchr>
 8005fcc:	b108      	cbz	r0, 8005fd2 <_printf_i+0x1e6>
 8005fce:	1b80      	subs	r0, r0, r6
 8005fd0:	6060      	str	r0, [r4, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fdc:	e7aa      	b.n	8005f34 <_printf_i+0x148>
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	47d0      	blx	sl
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d0ad      	beq.n	8005f48 <_printf_i+0x15c>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	079b      	lsls	r3, r3, #30
 8005ff0:	d413      	bmi.n	800601a <_printf_i+0x22e>
 8005ff2:	68e0      	ldr	r0, [r4, #12]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	bfb8      	it	lt
 8005ffa:	4618      	movlt	r0, r3
 8005ffc:	e7a6      	b.n	8005f4c <_printf_i+0x160>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4632      	mov	r2, r6
 8006002:	4649      	mov	r1, r9
 8006004:	4640      	mov	r0, r8
 8006006:	47d0      	blx	sl
 8006008:	3001      	adds	r0, #1
 800600a:	d09d      	beq.n	8005f48 <_printf_i+0x15c>
 800600c:	3501      	adds	r5, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	9903      	ldr	r1, [sp, #12]
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	42ab      	cmp	r3, r5
 8006016:	dcf2      	bgt.n	8005ffe <_printf_i+0x212>
 8006018:	e7eb      	b.n	8005ff2 <_printf_i+0x206>
 800601a:	2500      	movs	r5, #0
 800601c:	f104 0619 	add.w	r6, r4, #25
 8006020:	e7f5      	b.n	800600e <_printf_i+0x222>
 8006022:	bf00      	nop
 8006024:	08007d75 	.word	0x08007d75
 8006028:	08007d86 	.word	0x08007d86

0800602c <memmove>:
 800602c:	4288      	cmp	r0, r1
 800602e:	b510      	push	{r4, lr}
 8006030:	eb01 0402 	add.w	r4, r1, r2
 8006034:	d902      	bls.n	800603c <memmove+0x10>
 8006036:	4284      	cmp	r4, r0
 8006038:	4623      	mov	r3, r4
 800603a:	d807      	bhi.n	800604c <memmove+0x20>
 800603c:	1e43      	subs	r3, r0, #1
 800603e:	42a1      	cmp	r1, r4
 8006040:	d008      	beq.n	8006054 <memmove+0x28>
 8006042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800604a:	e7f8      	b.n	800603e <memmove+0x12>
 800604c:	4402      	add	r2, r0
 800604e:	4601      	mov	r1, r0
 8006050:	428a      	cmp	r2, r1
 8006052:	d100      	bne.n	8006056 <memmove+0x2a>
 8006054:	bd10      	pop	{r4, pc}
 8006056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800605a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800605e:	e7f7      	b.n	8006050 <memmove+0x24>

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	@ (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fc f9de 	bl	800242c <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	2000135c 	.word	0x2000135c

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006096:	4291      	cmp	r1, r2
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <_realloc_r>:
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	4680      	mov	r8, r0
 80060a2:	4615      	mov	r5, r2
 80060a4:	460c      	mov	r4, r1
 80060a6:	b921      	cbnz	r1, 80060b2 <_realloc_r+0x16>
 80060a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	4611      	mov	r1, r2
 80060ae:	f7ff bc4b 	b.w	8005948 <_malloc_r>
 80060b2:	b92a      	cbnz	r2, 80060c0 <_realloc_r+0x24>
 80060b4:	f7ff fbdc 	bl	8005870 <_free_r>
 80060b8:	2400      	movs	r4, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	f000 f81a 	bl	80060f8 <_malloc_usable_size_r>
 80060c4:	4285      	cmp	r5, r0
 80060c6:	4606      	mov	r6, r0
 80060c8:	d802      	bhi.n	80060d0 <_realloc_r+0x34>
 80060ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060ce:	d8f4      	bhi.n	80060ba <_realloc_r+0x1e>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fc38 	bl	8005948 <_malloc_r>
 80060d8:	4607      	mov	r7, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0ec      	beq.n	80060b8 <_realloc_r+0x1c>
 80060de:	42b5      	cmp	r5, r6
 80060e0:	462a      	mov	r2, r5
 80060e2:	4621      	mov	r1, r4
 80060e4:	bf28      	it	cs
 80060e6:	4632      	movcs	r2, r6
 80060e8:	f7ff ffca 	bl	8006080 <memcpy>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4640      	mov	r0, r8
 80060f0:	f7ff fbbe 	bl	8005870 <_free_r>
 80060f4:	463c      	mov	r4, r7
 80060f6:	e7e0      	b.n	80060ba <_realloc_r+0x1e>

080060f8 <_malloc_usable_size_r>:
 80060f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fc:	1f18      	subs	r0, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfbc      	itt	lt
 8006102:	580b      	ldrlt	r3, [r1, r0]
 8006104:	18c0      	addlt	r0, r0, r3
 8006106:	4770      	bx	lr

08006108 <pow>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	ed2d 8b02 	vpush	{d8}
 800610e:	eeb0 8a40 	vmov.f32	s16, s0
 8006112:	eef0 8a60 	vmov.f32	s17, s1
 8006116:	ec55 4b11 	vmov	r4, r5, d1
 800611a:	f000 f871 	bl	8006200 <__ieee754_pow>
 800611e:	4622      	mov	r2, r4
 8006120:	462b      	mov	r3, r5
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	ec57 6b10 	vmov	r6, r7, d0
 800612a:	f7fa fcff 	bl	8000b2c <__aeabi_dcmpun>
 800612e:	2800      	cmp	r0, #0
 8006130:	d13b      	bne.n	80061aa <pow+0xa2>
 8006132:	ec51 0b18 	vmov	r0, r1, d8
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	f7fa fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800613e:	b1b8      	cbz	r0, 8006170 <pow+0x68>
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800614c:	2800      	cmp	r0, #0
 800614e:	d146      	bne.n	80061de <pow+0xd6>
 8006150:	ec45 4b10 	vmov	d0, r4, r5
 8006154:	f000 f848 	bl	80061e8 <finite>
 8006158:	b338      	cbz	r0, 80061aa <pow+0xa2>
 800615a:	2200      	movs	r2, #0
 800615c:	2300      	movs	r3, #0
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	b300      	cbz	r0, 80061aa <pow+0xa2>
 8006168:	f7ff fb56 	bl	8005818 <__errno>
 800616c:	2322      	movs	r3, #34	@ 0x22
 800616e:	e01b      	b.n	80061a8 <pow+0xa0>
 8006170:	ec47 6b10 	vmov	d0, r6, r7
 8006174:	f000 f838 	bl	80061e8 <finite>
 8006178:	b9e0      	cbnz	r0, 80061b4 <pow+0xac>
 800617a:	eeb0 0a48 	vmov.f32	s0, s16
 800617e:	eef0 0a68 	vmov.f32	s1, s17
 8006182:	f000 f831 	bl	80061e8 <finite>
 8006186:	b1a8      	cbz	r0, 80061b4 <pow+0xac>
 8006188:	ec45 4b10 	vmov	d0, r4, r5
 800618c:	f000 f82c 	bl	80061e8 <finite>
 8006190:	b180      	cbz	r0, 80061b4 <pow+0xac>
 8006192:	4632      	mov	r2, r6
 8006194:	463b      	mov	r3, r7
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa fcc7 	bl	8000b2c <__aeabi_dcmpun>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0e2      	beq.n	8006168 <pow+0x60>
 80061a2:	f7ff fb39 	bl	8005818 <__errno>
 80061a6:	2321      	movs	r3, #33	@ 0x21
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	ecbd 8b02 	vpop	{d8}
 80061ae:	ec47 6b10 	vmov	d0, r6, r7
 80061b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d0f2      	beq.n	80061aa <pow+0xa2>
 80061c4:	eeb0 0a48 	vmov.f32	s0, s16
 80061c8:	eef0 0a68 	vmov.f32	s1, s17
 80061cc:	f000 f80c 	bl	80061e8 <finite>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d0ea      	beq.n	80061aa <pow+0xa2>
 80061d4:	ec45 4b10 	vmov	d0, r4, r5
 80061d8:	f000 f806 	bl	80061e8 <finite>
 80061dc:	e7c3      	b.n	8006166 <pow+0x5e>
 80061de:	4f01      	ldr	r7, [pc, #4]	@ (80061e4 <pow+0xdc>)
 80061e0:	2600      	movs	r6, #0
 80061e2:	e7e2      	b.n	80061aa <pow+0xa2>
 80061e4:	3ff00000 	.word	0x3ff00000

080061e8 <finite>:
 80061e8:	b082      	sub	sp, #8
 80061ea:	ed8d 0b00 	vstr	d0, [sp]
 80061ee:	9801      	ldr	r0, [sp, #4]
 80061f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80061f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80061f8:	0fc0      	lsrs	r0, r0, #31
 80061fa:	b002      	add	sp, #8
 80061fc:	4770      	bx	lr
	...

08006200 <__ieee754_pow>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	b091      	sub	sp, #68	@ 0x44
 8006206:	ed8d 1b00 	vstr	d1, [sp]
 800620a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800620e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006212:	ea5a 0001 	orrs.w	r0, sl, r1
 8006216:	ec57 6b10 	vmov	r6, r7, d0
 800621a:	d113      	bne.n	8006244 <__ieee754_pow+0x44>
 800621c:	19b3      	adds	r3, r6, r6
 800621e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006222:	4152      	adcs	r2, r2
 8006224:	4298      	cmp	r0, r3
 8006226:	4b98      	ldr	r3, [pc, #608]	@ (8006488 <__ieee754_pow+0x288>)
 8006228:	4193      	sbcs	r3, r2
 800622a:	f080 84ea 	bcs.w	8006c02 <__ieee754_pow+0xa02>
 800622e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa f829 	bl	800028c <__adddf3>
 800623a:	ec41 0b10 	vmov	d0, r0, r1
 800623e:	b011      	add	sp, #68	@ 0x44
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	4a91      	ldr	r2, [pc, #580]	@ (800648c <__ieee754_pow+0x28c>)
 8006246:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800624a:	4590      	cmp	r8, r2
 800624c:	463d      	mov	r5, r7
 800624e:	4633      	mov	r3, r6
 8006250:	d806      	bhi.n	8006260 <__ieee754_pow+0x60>
 8006252:	d101      	bne.n	8006258 <__ieee754_pow+0x58>
 8006254:	2e00      	cmp	r6, #0
 8006256:	d1ea      	bne.n	800622e <__ieee754_pow+0x2e>
 8006258:	4592      	cmp	sl, r2
 800625a:	d801      	bhi.n	8006260 <__ieee754_pow+0x60>
 800625c:	d10e      	bne.n	800627c <__ieee754_pow+0x7c>
 800625e:	b169      	cbz	r1, 800627c <__ieee754_pow+0x7c>
 8006260:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006264:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006268:	431d      	orrs	r5, r3
 800626a:	d1e0      	bne.n	800622e <__ieee754_pow+0x2e>
 800626c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006270:	18db      	adds	r3, r3, r3
 8006272:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006276:	4152      	adcs	r2, r2
 8006278:	429d      	cmp	r5, r3
 800627a:	e7d4      	b.n	8006226 <__ieee754_pow+0x26>
 800627c:	2d00      	cmp	r5, #0
 800627e:	46c3      	mov	fp, r8
 8006280:	da3a      	bge.n	80062f8 <__ieee754_pow+0xf8>
 8006282:	4a83      	ldr	r2, [pc, #524]	@ (8006490 <__ieee754_pow+0x290>)
 8006284:	4592      	cmp	sl, r2
 8006286:	d84d      	bhi.n	8006324 <__ieee754_pow+0x124>
 8006288:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800628c:	4592      	cmp	sl, r2
 800628e:	f240 84c7 	bls.w	8006c20 <__ieee754_pow+0xa20>
 8006292:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006296:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800629a:	2a14      	cmp	r2, #20
 800629c:	dd0f      	ble.n	80062be <__ieee754_pow+0xbe>
 800629e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80062a2:	fa21 f402 	lsr.w	r4, r1, r2
 80062a6:	fa04 f202 	lsl.w	r2, r4, r2
 80062aa:	428a      	cmp	r2, r1
 80062ac:	f040 84b8 	bne.w	8006c20 <__ieee754_pow+0xa20>
 80062b0:	f004 0401 	and.w	r4, r4, #1
 80062b4:	f1c4 0402 	rsb	r4, r4, #2
 80062b8:	2900      	cmp	r1, #0
 80062ba:	d158      	bne.n	800636e <__ieee754_pow+0x16e>
 80062bc:	e00e      	b.n	80062dc <__ieee754_pow+0xdc>
 80062be:	2900      	cmp	r1, #0
 80062c0:	d154      	bne.n	800636c <__ieee754_pow+0x16c>
 80062c2:	f1c2 0214 	rsb	r2, r2, #20
 80062c6:	fa4a f402 	asr.w	r4, sl, r2
 80062ca:	fa04 f202 	lsl.w	r2, r4, r2
 80062ce:	4552      	cmp	r2, sl
 80062d0:	f040 84a3 	bne.w	8006c1a <__ieee754_pow+0xa1a>
 80062d4:	f004 0401 	and.w	r4, r4, #1
 80062d8:	f1c4 0402 	rsb	r4, r4, #2
 80062dc:	4a6d      	ldr	r2, [pc, #436]	@ (8006494 <__ieee754_pow+0x294>)
 80062de:	4592      	cmp	sl, r2
 80062e0:	d12e      	bne.n	8006340 <__ieee754_pow+0x140>
 80062e2:	f1b9 0f00 	cmp.w	r9, #0
 80062e6:	f280 8494 	bge.w	8006c12 <__ieee754_pow+0xa12>
 80062ea:	496a      	ldr	r1, [pc, #424]	@ (8006494 <__ieee754_pow+0x294>)
 80062ec:	4632      	mov	r2, r6
 80062ee:	463b      	mov	r3, r7
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7fa faab 	bl	800084c <__aeabi_ddiv>
 80062f6:	e7a0      	b.n	800623a <__ieee754_pow+0x3a>
 80062f8:	2400      	movs	r4, #0
 80062fa:	bbc1      	cbnz	r1, 800636e <__ieee754_pow+0x16e>
 80062fc:	4a63      	ldr	r2, [pc, #396]	@ (800648c <__ieee754_pow+0x28c>)
 80062fe:	4592      	cmp	sl, r2
 8006300:	d1ec      	bne.n	80062dc <__ieee754_pow+0xdc>
 8006302:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006306:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800630a:	431a      	orrs	r2, r3
 800630c:	f000 8479 	beq.w	8006c02 <__ieee754_pow+0xa02>
 8006310:	4b61      	ldr	r3, [pc, #388]	@ (8006498 <__ieee754_pow+0x298>)
 8006312:	4598      	cmp	r8, r3
 8006314:	d908      	bls.n	8006328 <__ieee754_pow+0x128>
 8006316:	f1b9 0f00 	cmp.w	r9, #0
 800631a:	f2c0 8476 	blt.w	8006c0a <__ieee754_pow+0xa0a>
 800631e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006322:	e78a      	b.n	800623a <__ieee754_pow+0x3a>
 8006324:	2402      	movs	r4, #2
 8006326:	e7e8      	b.n	80062fa <__ieee754_pow+0xfa>
 8006328:	f1b9 0f00 	cmp.w	r9, #0
 800632c:	f04f 0000 	mov.w	r0, #0
 8006330:	f04f 0100 	mov.w	r1, #0
 8006334:	da81      	bge.n	800623a <__ieee754_pow+0x3a>
 8006336:	e9dd 0300 	ldrd	r0, r3, [sp]
 800633a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800633e:	e77c      	b.n	800623a <__ieee754_pow+0x3a>
 8006340:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006344:	d106      	bne.n	8006354 <__ieee754_pow+0x154>
 8006346:	4632      	mov	r2, r6
 8006348:	463b      	mov	r3, r7
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7fa f953 	bl	80005f8 <__aeabi_dmul>
 8006352:	e772      	b.n	800623a <__ieee754_pow+0x3a>
 8006354:	4a51      	ldr	r2, [pc, #324]	@ (800649c <__ieee754_pow+0x29c>)
 8006356:	4591      	cmp	r9, r2
 8006358:	d109      	bne.n	800636e <__ieee754_pow+0x16e>
 800635a:	2d00      	cmp	r5, #0
 800635c:	db07      	blt.n	800636e <__ieee754_pow+0x16e>
 800635e:	ec47 6b10 	vmov	d0, r6, r7
 8006362:	b011      	add	sp, #68	@ 0x44
 8006364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	f000 bd52 	b.w	8006e10 <__ieee754_sqrt>
 800636c:	2400      	movs	r4, #0
 800636e:	ec47 6b10 	vmov	d0, r6, r7
 8006372:	9302      	str	r3, [sp, #8]
 8006374:	f000 fc88 	bl	8006c88 <fabs>
 8006378:	9b02      	ldr	r3, [sp, #8]
 800637a:	ec51 0b10 	vmov	r0, r1, d0
 800637e:	bb53      	cbnz	r3, 80063d6 <__ieee754_pow+0x1d6>
 8006380:	4b44      	ldr	r3, [pc, #272]	@ (8006494 <__ieee754_pow+0x294>)
 8006382:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006386:	429a      	cmp	r2, r3
 8006388:	d002      	beq.n	8006390 <__ieee754_pow+0x190>
 800638a:	f1b8 0f00 	cmp.w	r8, #0
 800638e:	d122      	bne.n	80063d6 <__ieee754_pow+0x1d6>
 8006390:	f1b9 0f00 	cmp.w	r9, #0
 8006394:	da05      	bge.n	80063a2 <__ieee754_pow+0x1a2>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	2000      	movs	r0, #0
 800639c:	493d      	ldr	r1, [pc, #244]	@ (8006494 <__ieee754_pow+0x294>)
 800639e:	f7fa fa55 	bl	800084c <__aeabi_ddiv>
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	f6bf af49 	bge.w	800623a <__ieee754_pow+0x3a>
 80063a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80063ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80063b0:	ea58 0804 	orrs.w	r8, r8, r4
 80063b4:	d108      	bne.n	80063c8 <__ieee754_pow+0x1c8>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	f7f9 ff63 	bl	8000288 <__aeabi_dsub>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	e794      	b.n	80062f2 <__ieee754_pow+0xf2>
 80063c8:	2c01      	cmp	r4, #1
 80063ca:	f47f af36 	bne.w	800623a <__ieee754_pow+0x3a>
 80063ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063d2:	4619      	mov	r1, r3
 80063d4:	e731      	b.n	800623a <__ieee754_pow+0x3a>
 80063d6:	0feb      	lsrs	r3, r5, #31
 80063d8:	3b01      	subs	r3, #1
 80063da:	ea53 0204 	orrs.w	r2, r3, r4
 80063de:	d102      	bne.n	80063e6 <__ieee754_pow+0x1e6>
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	e7e9      	b.n	80063ba <__ieee754_pow+0x1ba>
 80063e6:	3c01      	subs	r4, #1
 80063e8:	431c      	orrs	r4, r3
 80063ea:	d016      	beq.n	800641a <__ieee754_pow+0x21a>
 80063ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006478 <__ieee754_pow+0x278>
 80063f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80063f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063f8:	f240 8112 	bls.w	8006620 <__ieee754_pow+0x420>
 80063fc:	4b28      	ldr	r3, [pc, #160]	@ (80064a0 <__ieee754_pow+0x2a0>)
 80063fe:	459a      	cmp	sl, r3
 8006400:	4b25      	ldr	r3, [pc, #148]	@ (8006498 <__ieee754_pow+0x298>)
 8006402:	d916      	bls.n	8006432 <__ieee754_pow+0x232>
 8006404:	4598      	cmp	r8, r3
 8006406:	d80b      	bhi.n	8006420 <__ieee754_pow+0x220>
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	da0b      	bge.n	8006426 <__ieee754_pow+0x226>
 800640e:	2000      	movs	r0, #0
 8006410:	b011      	add	sp, #68	@ 0x44
 8006412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	f000 bcf3 	b.w	8006e00 <__math_oflow>
 800641a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006480 <__ieee754_pow+0x280>
 800641e:	e7e7      	b.n	80063f0 <__ieee754_pow+0x1f0>
 8006420:	f1b9 0f00 	cmp.w	r9, #0
 8006424:	dcf3      	bgt.n	800640e <__ieee754_pow+0x20e>
 8006426:	2000      	movs	r0, #0
 8006428:	b011      	add	sp, #68	@ 0x44
 800642a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642e:	f000 bcdf 	b.w	8006df0 <__math_uflow>
 8006432:	4598      	cmp	r8, r3
 8006434:	d20c      	bcs.n	8006450 <__ieee754_pow+0x250>
 8006436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	f7fa fb4d 	bl	8000adc <__aeabi_dcmplt>
 8006442:	3800      	subs	r0, #0
 8006444:	bf18      	it	ne
 8006446:	2001      	movne	r0, #1
 8006448:	f1b9 0f00 	cmp.w	r9, #0
 800644c:	daec      	bge.n	8006428 <__ieee754_pow+0x228>
 800644e:	e7df      	b.n	8006410 <__ieee754_pow+0x210>
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <__ieee754_pow+0x294>)
 8006452:	4598      	cmp	r8, r3
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	d924      	bls.n	80064a4 <__ieee754_pow+0x2a4>
 800645a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645e:	2300      	movs	r3, #0
 8006460:	f7fa fb3c 	bl	8000adc <__aeabi_dcmplt>
 8006464:	3800      	subs	r0, #0
 8006466:	bf18      	it	ne
 8006468:	2001      	movne	r0, #1
 800646a:	f1b9 0f00 	cmp.w	r9, #0
 800646e:	dccf      	bgt.n	8006410 <__ieee754_pow+0x210>
 8006470:	e7da      	b.n	8006428 <__ieee754_pow+0x228>
 8006472:	bf00      	nop
 8006474:	f3af 8000 	nop.w
 8006478:	00000000 	.word	0x00000000
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	00000000 	.word	0x00000000
 8006484:	bff00000 	.word	0xbff00000
 8006488:	fff00000 	.word	0xfff00000
 800648c:	7ff00000 	.word	0x7ff00000
 8006490:	433fffff 	.word	0x433fffff
 8006494:	3ff00000 	.word	0x3ff00000
 8006498:	3fefffff 	.word	0x3fefffff
 800649c:	3fe00000 	.word	0x3fe00000
 80064a0:	43f00000 	.word	0x43f00000
 80064a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006610 <__ieee754_pow+0x410>)
 80064a6:	f7f9 feef 	bl	8000288 <__aeabi_dsub>
 80064aa:	a351      	add	r3, pc, #324	@ (adr r3, 80065f0 <__ieee754_pow+0x3f0>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	f7fa f8a0 	bl	80005f8 <__aeabi_dmul>
 80064b8:	a34f      	add	r3, pc, #316	@ (adr r3, 80065f8 <__ieee754_pow+0x3f8>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	4606      	mov	r6, r0
 80064c0:	460f      	mov	r7, r1
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7fa f897 	bl	80005f8 <__aeabi_dmul>
 80064ca:	4b52      	ldr	r3, [pc, #328]	@ (8006614 <__ieee754_pow+0x414>)
 80064cc:	4682      	mov	sl, r0
 80064ce:	468b      	mov	fp, r1
 80064d0:	2200      	movs	r2, #0
 80064d2:	4620      	mov	r0, r4
 80064d4:	4629      	mov	r1, r5
 80064d6:	f7fa f88f 	bl	80005f8 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	a148      	add	r1, pc, #288	@ (adr r1, 8006600 <__ieee754_pow+0x400>)
 80064e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064e4:	f7f9 fed0 	bl	8000288 <__aeabi_dsub>
 80064e8:	4622      	mov	r2, r4
 80064ea:	462b      	mov	r3, r5
 80064ec:	f7fa f884 	bl	80005f8 <__aeabi_dmul>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	2000      	movs	r0, #0
 80064f6:	4948      	ldr	r1, [pc, #288]	@ (8006618 <__ieee754_pow+0x418>)
 80064f8:	f7f9 fec6 	bl	8000288 <__aeabi_dsub>
 80064fc:	4622      	mov	r2, r4
 80064fe:	4680      	mov	r8, r0
 8006500:	4689      	mov	r9, r1
 8006502:	462b      	mov	r3, r5
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa f876 	bl	80005f8 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa f870 	bl	80005f8 <__aeabi_dmul>
 8006518:	a33b      	add	r3, pc, #236	@ (adr r3, 8006608 <__ieee754_pow+0x408>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f86b 	bl	80005f8 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4650      	mov	r0, sl
 8006528:	4659      	mov	r1, fp
 800652a:	f7f9 fead 	bl	8000288 <__aeabi_dsub>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4680      	mov	r8, r0
 8006534:	4689      	mov	r9, r1
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	f7f9 fea7 	bl	800028c <__adddf3>
 800653e:	2400      	movs	r4, #0
 8006540:	4632      	mov	r2, r6
 8006542:	463b      	mov	r3, r7
 8006544:	4620      	mov	r0, r4
 8006546:	460d      	mov	r5, r1
 8006548:	f7f9 fe9e 	bl	8000288 <__aeabi_dsub>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7f9 fe98 	bl	8000288 <__aeabi_dsub>
 8006558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800655c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006560:	2300      	movs	r3, #0
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006568:	4606      	mov	r6, r0
 800656a:	460f      	mov	r7, r1
 800656c:	4652      	mov	r2, sl
 800656e:	465b      	mov	r3, fp
 8006570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006574:	f7f9 fe88 	bl	8000288 <__aeabi_dsub>
 8006578:	4622      	mov	r2, r4
 800657a:	462b      	mov	r3, r5
 800657c:	f7fa f83c 	bl	80005f8 <__aeabi_dmul>
 8006580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006584:	4680      	mov	r8, r0
 8006586:	4689      	mov	r9, r1
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7fa f834 	bl	80005f8 <__aeabi_dmul>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4640      	mov	r0, r8
 8006596:	4649      	mov	r1, r9
 8006598:	f7f9 fe78 	bl	800028c <__adddf3>
 800659c:	4652      	mov	r2, sl
 800659e:	465b      	mov	r3, fp
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7fa f826 	bl	80005f8 <__aeabi_dmul>
 80065ac:	460b      	mov	r3, r1
 80065ae:	4602      	mov	r2, r0
 80065b0:	4680      	mov	r8, r0
 80065b2:	4689      	mov	r9, r1
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7f9 fe68 	bl	800028c <__adddf3>
 80065bc:	4b17      	ldr	r3, [pc, #92]	@ (800661c <__ieee754_pow+0x41c>)
 80065be:	4299      	cmp	r1, r3
 80065c0:	4604      	mov	r4, r0
 80065c2:	460d      	mov	r5, r1
 80065c4:	468a      	mov	sl, r1
 80065c6:	468b      	mov	fp, r1
 80065c8:	f340 82ef 	ble.w	8006baa <__ieee754_pow+0x9aa>
 80065cc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80065d0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80065d4:	4303      	orrs	r3, r0
 80065d6:	f000 81e8 	beq.w	80069aa <__ieee754_pow+0x7aa>
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	2300      	movs	r3, #0
 80065e2:	f7fa fa7b 	bl	8000adc <__aeabi_dcmplt>
 80065e6:	3800      	subs	r0, #0
 80065e8:	bf18      	it	ne
 80065ea:	2001      	movne	r0, #1
 80065ec:	e710      	b.n	8006410 <__ieee754_pow+0x210>
 80065ee:	bf00      	nop
 80065f0:	60000000 	.word	0x60000000
 80065f4:	3ff71547 	.word	0x3ff71547
 80065f8:	f85ddf44 	.word	0xf85ddf44
 80065fc:	3e54ae0b 	.word	0x3e54ae0b
 8006600:	55555555 	.word	0x55555555
 8006604:	3fd55555 	.word	0x3fd55555
 8006608:	652b82fe 	.word	0x652b82fe
 800660c:	3ff71547 	.word	0x3ff71547
 8006610:	3ff00000 	.word	0x3ff00000
 8006614:	3fd00000 	.word	0x3fd00000
 8006618:	3fe00000 	.word	0x3fe00000
 800661c:	408fffff 	.word	0x408fffff
 8006620:	4bd5      	ldr	r3, [pc, #852]	@ (8006978 <__ieee754_pow+0x778>)
 8006622:	402b      	ands	r3, r5
 8006624:	2200      	movs	r2, #0
 8006626:	b92b      	cbnz	r3, 8006634 <__ieee754_pow+0x434>
 8006628:	4bd4      	ldr	r3, [pc, #848]	@ (800697c <__ieee754_pow+0x77c>)
 800662a:	f7f9 ffe5 	bl	80005f8 <__aeabi_dmul>
 800662e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006632:	468b      	mov	fp, r1
 8006634:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006638:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800663c:	4413      	add	r3, r2
 800663e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006640:	4bcf      	ldr	r3, [pc, #828]	@ (8006980 <__ieee754_pow+0x780>)
 8006642:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006646:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800664a:	459b      	cmp	fp, r3
 800664c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006650:	dd08      	ble.n	8006664 <__ieee754_pow+0x464>
 8006652:	4bcc      	ldr	r3, [pc, #816]	@ (8006984 <__ieee754_pow+0x784>)
 8006654:	459b      	cmp	fp, r3
 8006656:	f340 81a5 	ble.w	80069a4 <__ieee754_pow+0x7a4>
 800665a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665c:	3301      	adds	r3, #1
 800665e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006660:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006664:	f04f 0a00 	mov.w	sl, #0
 8006668:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800666c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800666e:	4bc6      	ldr	r3, [pc, #792]	@ (8006988 <__ieee754_pow+0x788>)
 8006670:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006674:	ed93 7b00 	vldr	d7, [r3]
 8006678:	4629      	mov	r1, r5
 800667a:	ec53 2b17 	vmov	r2, r3, d7
 800667e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006682:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006686:	f7f9 fdff 	bl	8000288 <__aeabi_dsub>
 800668a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006696:	f7f9 fdf9 	bl	800028c <__adddf3>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	2000      	movs	r0, #0
 80066a0:	49ba      	ldr	r1, [pc, #744]	@ (800698c <__ieee754_pow+0x78c>)
 80066a2:	f7fa f8d3 	bl	800084c <__aeabi_ddiv>
 80066a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4630      	mov	r0, r6
 80066b0:	4639      	mov	r1, r7
 80066b2:	f7f9 ffa1 	bl	80005f8 <__aeabi_dmul>
 80066b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066ba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80066be:	106d      	asrs	r5, r5, #1
 80066c0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80066cc:	4661      	mov	r1, ip
 80066ce:	2200      	movs	r2, #0
 80066d0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80066d4:	4658      	mov	r0, fp
 80066d6:	46e1      	mov	r9, ip
 80066d8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 fdcc 	bl	8000288 <__aeabi_dsub>
 80066f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	4620      	mov	r0, r4
 80066fa:	4629      	mov	r1, r5
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006708:	f7f9 fdbe 	bl	8000288 <__aeabi_dsub>
 800670c:	465a      	mov	r2, fp
 800670e:	464b      	mov	r3, r9
 8006710:	f7f9 ff72 	bl	80005f8 <__aeabi_dmul>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 fdb4 	bl	8000288 <__aeabi_dsub>
 8006720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006724:	f7f9 ff68 	bl	80005f8 <__aeabi_dmul>
 8006728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800672c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	f7f9 ff60 	bl	80005f8 <__aeabi_dmul>
 8006738:	a37d      	add	r3, pc, #500	@ (adr r3, 8006930 <__ieee754_pow+0x730>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	f7f9 ff59 	bl	80005f8 <__aeabi_dmul>
 8006746:	a37c      	add	r3, pc, #496	@ (adr r3, 8006938 <__ieee754_pow+0x738>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd9e 	bl	800028c <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 ff50 	bl	80005f8 <__aeabi_dmul>
 8006758:	a379      	add	r3, pc, #484	@ (adr r3, 8006940 <__ieee754_pow+0x740>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fd95 	bl	800028c <__adddf3>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 ff47 	bl	80005f8 <__aeabi_dmul>
 800676a:	a377      	add	r3, pc, #476	@ (adr r3, 8006948 <__ieee754_pow+0x748>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fd8c 	bl	800028c <__adddf3>
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	f7f9 ff3e 	bl	80005f8 <__aeabi_dmul>
 800677c:	a374      	add	r3, pc, #464	@ (adr r3, 8006950 <__ieee754_pow+0x750>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fd83 	bl	800028c <__adddf3>
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	a372      	add	r3, pc, #456	@ (adr r3, 8006958 <__ieee754_pow+0x758>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 fd7a 	bl	800028c <__adddf3>
 8006798:	4622      	mov	r2, r4
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	462b      	mov	r3, r5
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 ff22 	bl	80005f8 <__aeabi_dmul>
 80067b4:	465a      	mov	r2, fp
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	464b      	mov	r3, r9
 80067bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067c0:	f7f9 fd64 	bl	800028c <__adddf3>
 80067c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	f7f9 fd5c 	bl	800028c <__adddf3>
 80067d4:	465a      	mov	r2, fp
 80067d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067da:	464b      	mov	r3, r9
 80067dc:	4658      	mov	r0, fp
 80067de:	4649      	mov	r1, r9
 80067e0:	f7f9 ff0a 	bl	80005f8 <__aeabi_dmul>
 80067e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006990 <__ieee754_pow+0x790>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	f7f9 fd4e 	bl	800028c <__adddf3>
 80067f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067f4:	f7f9 fd4a 	bl	800028c <__adddf3>
 80067f8:	46d8      	mov	r8, fp
 80067fa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80067fe:	460d      	mov	r5, r1
 8006800:	465a      	mov	r2, fp
 8006802:	460b      	mov	r3, r1
 8006804:	4640      	mov	r0, r8
 8006806:	4649      	mov	r1, r9
 8006808:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	465c      	mov	r4, fp
 8006812:	4680      	mov	r8, r0
 8006814:	4689      	mov	r9, r1
 8006816:	4b5e      	ldr	r3, [pc, #376]	@ (8006990 <__ieee754_pow+0x790>)
 8006818:	2200      	movs	r2, #0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fd33 	bl	8000288 <__aeabi_dsub>
 8006822:	4632      	mov	r2, r6
 8006824:	463b      	mov	r3, r7
 8006826:	f7f9 fd2f 	bl	8000288 <__aeabi_dsub>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006832:	f7f9 fd29 	bl	8000288 <__aeabi_dsub>
 8006836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	4622      	mov	r2, r4
 8006840:	4606      	mov	r6, r0
 8006842:	460f      	mov	r7, r1
 8006844:	462b      	mov	r3, r5
 8006846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684a:	f7f9 fed5 	bl	80005f8 <__aeabi_dmul>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4630      	mov	r0, r6
 8006854:	4639      	mov	r1, r7
 8006856:	f7f9 fd19 	bl	800028c <__adddf3>
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7f9 fd11 	bl	800028c <__adddf3>
 800686a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800686e:	a33c      	add	r3, pc, #240	@ (adr r3, 8006960 <__ieee754_pow+0x760>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	4658      	mov	r0, fp
 8006876:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800687a:	460d      	mov	r5, r1
 800687c:	f7f9 febc 	bl	80005f8 <__aeabi_dmul>
 8006880:	465c      	mov	r4, fp
 8006882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fcf5 	bl	8000288 <__aeabi_dsub>
 800689e:	a332      	add	r3, pc, #200	@ (adr r3, 8006968 <__ieee754_pow+0x768>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fea8 	bl	80005f8 <__aeabi_dmul>
 80068a8:	a331      	add	r3, pc, #196	@ (adr r3, 8006970 <__ieee754_pow+0x770>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7f9 fe9f 	bl	80005f8 <__aeabi_dmul>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4630      	mov	r0, r6
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7f9 fce3 	bl	800028c <__adddf3>
 80068c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068c8:	4b32      	ldr	r3, [pc, #200]	@ (8006994 <__ieee754_pow+0x794>)
 80068ca:	4413      	add	r3, r2
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fcdc 	bl	800028c <__adddf3>
 80068d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068da:	f7f9 fe23 	bl	8000524 <__aeabi_i2d>
 80068de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <__ieee754_pow+0x798>)
 80068e2:	4413      	add	r3, r2
 80068e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068e8:	4606      	mov	r6, r0
 80068ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ee:	460f      	mov	r7, r1
 80068f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068f4:	f7f9 fcca 	bl	800028c <__adddf3>
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	f7f9 fcc6 	bl	800028c <__adddf3>
 8006900:	4632      	mov	r2, r6
 8006902:	463b      	mov	r3, r7
 8006904:	f7f9 fcc2 	bl	800028c <__adddf3>
 8006908:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4658      	mov	r0, fp
 8006912:	460d      	mov	r5, r1
 8006914:	f7f9 fcb8 	bl	8000288 <__aeabi_dsub>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	f7f9 fcb4 	bl	8000288 <__aeabi_dsub>
 8006920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	465c      	mov	r4, fp
 800692a:	4602      	mov	r2, r0
 800692c:	e036      	b.n	800699c <__ieee754_pow+0x79c>
 800692e:	bf00      	nop
 8006930:	4a454eef 	.word	0x4a454eef
 8006934:	3fca7e28 	.word	0x3fca7e28
 8006938:	93c9db65 	.word	0x93c9db65
 800693c:	3fcd864a 	.word	0x3fcd864a
 8006940:	a91d4101 	.word	0xa91d4101
 8006944:	3fd17460 	.word	0x3fd17460
 8006948:	518f264d 	.word	0x518f264d
 800694c:	3fd55555 	.word	0x3fd55555
 8006950:	db6fabff 	.word	0xdb6fabff
 8006954:	3fdb6db6 	.word	0x3fdb6db6
 8006958:	33333303 	.word	0x33333303
 800695c:	3fe33333 	.word	0x3fe33333
 8006960:	e0000000 	.word	0xe0000000
 8006964:	3feec709 	.word	0x3feec709
 8006968:	dc3a03fd 	.word	0xdc3a03fd
 800696c:	3feec709 	.word	0x3feec709
 8006970:	145b01f5 	.word	0x145b01f5
 8006974:	be3e2fe0 	.word	0xbe3e2fe0
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	43400000 	.word	0x43400000
 8006980:	0003988e 	.word	0x0003988e
 8006984:	000bb679 	.word	0x000bb679
 8006988:	08007db8 	.word	0x08007db8
 800698c:	3ff00000 	.word	0x3ff00000
 8006990:	40080000 	.word	0x40080000
 8006994:	08007d98 	.word	0x08007d98
 8006998:	08007da8 	.word	0x08007da8
 800699c:	460b      	mov	r3, r1
 800699e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a2:	e5d7      	b.n	8006554 <__ieee754_pow+0x354>
 80069a4:	f04f 0a01 	mov.w	sl, #1
 80069a8:	e65e      	b.n	8006668 <__ieee754_pow+0x468>
 80069aa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006c7c <__ieee754_pow+0xa7c>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7f9 fc6a 	bl	800028c <__adddf3>
 80069b8:	4642      	mov	r2, r8
 80069ba:	e9cd 0100 	strd	r0, r1, [sp]
 80069be:	464b      	mov	r3, r9
 80069c0:	4620      	mov	r0, r4
 80069c2:	4629      	mov	r1, r5
 80069c4:	f7f9 fc60 	bl	8000288 <__aeabi_dsub>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069d0:	f7fa f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f47f ae00 	bne.w	80065da <__ieee754_pow+0x3da>
 80069da:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80069de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80069e2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80069e6:	fa43 fa0a 	asr.w	sl, r3, sl
 80069ea:	44da      	add	sl, fp
 80069ec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80069f0:	489d      	ldr	r0, [pc, #628]	@ (8006c68 <__ieee754_pow+0xa68>)
 80069f2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80069f6:	4108      	asrs	r0, r1
 80069f8:	ea00 030a 	and.w	r3, r0, sl
 80069fc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006a00:	f1c1 0114 	rsb	r1, r1, #20
 8006a04:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006a08:	fa4a fa01 	asr.w	sl, sl, r1
 8006a0c:	f1bb 0f00 	cmp.w	fp, #0
 8006a10:	4640      	mov	r0, r8
 8006a12:	4649      	mov	r1, r9
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	bfb8      	it	lt
 8006a1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	4680      	mov	r8, r0
 8006a24:	4689      	mov	r9, r1
 8006a26:	4632      	mov	r2, r6
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc2d 	bl	800028c <__adddf3>
 8006a32:	2400      	movs	r4, #0
 8006a34:	a37c      	add	r3, pc, #496	@ (adr r3, 8006c28 <__ieee754_pow+0xa28>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	4642      	mov	r2, r8
 8006a44:	e9cd 0100 	strd	r0, r1, [sp]
 8006a48:	464b      	mov	r3, r9
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fc1b 	bl	8000288 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4630      	mov	r0, r6
 8006a58:	4639      	mov	r1, r7
 8006a5a:	f7f9 fc15 	bl	8000288 <__aeabi_dsub>
 8006a5e:	a374      	add	r3, pc, #464	@ (adr r3, 8006c30 <__ieee754_pow+0xa30>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	a373      	add	r3, pc, #460	@ (adr r3, 8006c38 <__ieee754_pow+0xa38>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	4680      	mov	r8, r0
 8006a70:	4689      	mov	r9, r1
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7f9 fdbf 	bl	80005f8 <__aeabi_dmul>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4649      	mov	r1, r9
 8006a82:	f7f9 fc03 	bl	800028c <__adddf3>
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a92:	f7f9 fbfb 	bl	800028c <__adddf3>
 8006a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	4689      	mov	r9, r1
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7f9 fbed 	bl	8000288 <__aeabi_dsub>
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	4649      	mov	r1, r9
 8006aba:	f7f9 fd9d 	bl	80005f8 <__aeabi_dmul>
 8006abe:	a360      	add	r3, pc, #384	@ (adr r3, 8006c40 <__ieee754_pow+0xa40>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	f7f9 fd96 	bl	80005f8 <__aeabi_dmul>
 8006acc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006c48 <__ieee754_pow+0xa48>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fbd9 	bl	8000288 <__aeabi_dsub>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	f7f9 fd8d 	bl	80005f8 <__aeabi_dmul>
 8006ade:	a35c      	add	r3, pc, #368	@ (adr r3, 8006c50 <__ieee754_pow+0xa50>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fbd2 	bl	800028c <__adddf3>
 8006ae8:	4622      	mov	r2, r4
 8006aea:	462b      	mov	r3, r5
 8006aec:	f7f9 fd84 	bl	80005f8 <__aeabi_dmul>
 8006af0:	a359      	add	r3, pc, #356	@ (adr r3, 8006c58 <__ieee754_pow+0xa58>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fbc7 	bl	8000288 <__aeabi_dsub>
 8006afa:	4622      	mov	r2, r4
 8006afc:	462b      	mov	r3, r5
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	a357      	add	r3, pc, #348	@ (adr r3, 8006c60 <__ieee754_pow+0xa60>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fbc0 	bl	800028c <__adddf3>
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	462b      	mov	r3, r5
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	2200      	movs	r2, #0
 8006b32:	e9cd 0100 	strd	r0, r1, [sp]
 8006b36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b4a:	f7f9 fe7f 	bl	800084c <__aeabi_ddiv>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	4604      	mov	r4, r0
 8006b52:	460d      	mov	r5, r1
 8006b54:	463b      	mov	r3, r7
 8006b56:	4640      	mov	r0, r8
 8006b58:	4649      	mov	r1, r9
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	4632      	mov	r2, r6
 8006b60:	463b      	mov	r3, r7
 8006b62:	f7f9 fb93 	bl	800028c <__adddf3>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	4642      	mov	r2, r8
 8006b74:	464b      	mov	r3, r9
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	493b      	ldr	r1, [pc, #236]	@ (8006c6c <__ieee754_pow+0xa6c>)
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7f9 fb81 	bl	8000288 <__aeabi_dsub>
 8006b86:	ec41 0b10 	vmov	d0, r0, r1
 8006b8a:	ee10 3a90 	vmov	r3, s1
 8006b8e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b96:	da30      	bge.n	8006bfa <__ieee754_pow+0x9fa>
 8006b98:	4650      	mov	r0, sl
 8006b9a:	f000 f87d 	bl	8006c98 <scalbn>
 8006b9e:	ec51 0b10 	vmov	r0, r1, d0
 8006ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba6:	f7ff bbd2 	b.w	800634e <__ieee754_pow+0x14e>
 8006baa:	4c31      	ldr	r4, [pc, #196]	@ (8006c70 <__ieee754_pow+0xa70>)
 8006bac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d91a      	bls.n	8006bea <__ieee754_pow+0x9ea>
 8006bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8006c74 <__ieee754_pow+0xa74>)
 8006bb6:	440b      	add	r3, r1
 8006bb8:	4303      	orrs	r3, r0
 8006bba:	d009      	beq.n	8006bd0 <__ieee754_pow+0x9d0>
 8006bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7f9 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8006bc8:	3800      	subs	r0, #0
 8006bca:	bf18      	it	ne
 8006bcc:	2001      	movne	r0, #1
 8006bce:	e42b      	b.n	8006428 <__ieee754_pow+0x228>
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f7f9 fb58 	bl	8000288 <__aeabi_dsub>
 8006bd8:	4632      	mov	r2, r6
 8006bda:	463b      	mov	r3, r7
 8006bdc:	f7f9 ff92 	bl	8000b04 <__aeabi_dcmpge>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1eb      	bne.n	8006bbc <__ieee754_pow+0x9bc>
 8006be4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8006c84 <__ieee754_pow+0xa84>
 8006be8:	e6f7      	b.n	80069da <__ieee754_pow+0x7da>
 8006bea:	469a      	mov	sl, r3
 8006bec:	4b22      	ldr	r3, [pc, #136]	@ (8006c78 <__ieee754_pow+0xa78>)
 8006bee:	459a      	cmp	sl, r3
 8006bf0:	f63f aef3 	bhi.w	80069da <__ieee754_pow+0x7da>
 8006bf4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006bf8:	e715      	b.n	8006a26 <__ieee754_pow+0x826>
 8006bfa:	ec51 0b10 	vmov	r0, r1, d0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	e7cf      	b.n	8006ba2 <__ieee754_pow+0x9a2>
 8006c02:	491a      	ldr	r1, [pc, #104]	@ (8006c6c <__ieee754_pow+0xa6c>)
 8006c04:	2000      	movs	r0, #0
 8006c06:	f7ff bb18 	b.w	800623a <__ieee754_pow+0x3a>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f7ff bb14 	b.w	800623a <__ieee754_pow+0x3a>
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7ff bb10 	b.w	800623a <__ieee754_pow+0x3a>
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	f7ff bb5e 	b.w	80062dc <__ieee754_pow+0xdc>
 8006c20:	2400      	movs	r4, #0
 8006c22:	f7ff bb49 	b.w	80062b8 <__ieee754_pow+0xb8>
 8006c26:	bf00      	nop
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	3fe62e43 	.word	0x3fe62e43
 8006c30:	fefa39ef 	.word	0xfefa39ef
 8006c34:	3fe62e42 	.word	0x3fe62e42
 8006c38:	0ca86c39 	.word	0x0ca86c39
 8006c3c:	be205c61 	.word	0xbe205c61
 8006c40:	72bea4d0 	.word	0x72bea4d0
 8006c44:	3e663769 	.word	0x3e663769
 8006c48:	c5d26bf1 	.word	0xc5d26bf1
 8006c4c:	3ebbbd41 	.word	0x3ebbbd41
 8006c50:	af25de2c 	.word	0xaf25de2c
 8006c54:	3f11566a 	.word	0x3f11566a
 8006c58:	16bebd93 	.word	0x16bebd93
 8006c5c:	3f66c16c 	.word	0x3f66c16c
 8006c60:	5555553e 	.word	0x5555553e
 8006c64:	3fc55555 	.word	0x3fc55555
 8006c68:	fff00000 	.word	0xfff00000
 8006c6c:	3ff00000 	.word	0x3ff00000
 8006c70:	4090cbff 	.word	0x4090cbff
 8006c74:	3f6f3400 	.word	0x3f6f3400
 8006c78:	3fe00000 	.word	0x3fe00000
 8006c7c:	652b82fe 	.word	0x652b82fe
 8006c80:	3c971547 	.word	0x3c971547
 8006c84:	4090cc00 	.word	0x4090cc00

08006c88 <fabs>:
 8006c88:	ec51 0b10 	vmov	r0, r1, d0
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c92:	ec43 2b10 	vmov	d0, r2, r3
 8006c96:	4770      	bx	lr

08006c98 <scalbn>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	ec55 4b10 	vmov	r4, r5, d0
 8006c9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	b991      	cbnz	r1, 8006cce <scalbn+0x36>
 8006ca8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006cac:	4323      	orrs	r3, r4
 8006cae:	d03d      	beq.n	8006d2c <scalbn+0x94>
 8006cb0:	4b35      	ldr	r3, [pc, #212]	@ (8006d88 <scalbn+0xf0>)
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	4b33      	ldr	r3, [pc, #204]	@ (8006d8c <scalbn+0xf4>)
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	da0f      	bge.n	8006ce6 <scalbn+0x4e>
 8006cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8006d68 <scalbn+0xd0>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e01e      	b.n	8006d0c <scalbn+0x74>
 8006cce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d10b      	bne.n	8006cee <scalbn+0x56>
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fad6 	bl	800028c <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	e022      	b.n	8006d2c <scalbn+0x94>
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006cec:	3936      	subs	r1, #54	@ 0x36
 8006cee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006cf2:	4296      	cmp	r6, r2
 8006cf4:	dd0d      	ble.n	8006d12 <scalbn+0x7a>
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006d70 <scalbn+0xd8>)
 8006cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cfe:	da02      	bge.n	8006d06 <scalbn+0x6e>
 8006d00:	a11d      	add	r1, pc, #116	@ (adr r1, 8006d78 <scalbn+0xe0>)
 8006d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d06:	a31a      	add	r3, pc, #104	@ (adr r3, 8006d70 <scalbn+0xd8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	e7e6      	b.n	8006ce0 <scalbn+0x48>
 8006d12:	1872      	adds	r2, r6, r1
 8006d14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	dcec      	bgt.n	8006cf6 <scalbn+0x5e>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	dd08      	ble.n	8006d32 <scalbn+0x9a>
 8006d20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006d24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006d28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d2c:	ec45 4b10 	vmov	d0, r4, r5
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
 8006d32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006d36:	da08      	bge.n	8006d4a <scalbn+0xb2>
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006d68 <scalbn+0xd0>)
 8006d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d40:	dac1      	bge.n	8006cc6 <scalbn+0x2e>
 8006d42:	a10f      	add	r1, pc, #60	@ (adr r1, 8006d80 <scalbn+0xe8>)
 8006d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d48:	e7bd      	b.n	8006cc6 <scalbn+0x2e>
 8006d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006d4e:	3236      	adds	r2, #54	@ 0x36
 8006d50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006d54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <scalbn+0xf8>)
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	2200      	movs	r2, #0
 8006d60:	e7d4      	b.n	8006d0c <scalbn+0x74>
 8006d62:	bf00      	nop
 8006d64:	f3af 8000 	nop.w
 8006d68:	c2f8f359 	.word	0xc2f8f359
 8006d6c:	01a56e1f 	.word	0x01a56e1f
 8006d70:	8800759c 	.word	0x8800759c
 8006d74:	7e37e43c 	.word	0x7e37e43c
 8006d78:	8800759c 	.word	0x8800759c
 8006d7c:	fe37e43c 	.word	0xfe37e43c
 8006d80:	c2f8f359 	.word	0xc2f8f359
 8006d84:	81a56e1f 	.word	0x81a56e1f
 8006d88:	43500000 	.word	0x43500000
 8006d8c:	ffff3cb0 	.word	0xffff3cb0
 8006d90:	3c900000 	.word	0x3c900000

08006d94 <with_errno>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	ed2d 8b02 	vpush	{d8}
 8006d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d9e:	eef0 8a60 	vmov.f32	s17, s1
 8006da2:	4604      	mov	r4, r0
 8006da4:	f7fe fd38 	bl	8005818 <__errno>
 8006da8:	eeb0 0a48 	vmov.f32	s0, s16
 8006dac:	eef0 0a68 	vmov.f32	s1, s17
 8006db0:	ecbd 8b02 	vpop	{d8}
 8006db4:	6004      	str	r4, [r0, #0]
 8006db6:	bd10      	pop	{r4, pc}

08006db8 <xflow>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	b507      	push	{r0, r1, r2, lr}
 8006dbc:	ec51 0b10 	vmov	r0, r1, d0
 8006dc0:	b183      	cbz	r3, 8006de4 <xflow+0x2c>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8006dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	ec41 0b10 	vmov	d0, r0, r1
 8006dd8:	2022      	movs	r0, #34	@ 0x22
 8006dda:	b003      	add	sp, #12
 8006ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de0:	f7ff bfd8 	b.w	8006d94 <with_errno>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	e7ee      	b.n	8006dc8 <xflow+0x10>
 8006dea:	0000      	movs	r0, r0
 8006dec:	0000      	movs	r0, r0
	...

08006df0 <__math_uflow>:
 8006df0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006df8 <__math_uflow+0x8>
 8006df4:	f7ff bfe0 	b.w	8006db8 <xflow>
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	10000000 	.word	0x10000000

08006e00 <__math_oflow>:
 8006e00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006e08 <__math_oflow+0x8>
 8006e04:	f7ff bfd8 	b.w	8006db8 <xflow>
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	70000000 	.word	0x70000000

08006e10 <__ieee754_sqrt>:
 8006e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	4a68      	ldr	r2, [pc, #416]	@ (8006fb8 <__ieee754_sqrt+0x1a8>)
 8006e16:	ec55 4b10 	vmov	r4, r5, d0
 8006e1a:	43aa      	bics	r2, r5
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	4621      	mov	r1, r4
 8006e20:	d110      	bne.n	8006e44 <__ieee754_sqrt+0x34>
 8006e22:	4622      	mov	r2, r4
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4620      	mov	r0, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	f7f9 fa2a 	bl	800028c <__adddf3>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	ec45 4b10 	vmov	d0, r4, r5
 8006e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	dc0e      	bgt.n	8006e66 <__ieee754_sqrt+0x56>
 8006e48:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006e4c:	4322      	orrs	r2, r4
 8006e4e:	d0f5      	beq.n	8006e3c <__ieee754_sqrt+0x2c>
 8006e50:	b19d      	cbz	r5, 8006e7a <__ieee754_sqrt+0x6a>
 8006e52:	4622      	mov	r2, r4
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fa16 	bl	8000288 <__aeabi_dsub>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	f7f9 fcf4 	bl	800084c <__aeabi_ddiv>
 8006e64:	e7e8      	b.n	8006e38 <__ieee754_sqrt+0x28>
 8006e66:	152a      	asrs	r2, r5, #20
 8006e68:	d115      	bne.n	8006e96 <__ieee754_sqrt+0x86>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e009      	b.n	8006e82 <__ieee754_sqrt+0x72>
 8006e6e:	0acb      	lsrs	r3, r1, #11
 8006e70:	3a15      	subs	r2, #21
 8006e72:	0549      	lsls	r1, r1, #21
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0fa      	beq.n	8006e6e <__ieee754_sqrt+0x5e>
 8006e78:	e7f7      	b.n	8006e6a <__ieee754_sqrt+0x5a>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	e7fa      	b.n	8006e74 <__ieee754_sqrt+0x64>
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	3001      	adds	r0, #1
 8006e82:	02dc      	lsls	r4, r3, #11
 8006e84:	d5fb      	bpl.n	8006e7e <__ieee754_sqrt+0x6e>
 8006e86:	1e44      	subs	r4, r0, #1
 8006e88:	1b12      	subs	r2, r2, r4
 8006e8a:	f1c0 0420 	rsb	r4, r0, #32
 8006e8e:	fa21 f404 	lsr.w	r4, r1, r4
 8006e92:	4323      	orrs	r3, r4
 8006e94:	4081      	lsls	r1, r0
 8006e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e9a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ea2:	07d2      	lsls	r2, r2, #31
 8006ea4:	bf5c      	itt	pl
 8006ea6:	005b      	lslpl	r3, r3, #1
 8006ea8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006eac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006eb0:	bf58      	it	pl
 8006eb2:	0049      	lslpl	r1, r1, #1
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006eba:	106d      	asrs	r5, r5, #1
 8006ebc:	0049      	lsls	r1, r1, #1
 8006ebe:	2016      	movs	r0, #22
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006ec6:	1917      	adds	r7, r2, r4
 8006ec8:	429f      	cmp	r7, r3
 8006eca:	bfde      	ittt	le
 8006ecc:	193a      	addle	r2, r7, r4
 8006ece:	1bdb      	suble	r3, r3, r7
 8006ed0:	1936      	addle	r6, r6, r4
 8006ed2:	0fcf      	lsrs	r7, r1, #31
 8006ed4:	3801      	subs	r0, #1
 8006ed6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006eda:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ede:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006ee2:	d1f0      	bne.n	8006ec6 <__ieee754_sqrt+0xb6>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	2720      	movs	r7, #32
 8006ee8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006eec:	429a      	cmp	r2, r3
 8006eee:	eb00 0e0c 	add.w	lr, r0, ip
 8006ef2:	db02      	blt.n	8006efa <__ieee754_sqrt+0xea>
 8006ef4:	d113      	bne.n	8006f1e <__ieee754_sqrt+0x10e>
 8006ef6:	458e      	cmp	lr, r1
 8006ef8:	d811      	bhi.n	8006f1e <__ieee754_sqrt+0x10e>
 8006efa:	f1be 0f00 	cmp.w	lr, #0
 8006efe:	eb0e 000c 	add.w	r0, lr, ip
 8006f02:	da42      	bge.n	8006f8a <__ieee754_sqrt+0x17a>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	db40      	blt.n	8006f8a <__ieee754_sqrt+0x17a>
 8006f08:	f102 0801 	add.w	r8, r2, #1
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	458e      	cmp	lr, r1
 8006f10:	bf88      	it	hi
 8006f12:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8006f16:	eba1 010e 	sub.w	r1, r1, lr
 8006f1a:	4464      	add	r4, ip
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006f22:	3f01      	subs	r7, #1
 8006f24:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006f28:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006f30:	d1dc      	bne.n	8006eec <__ieee754_sqrt+0xdc>
 8006f32:	4319      	orrs	r1, r3
 8006f34:	d01b      	beq.n	8006f6e <__ieee754_sqrt+0x15e>
 8006f36:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006fbc <__ieee754_sqrt+0x1ac>
 8006f3a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006fc0 <__ieee754_sqrt+0x1b0>
 8006f3e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006f42:	e9db 2300 	ldrd	r2, r3, [fp]
 8006f46:	f7f9 f99f 	bl	8000288 <__aeabi_dsub>
 8006f4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 fdcb 	bl	8000af0 <__aeabi_dcmple>
 8006f5a:	b140      	cbz	r0, 8006f6e <__ieee754_sqrt+0x15e>
 8006f5c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8006f60:	e9da 0100 	ldrd	r0, r1, [sl]
 8006f64:	e9db 2300 	ldrd	r2, r3, [fp]
 8006f68:	d111      	bne.n	8006f8e <__ieee754_sqrt+0x17e>
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	463c      	mov	r4, r7
 8006f6e:	1072      	asrs	r2, r6, #1
 8006f70:	0863      	lsrs	r3, r4, #1
 8006f72:	07f1      	lsls	r1, r6, #31
 8006f74:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006f78:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006f7c:	bf48      	it	mi
 8006f7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006f82:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006f86:	4618      	mov	r0, r3
 8006f88:	e756      	b.n	8006e38 <__ieee754_sqrt+0x28>
 8006f8a:	4690      	mov	r8, r2
 8006f8c:	e7be      	b.n	8006f0c <__ieee754_sqrt+0xfc>
 8006f8e:	f7f9 f97d 	bl	800028c <__adddf3>
 8006f92:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	f7f9 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8006fa2:	b120      	cbz	r0, 8006fae <__ieee754_sqrt+0x19e>
 8006fa4:	1ca0      	adds	r0, r4, #2
 8006fa6:	bf08      	it	eq
 8006fa8:	3601      	addeq	r6, #1
 8006faa:	3402      	adds	r4, #2
 8006fac:	e7df      	b.n	8006f6e <__ieee754_sqrt+0x15e>
 8006fae:	1c63      	adds	r3, r4, #1
 8006fb0:	f023 0401 	bic.w	r4, r3, #1
 8006fb4:	e7db      	b.n	8006f6e <__ieee754_sqrt+0x15e>
 8006fb6:	bf00      	nop
 8006fb8:	7ff00000 	.word	0x7ff00000
 8006fbc:	20000478 	.word	0x20000478
 8006fc0:	20000470 	.word	0x20000470

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
