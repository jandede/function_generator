
funcgenf411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004708  08004708  00005708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00006478  2**0
                  CONTENTS
  4 .ARM          00000008  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004758  08004758  00006478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800475c  0800475c  0000575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000478  20000000  08004760  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  20000478  08004bd8  00006478  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e64  08004bd8  00006e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006478  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3d5  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a87  00000000  00000000  0001287d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00014308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000946  00000000  00000000  00014ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001563b  00000000  00000000  00015816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c495  00000000  00000000  0002ae51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a697  00000000  00000000  000372e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c197d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000c19c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c51fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000478 	.word	0x20000478
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046ec 	.word	0x080046ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000047c 	.word	0x2000047c
 80001d4:	080046ec 	.word	0x080046ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f000 fd63 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f83f 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 f921 	bl	80010e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea2:	f000 f8f5 	bl	8001090 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ea6:	f000 f8a3 	bl	8000ff0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  calc_dac_values(); // do once on startup
 8000eaa:	f000 f9cd 	bl	8001248 <calc_dac_values>

  // LED?
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <main+0x7c>)
 8000eb2:	f001 f89a 	bl	8001fea <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(func_mode){
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <main+0x80>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d002      	beq.n	8000ec4 <main+0x34>
 8000ebe:	2b63      	cmp	r3, #99	@ 0x63
 8000ec0:	d006      	beq.n	8000ed0 <main+0x40>
 8000ec2:	e7f8      	b.n	8000eb6 <main+0x26>
	  case 1:
		  MODE_GENERATION = 1;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <main+0x84>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
		  sinefunc();
 8000eca:	f000 fbcf 	bl	800166c <sinefunc>
		  break;
 8000ece:	e01b      	b.n	8000f08 <main+0x78>
	  case 99:
		  for (int i = 0; i <256; i++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e014      	b.n	8000f00 <main+0x70>
			  dac_out(Vout_possible_values[i]);
 8000ed6:	4a10      	ldr	r2, [pc, #64]	@ (8000f18 <main+0x88>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000eea:	793b      	ldrb	r3, [r7, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fb20 	bl	8001534 <dac_out>
			  HAL_Delay(20);
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f000 fda5 	bl	8001a44 <HAL_Delay>
		  for (int i = 0; i <256; i++){
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2bff      	cmp	r3, #255	@ 0xff
 8000f04:	dde7      	ble.n	8000ed6 <main+0x46>
		  }
		  break;
 8000f06:	bf00      	nop
	  switch(func_mode){
 8000f08:	e7d5      	b.n	8000eb6 <main+0x26>
 8000f0a:	bf00      	nop
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	20000400 	.word	0x20000400
 8000f14:	20000924 	.word	0x20000924
 8000f18:	20000928 	.word	0x20000928

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	@ 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	@ 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fc4e 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <SystemClock_Config+0xd0>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f854 	bl	8002050 <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fae:	f000 fbb7 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fab6 	bl	8002540 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fda:	f000 fba1 	bl	8001720 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3750      	adds	r7, #80	@ 0x50
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_TIM1_Init+0x98>)
 800100e:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <MX_TIM1_Init+0x9c>)
 8001010:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001014:	2254      	movs	r2, #84	@ 0x54
 8001016:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_TIM1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001020:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001024:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_TIM1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	@ (8001088 <MX_TIM1_Init+0x98>)
 800103a:	f001 fca1 	bl	8002980 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001044:	f000 fb6c 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001056:	f001 fe64 	bl	8002d22 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001060:	f000 fb5e 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_TIM1_Init+0x98>)
 8001072:	f002 f865 	bl	8003140 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 fb50 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000494 	.word	0x20000494
 800108c:	40010000 	.word	0x40010000

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_USART2_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c8:	f002 f8bc 	bl	8003244 <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 fb25 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200004dc 	.word	0x200004dc
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <MX_GPIO_Init+0x150>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b46      	ldr	r3, [pc, #280]	@ (8001234 <MX_GPIO_Init+0x150>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a45      	ldr	r2, [pc, #276]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b3f      	ldr	r3, [pc, #252]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a3e      	ldr	r2, [pc, #248]	@ (8001234 <MX_GPIO_Init+0x150>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a37      	ldr	r2, [pc, #220]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b35      	ldr	r3, [pc, #212]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2103      	movs	r1, #3
 800116e:	4832      	ldr	r0, [pc, #200]	@ (8001238 <MX_GPIO_Init+0x154>)
 8001170:	f000 ff22 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800117a:	4830      	ldr	r0, [pc, #192]	@ (800123c <MX_GPIO_Init+0x158>)
 800117c:	f000 ff1c 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f240 4111 	movw	r1, #1041	@ 0x411
 8001186:	482e      	ldr	r0, [pc, #184]	@ (8001240 <MX_GPIO_Init+0x15c>)
 8001188:	f000 ff16 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001192:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4825      	ldr	r0, [pc, #148]	@ (8001238 <MX_GPIO_Init+0x154>)
 80011a4:	f000 fd84 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a8:	2303      	movs	r3, #3
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	481e      	ldr	r0, [pc, #120]	@ (8001238 <MX_GPIO_Init+0x154>)
 80011c0:	f000 fd76 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 80011c4:	f44f 7399 	mov.w	r3, #306	@ 0x132
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4817      	ldr	r0, [pc, #92]	@ (800123c <MX_GPIO_Init+0x158>)
 80011de:	f000 fd67 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 80011e2:	f240 4311 	movw	r3, #1041	@ 0x411
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4811      	ldr	r0, [pc, #68]	@ (8001240 <MX_GPIO_Init+0x15c>)
 80011fc:	f000 fd58 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001200:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001206:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <MX_GPIO_Init+0x154>)
 8001218:	f000 fd4a 	bl	8001cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2028      	movs	r0, #40	@ 0x28
 8001222:	f000 fd0e 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001226:	2028      	movs	r0, #40	@ 0x28
 8001228:	f000 fd27 	bl	8001c7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020800 	.word	0x40020800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	00000000 	.word	0x00000000

08001248 <calc_dac_values>:

/* USER CODE BEGIN 4 */

// Calculates this equation with every 8bit combination (Va-Vh)
// Vout = (1Va + 2Vb + 4Vc + 8Vd + 16Ve + 32Vf + 64Vg + 128Vh) / 256
void calc_dac_values(){
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	    int sum = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	    for (int i = 0; i < 256; i++){
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	e052      	b.n	80012fe <calc_dac_values+0xb6>
			sum = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
			for (int j = 0 ; j<=7; j++){
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	e033      	b.n	80012ca <calc_dac_values+0x82>
				sum += ((i>>j)&1) * pow(2,j);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	fa42 f303 	asr.w	r3, r2, r3
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f904 	bl	800047c <__aeabi_i2d>
 8001274:	4604      	mov	r4, r0
 8001276:	460d      	mov	r5, r1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff f8ff 	bl	800047c <__aeabi_i2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	ec43 2b11 	vmov	d1, r2, r3
 8001286:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8001310 <calc_dac_values+0xc8>
 800128a:	f002 fad1 	bl	8003830 <pow>
 800128e:	ec53 2b10 	vmov	r2, r3, d0
 8001292:	4620      	mov	r0, r4
 8001294:	4629      	mov	r1, r5
 8001296:	f7ff f95b 	bl	8000550 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4614      	mov	r4, r2
 80012a0:	461d      	mov	r5, r3
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff f8ea 	bl	800047c <__aeabi_i2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7fe ff98 	bl	80001e4 <__adddf3>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fbf8 	bl	8000ab0 <__aeabi_d2iz>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60fb      	str	r3, [r7, #12]
			for (int j = 0 ; j<=7; j++){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	ddc8      	ble.n	8001262 <calc_dac_values+0x1a>
			}
		Vout_possible_values[i] = (sum/256.0);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff f8d3 	bl	800047c <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <calc_dac_values+0xd0>)
 80012dc:	f7ff fa62 	bl	80007a4 <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc0a 	bl	8000b00 <__aeabi_d2f>
 80012ec:	4602      	mov	r2, r0
 80012ee:	490b      	ldr	r1, [pc, #44]	@ (800131c <calc_dac_values+0xd4>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < 256; i++){
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3301      	adds	r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	dda9      	ble.n	8001258 <calc_dac_values+0x10>
	    }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	00000000 	.word	0x00000000
 8001314:	40000000 	.word	0x40000000
 8001318:	40700000 	.word	0x40700000
 800131c:	20000928 	.word	0x20000928

08001320 <calc_sin_steps>:

// Run once initially for optimization
// When a full sine period is divided into 1024 time steps, calculate each timestep voltage index (out of Vout_possible_values)
void calc_sin_steps(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
	int index = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i<1024; i++){
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	e0d9      	b.n	80014e4 <calc_sin_steps+0x1c4>
		index = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
		float fraction_of_period = (i*1.0)/1023.0;
 8001334:	68b8      	ldr	r0, [r7, #8]
 8001336:	f7ff f8a1 	bl	800047c <__aeabi_i2d>
 800133a:	a37c      	add	r3, pc, #496	@ (adr r3, 800152c <calc_sin_steps+0x20c>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa30 	bl	80007a4 <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fbd8 	bl	8000b00 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	603b      	str	r3, [r7, #0]
		// first ¼ ´ 	sinlookup[128:-1]
		// second ¼ ` 	sinlookup[-1:128]
		// third ¼ ` 	sinlookup [128:0]
		// fourth ¼ ´ 	sinlookup[0:128]
		if (fraction_of_period < 1.0/4.0){
 8001354:	edd7 7a00 	vldr	s15, [r7]
 8001358:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800135c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d50f      	bpl.n	8001386 <calc_sin_steps+0x66>
			index = 127 + (255*2 * fraction_of_period);
 8001366:	edd7 7a00 	vldr	s15, [r7]
 800136a:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001508 <calc_sin_steps+0x1e8>
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800150c <calc_sin_steps+0x1ec>
 8001376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800137a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137e:	ee17 3a90 	vmov	r3, s15
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e06e      	b.n	8001464 <calc_sin_steps+0x144>
			//index = 0;
		} else if(fraction_of_period <= 2.0/4.0){
 8001386:	edd7 7a00 	vldr	s15, [r7]
 800138a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d820      	bhi.n	80013da <calc_sin_steps+0xba>
			index = 255 - (255*2 * (fraction_of_period-0.25));
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f7ff f881 	bl	80004a0 <__aeabi_f2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <calc_sin_steps+0x1f0>)
 80013a4:	f7fe ff1c 	bl	80001e0 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	a351      	add	r3, pc, #324	@ (adr r3, 80014f8 <calc_sin_steps+0x1d8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f8cb 	bl	8000550 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	a150      	add	r1, pc, #320	@ (adr r1, 8001500 <calc_sin_steps+0x1e0>)
 80013c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013c4:	f7fe ff0c 	bl	80001e0 <__aeabi_dsub>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb6e 	bl	8000ab0 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e044      	b.n	8001464 <calc_sin_steps+0x144>
			//index = 0;
		} else if(fraction_of_period <= 3.0/4.0){
 80013da:	edd7 7a00 	vldr	s15, [r7]
 80013de:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d821      	bhi.n	8001430 <calc_sin_steps+0x110>
			index = 128 - (255*2 * (fraction_of_period-0.5));
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f7ff f857 	bl	80004a0 <__aeabi_f2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <calc_sin_steps+0x1f4>)
 80013f8:	f7fe fef2 	bl	80001e0 <__aeabi_dsub>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	a33c      	add	r3, pc, #240	@ (adr r3, 80014f8 <calc_sin_steps+0x1d8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f8a1 	bl	8000550 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	4940      	ldr	r1, [pc, #256]	@ (8001518 <calc_sin_steps+0x1f8>)
 8001418:	f7fe fee2 	bl	80001e0 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb44 	bl	8000ab0 <__aeabi_d2iz>
 8001428:	4603      	mov	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]
			asm("nop");
 800142c:	bf00      	nop
 800142e:	e019      	b.n	8001464 <calc_sin_steps+0x144>
		} else {
			index = (255*2 * (fraction_of_period-0.75));
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f7ff f835 	bl	80004a0 <__aeabi_f2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <calc_sin_steps+0x1fc>)
 800143c:	f7fe fed0 	bl	80001e0 <__aeabi_dsub>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	a32b      	add	r3, pc, #172	@ (adr r3, 80014f8 <calc_sin_steps+0x1d8>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f87f 	bl	8000550 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb29 	bl	8000ab0 <__aeabi_d2iz>
 800145e:	4603      	mov	r3, r0
 8001460:	60fb      	str	r3, [r7, #12]
			//index = 0;
			asm("nop");
 8001462:	bf00      	nop
		}
		for (int j = 0; j<=255; j++){
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	e036      	b.n	80014d8 <calc_sin_steps+0x1b8>
			if (j==255){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2bff      	cmp	r3, #255	@ 0xff
 800146e:	d105      	bne.n	800147c <calc_sin_steps+0x15c>
				sin_voltage_steps[i] = 255;
 8001470:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <calc_sin_steps+0x200>)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	4413      	add	r3, r2
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	701a      	strb	r2, [r3, #0]
				break;
 800147a:	e030      	b.n	80014de <calc_sin_steps+0x1be>
			}
			else if (Vout_possible_values[j] < sinlookup[index] && Vout_possible_values[j+1] > sinlookup[index]){
 800147c:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <calc_sin_steps+0x204>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <calc_sin_steps+0x208>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	d519      	bpl.n	80014d2 <calc_sin_steps+0x1b2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a20      	ldr	r2, [pc, #128]	@ (8001524 <calc_sin_steps+0x204>)
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <calc_sin_steps+0x208>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	dd07      	ble.n	80014d2 <calc_sin_steps+0x1b2>
				sin_voltage_steps[i] = j;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b2d9      	uxtb	r1, r3
 80014c6:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <calc_sin_steps+0x200>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4413      	add	r3, r2
 80014cc:	460a      	mov	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
				break;
 80014d0:	e005      	b.n	80014de <calc_sin_steps+0x1be>
		for (int j = 0; j<=255; j++){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	ddc5      	ble.n	800146a <calc_sin_steps+0x14a>
	for (int i = 0; i<1024; i++){
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ea:	f6ff af21 	blt.w	8001330 <calc_sin_steps+0x10>
			}
		}
	}
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	00000000 	.word	0x00000000
 80014fc:	407fe000 	.word	0x407fe000
 8001500:	00000000 	.word	0x00000000
 8001504:	406fe000 	.word	0x406fe000
 8001508:	43ff0000 	.word	0x43ff0000
 800150c:	42fe0000 	.word	0x42fe0000
 8001510:	3fd00000 	.word	0x3fd00000
 8001514:	3fe00000 	.word	0x3fe00000
 8001518:	40600000 	.word	0x40600000
 800151c:	3fe80000 	.word	0x3fe80000
 8001520:	20000524 	.word	0x20000524
 8001524:	20000928 	.word	0x20000928
 8001528:	20000000 	.word	0x20000000
 800152c:	00000000 	.word	0x00000000
 8001530:	408ff800 	.word	0x408ff800

08001534 <dac_out>:

// Sends parallel 8bit "digital out" to respective gpio pins
// input argument is precalculated 8bit value that matches with target voltage value
void dac_out(uint8_t val){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, val & (1<<0));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154c:	4823      	ldr	r0, [pc, #140]	@ (80015dc <dac_out+0xa8>)
 800154e:	f000 fd33 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, val & (1<<1));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001560:	481f      	ldr	r0, [pc, #124]	@ (80015e0 <dac_out+0xac>)
 8001562:	f000 fd29 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, val & (1<<2));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2110      	movs	r1, #16
 8001572:	481b      	ldr	r0, [pc, #108]	@ (80015e0 <dac_out+0xac>)
 8001574:	f000 fd20 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, val & (1<<3));
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	2102      	movs	r1, #2
 8001584:	4815      	ldr	r0, [pc, #84]	@ (80015dc <dac_out+0xa8>)
 8001586:	f000 fd17 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, val & (1<<4));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	2110      	movs	r1, #16
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <dac_out+0xa8>)
 8001598:	f000 fd0e 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, val & (1<<5));
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	2101      	movs	r1, #1
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <dac_out+0xac>)
 80015aa:	f000 fd05 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, val & (1<<6));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	2102      	movs	r1, #2
 80015ba:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <dac_out+0xb0>)
 80015bc:	f000 fcfc 	bl	8001fb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, val & (1<<7));
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	2101      	movs	r1, #1
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <dac_out+0xb0>)
 80015ce:	f000 fcf3 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800

080015e8 <prescale_timer>:
//uint8_t _sin(int f, float t_relative){
//	return sin_voltage_steps[t_relative];
//}

// Divide timer so that it only ticks 1024 times every 1/f
void prescale_timer(int16_t sinfreq){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
	float prescaler = (CPU_FREQ*1.0) / (1024.0*sinfreq);
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff40 	bl	800047c <__aeabi_i2d>
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <prescale_timer+0x78>)
 8001602:	f7fe ffa5 	bl	8000550 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	a113      	add	r1, pc, #76	@ (adr r1, 8001658 <prescale_timer+0x70>)
 800160c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001610:	f7ff f8c8 	bl	80007a4 <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff fa70 	bl	8000b00 <__aeabi_d2f>
 8001620:	4603      	mov	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
	// ~0.13 Hz or less..
	if (prescaler >= 65535){
 8001624:	edd7 7a03 	vldr	s15, [r7, #12]
 8001628:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001664 <prescale_timer+0x7c>
 800162c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	db00      	blt.n	8001638 <prescale_timer+0x50>
		asm("nop");
 8001636:	bf00      	nop
	}
	htim1.Instance->PSC = prescaler;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <prescale_timer+0x80>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001644:	ee17 2a90 	vmov	r2, s15
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	00000000 	.word	0x00000000
 800165c:	419406f4 	.word	0x419406f4
 8001660:	40900000 	.word	0x40900000
 8001664:	477fff00 	.word	0x477fff00
 8001668:	20000494 	.word	0x20000494

0800166c <sinefunc>:

// Main loop when SINE is selected as tool mode
void sinefunc(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	calc_sin_steps();
 8001670:	f7ff fe56 	bl	8001320 <calc_sin_steps>
	prescale_timer(f);
 8001674:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <sinefunc+0x44>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	b21b      	sxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ffaf 	bl	80015e8 <prescale_timer>
	HAL_TIM_Base_Start_IT(&htim1);
 800168a:	480a      	ldr	r0, [pc, #40]	@ (80016b4 <sinefunc+0x48>)
 800168c:	f001 f9c8 	bl	8002a20 <HAL_TIM_Base_Start_IT>
	while(MODE_GENERATION){
 8001690:	e007      	b.n	80016a2 <sinefunc+0x36>
	dac_out(sin_voltage_steps[htim1.Instance->CNT]);
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <sinefunc+0x48>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <sinefunc+0x4c>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff49 	bl	8001534 <dac_out>
	while(MODE_GENERATION){
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <sinefunc+0x50>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f3      	bne.n	8001692 <sinefunc+0x26>
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000404 	.word	0x20000404
 80016b4:	20000494 	.word	0x20000494
 80016b8:	20000524 	.word	0x20000524
 80016bc:	20000924 	.word	0x20000924

080016c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_11)
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016d0:	d10f      	bne.n	80016f2 <HAL_GPIO_EXTI_Callback+0x32>
    {
    	HAL_TIM_Base_Stop_IT(&htim1);
 80016d2:	480a      	ldr	r0, [pc, #40]	@ (80016fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80016d4:	f001 fa06 	bl	8002ae4 <HAL_TIM_Base_Stop_IT>
    	MODE_GENERATION = 0;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_GPIO_EXTI_Callback+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    	f += 100;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_GPIO_EXTI_Callback+0x44>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001708 <HAL_GPIO_EXTI_Callback+0x48>
 80016e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_GPIO_EXTI_Callback+0x44>)
 80016ee:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000494 	.word	0x20000494
 8001700:	20000924 	.word	0x20000924
 8001704:	20000404 	.word	0x20000404
 8001708:	42c80000 	.word	0x42c80000

0800170c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176a:	2007      	movs	r0, #7
 800176c:	f000 fa5e 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d115      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_TIM_Base_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201b      	movs	r0, #27
 80017b0:	f000 fa47 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017b4:	201b      	movs	r0, #27
 80017b6:	f000 fa60 	bl	8001c7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_UART_MspInit+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12b      	bne.n	8001846 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_UART_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_UART_MspInit+0x88>)
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001826:	230c      	movs	r3, #12
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001836:	2307      	movs	r3, #7
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <HAL_UART_MspInit+0x8c>)
 8001842:	f000 fa35 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40004400 	.word	0x40004400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f8a7 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM1_CC_IRQHandler+0x10>)
 80018c2:	f001 f93e 	bl	8002b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000494 	.word	0x20000494

080018d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80018d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80018d8:	f000 fba2 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018e0:	f000 fb9e 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001944 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	@ (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193a:	f001 ff55 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff faa7 	bl	8000e90 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 8001950:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8001954:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8001958:	20000e64 	.word	0x20000e64

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94f 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff feca 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f967 	bl	8001c96 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e0:	f000 f92f 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000408 	.word	0x20000408
 80019fc:	20000410 	.word	0x20000410
 8001a00:	2000040c 	.word	0x2000040c

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000410 	.word	0x20000410
 8001a28:	20000d28 	.word	0x20000d28

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000d28 	.word	0x20000d28

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000410 	.word	0x20000410

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	@ (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	@ (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e159      	b.n	8001f80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8148 	bne.w	8001f7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a2 	beq.w	8001f7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b57      	ldr	r3, [pc, #348]	@ (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a56      	ldr	r2, [pc, #344]	@ (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b54      	ldr	r3, [pc, #336]	@ (8001f98 <HAL_GPIO_Init+0x2e8>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a52      	ldr	r2, [pc, #328]	@ (8001f9c <HAL_GPIO_Init+0x2ec>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a49      	ldr	r2, [pc, #292]	@ (8001fa0 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x202>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a48      	ldr	r2, [pc, #288]	@ (8001fa4 <HAL_GPIO_Init+0x2f4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x1fe>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a47      	ldr	r2, [pc, #284]	@ (8001fa8 <HAL_GPIO_Init+0x2f8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x1fa>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a46      	ldr	r2, [pc, #280]	@ (8001fac <HAL_GPIO_Init+0x2fc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x1f6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a45      	ldr	r2, [pc, #276]	@ (8001fb0 <HAL_GPIO_Init+0x300>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x1f2>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x204>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	@ (8001f9c <HAL_GPIO_Init+0x2ec>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f aea2 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	041a      	lsls	r2, r3, #16
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43d9      	mvns	r1, r3
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	400b      	ands	r3, r1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb3e 	bl	80016c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e267      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d075      	beq.n	800215a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800206e:	4b88      	ldr	r3, [pc, #544]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d00c      	beq.n	8002094 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b85      	ldr	r3, [pc, #532]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002082:	2b08      	cmp	r3, #8
 8002084:	d112      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002086:	4b82      	ldr	r3, [pc, #520]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b7e      	ldr	r3, [pc, #504]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d157      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e242      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x74>
 80020b6:	4b76      	ldr	r3, [pc, #472]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b70      	ldr	r3, [pc, #448]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6d      	ldr	r3, [pc, #436]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6c      	ldr	r2, [pc, #432]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020e8:	4b69      	ldr	r3, [pc, #420]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b66      	ldr	r3, [pc, #408]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a65      	ldr	r2, [pc, #404]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc90 	bl	8001a2c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fc8c 	bl	8001a2c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e207      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5b      	ldr	r3, [pc, #364]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xc0>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fc7c 	bl	8001a2c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fc78 	bl	8001a2c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1f3      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b51      	ldr	r3, [pc, #324]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002166:	4b4a      	ldr	r3, [pc, #296]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1c7      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4937      	ldr	r1, [pc, #220]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_OscConfig+0x244>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fc31 	bl	8001a2c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fc2d 	bl	8001a2c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1a8      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4925      	ldr	r1, [pc, #148]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x244>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fc10 	bl	8001a2c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fc0c 	bl	8001a2c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e187      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x248>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff fbf0 	bl	8001a2c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fbec 	bl	8001a2c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e167      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x200>
 800226e:	e01b      	b.n	80022a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x248>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fbd9 	bl	8001a2c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	e00e      	b.n	800229c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff fbd5 	bl	8001a2c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d907      	bls.n	800229c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e150      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 8002290:	40023800 	.word	0x40023800
 8002294:	42470000 	.word	0x42470000
 8002298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b88      	ldr	r3, [pc, #544]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ea      	bne.n	800227e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8097 	beq.w	80023e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b81      	ldr	r3, [pc, #516]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b7d      	ldr	r3, [pc, #500]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a7c      	ldr	r2, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b7a      	ldr	r3, [pc, #488]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b77      	ldr	r3, [pc, #476]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b74      	ldr	r3, [pc, #464]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a73      	ldr	r2, [pc, #460]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fb95 	bl	8001a2c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff fb91 	bl	8001a2c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e10c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b6a      	ldr	r3, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x2ea>
 800232c:	4b64      	ldr	r3, [pc, #400]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a63      	ldr	r2, [pc, #396]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x30c>
 8002342:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	4a5e      	ldr	r2, [pc, #376]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	@ 0x70
 800234e:	4b5c      	ldr	r3, [pc, #368]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	@ 0x70
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800235c:	4b58      	ldr	r3, [pc, #352]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	4a57      	ldr	r2, [pc, #348]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	@ 0x70
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	4a54      	ldr	r2, [pc, #336]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff fb56 	bl	8001a2c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff fb52 	bl	8001a2c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0cb      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ee      	beq.n	8002384 <HAL_RCC_OscConfig+0x334>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fb40 	bl	8001a2c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff fb3c 	bl	8001a2c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b5      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	4a38      	ldr	r2, [pc, #224]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a1 	beq.w	8002530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ee:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d05c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d141      	bne.n	8002486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fb10 	bl	8001a2c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff fb0c 	bl	8001a2c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e087      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	491b      	ldr	r1, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fae5 	bl	8001a2c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fae1 	bl	8001a2c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e05c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x416>
 8002484:	e054      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff face 	bl	8001a2c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff faca 	bl	8001a2c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e045      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
 80024b2:	e03d      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e038      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x4ec>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d028      	beq.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d121      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0cc      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b68      	ldr	r3, [pc, #416]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d90c      	bls.n	800257c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b65      	ldr	r3, [pc, #404]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800259e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a52      	ldr	r2, [pc, #328]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d044      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b3f      	ldr	r3, [pc, #252]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e067      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b37      	ldr	r3, [pc, #220]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4934      	ldr	r1, [pc, #208]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff f9fc 	bl	8001a2c <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f9f8 	bl	8001a2c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d20c      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f95c 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004708 	.word	0x08004708
 8002704:	20000408 	.word	0x20000408
 8002708:	2000040c 	.word	0x2000040c

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b094      	sub	sp, #80	@ 0x50
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b79      	ldr	r3, [pc, #484]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80e1 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e0db      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b73      	ldr	r3, [pc, #460]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002744:	e0db      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x208>)
 8002748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274a:	e0d8      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b6f      	ldr	r3, [pc, #444]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002756:	4b6d      	ldr	r3, [pc, #436]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800276c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	633b      	str	r3, [r7, #48]	@ 0x30
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	@ 0x34
 800277a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	6139      	str	r1, [r7, #16]
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b0:	4659      	mov	r1, fp
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4651      	mov	r1, sl
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	ebb2 0801 	subs.w	r8, r2, r1
 80027c4:	4659      	mov	r1, fp
 80027c6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	eb18 0303 	adds.w	r3, r8, r3
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	462b      	mov	r3, r5
 80027ec:	eb49 0303 	adc.w	r3, r9, r3
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027fe:	4629      	mov	r1, r5
 8002800:	024b      	lsls	r3, r1, #9
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002808:	4621      	mov	r1, r4
 800280a:	024a      	lsls	r2, r1, #9
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800281c:	f7fe f9c0 	bl	8000ba0 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002828:	e058      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b38      	ldr	r3, [pc, #224]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	4618      	mov	r0, r3
 8002834:	4611      	mov	r1, r2
 8002836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002856:	0150      	lsls	r0, r2, #5
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4641      	mov	r1, r8
 800285e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002862:	4649      	mov	r1, r9
 8002864:	eb63 0b01 	sbc.w	fp, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800287c:	ebb2 040a 	subs.w	r4, r2, sl
 8002880:	eb63 050b 	sbc.w	r5, r3, fp
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	00eb      	lsls	r3, r5, #3
 800288e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	4643      	mov	r3, r8
 800289a:	18e3      	adds	r3, r4, r3
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	464b      	mov	r3, r9
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d0:	f7fe f966 	bl	8000ba0 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002900:	4618      	mov	r0, r3
 8002902:	3750      	adds	r7, #80	@ 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000408 	.word	0x20000408

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff0 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08004718 	.word	0x08004718

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffdc 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0b5b      	lsrs	r3, r3, #13
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08004718 	.word	0x08004718

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fee8 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fa9e 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e044      	b.n	8002ac2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d018      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a62:	d013      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00e      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_TIM_Base_Start_IT+0xbc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d010      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aae:	e007      	b.n	8002ac0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40000c00 	.word	0x40000c00
 8002ae0:	40014000 	.word	0x40014000

08002ae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <HAL_TIM_Base_Stop_IT+0x48>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_Base_Stop_IT+0x48>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01b      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0202 	mvn.w	r2, #2
 8002b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f999 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f98b 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f99c 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01b      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0204 	mvn.w	r2, #4
 8002bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f973 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002bde:	e005      	b.n	8002bec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f965 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f976 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01b      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0208 	mvn.w	r2, #8
 8002c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2204      	movs	r2, #4
 8002c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f94d 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002c2a:	e005      	b.n	8002c38 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f93f 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f950 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01b      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0210 	mvn.w	r2, #16
 8002c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f927 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002c76:	e005      	b.n	8002c84 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f919 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f92a 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0201 	mvn.w	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fe fd2f 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 faaf 	bl	8003230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00c      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8fb 	bl	8002eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0220 	mvn.w	r2, #32
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fa81 	bl	800321c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_ConfigClockSource+0x1c>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0b4      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x186>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d76:	d03e      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0xd4>
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	f200 8087 	bhi.w	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d84:	f000 8086 	beq.w	8002e94 <HAL_TIM_ConfigClockSource+0x172>
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8c:	d87f      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002d8e:	2b70      	cmp	r3, #112	@ 0x70
 8002d90:	d01a      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0xa6>
 8002d92:	2b70      	cmp	r3, #112	@ 0x70
 8002d94:	d87b      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002d96:	2b60      	cmp	r3, #96	@ 0x60
 8002d98:	d050      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0x11a>
 8002d9a:	2b60      	cmp	r3, #96	@ 0x60
 8002d9c:	d877      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002d9e:	2b50      	cmp	r3, #80	@ 0x50
 8002da0:	d03c      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0xfa>
 8002da2:	2b50      	cmp	r3, #80	@ 0x50
 8002da4:	d873      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002da6:	2b40      	cmp	r3, #64	@ 0x40
 8002da8:	d058      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0x13a>
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d86f      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002dae:	2b30      	cmp	r3, #48	@ 0x30
 8002db0:	d064      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x15a>
 8002db2:	2b30      	cmp	r3, #48	@ 0x30
 8002db4:	d86b      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d060      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x15a>
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d867      	bhi.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d05c      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x15a>
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d05a      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x15a>
 8002dc6:	e062      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	f000 f992 	bl	8003100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
      break;
 8002df4:	e04f      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e06:	f000 f97b 	bl	8003100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e18:	609a      	str	r2, [r3, #8]
      break;
 8002e1a:	e03c      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f000 f8ef 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2150      	movs	r1, #80	@ 0x50
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f948 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e3a:	e02c      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f000 f90e 	bl	800306a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2160      	movs	r1, #96	@ 0x60
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f938 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e5a:	e01c      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f000 f8cf 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2140      	movs	r1, #64	@ 0x40
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f928 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 f91f 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e003      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      break;
 8002e92:	e000      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <TIM_Base_SetConfig+0xf0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00f      	beq.n	8002f38 <TIM_Base_SetConfig+0x38>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1e:	d00b      	beq.n	8002f38 <TIM_Base_SetConfig+0x38>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a34      	ldr	r2, [pc, #208]	@ (8002ff4 <TIM_Base_SetConfig+0xf4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d007      	beq.n	8002f38 <TIM_Base_SetConfig+0x38>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a33      	ldr	r2, [pc, #204]	@ (8002ff8 <TIM_Base_SetConfig+0xf8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0x38>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a32      	ldr	r2, [pc, #200]	@ (8002ffc <TIM_Base_SetConfig+0xfc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ff0 <TIM_Base_SetConfig+0xf0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01b      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f58:	d017      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <TIM_Base_SetConfig+0xf4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <TIM_Base_SetConfig+0xf8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00f      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <TIM_Base_SetConfig+0xfc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <TIM_Base_SetConfig+0x100>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a21      	ldr	r2, [pc, #132]	@ (8003004 <TIM_Base_SetConfig+0x104>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x8a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <TIM_Base_SetConfig+0x108>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff0 <TIM_Base_SetConfig+0xf0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d103      	bne.n	8002fca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306a:	b480      	push	{r7}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0210 	bic.w	r2, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	031b      	lsls	r3, r3, #12
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f043 0307 	orr.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800311a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	021a      	lsls	r2, r3, #8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	431a      	orrs	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003154:	2302      	movs	r3, #2
 8003156:	e050      	b.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a4:	d013      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10c      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000

0800321c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e042      	b.n	80032dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe faae 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	@ 0x24
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f82b 	bl	80032e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800329c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b0c0      	sub	sp, #256	@ 0x100
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	ea40 0301 	orr.w	r3, r0, r1
 800330c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	431a      	orrs	r2, r3
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	431a      	orrs	r2, r3
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800333c:	f021 010c 	bic.w	r1, r1, #12
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800334a:	430b      	orrs	r3, r1
 800334c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335e:	6999      	ldr	r1, [r3, #24]
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	ea40 0301 	orr.w	r3, r0, r1
 800336a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b8f      	ldr	r3, [pc, #572]	@ (80035b0 <UART_SetConfig+0x2cc>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d005      	beq.n	8003384 <UART_SetConfig+0xa0>
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b8d      	ldr	r3, [pc, #564]	@ (80035b4 <UART_SetConfig+0x2d0>)
 8003380:	429a      	cmp	r2, r3
 8003382:	d104      	bne.n	800338e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003384:	f7ff fae8 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8003388:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800338c:	e003      	b.n	8003396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800338e:	f7ff facf 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8003392:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a0:	f040 810c 	bne.w	80035bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033b6:	4622      	mov	r2, r4
 80033b8:	462b      	mov	r3, r5
 80033ba:	1891      	adds	r1, r2, r2
 80033bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033be:	415b      	adcs	r3, r3
 80033c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033c6:	4621      	mov	r1, r4
 80033c8:	eb12 0801 	adds.w	r8, r2, r1
 80033cc:	4629      	mov	r1, r5
 80033ce:	eb43 0901 	adc.w	r9, r3, r1
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e6:	4690      	mov	r8, r2
 80033e8:	4699      	mov	r9, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	eb18 0303 	adds.w	r3, r8, r3
 80033f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033f4:	462b      	mov	r3, r5
 80033f6:	eb49 0303 	adc.w	r3, r9, r3
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800340a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800340e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003412:	460b      	mov	r3, r1
 8003414:	18db      	adds	r3, r3, r3
 8003416:	653b      	str	r3, [r7, #80]	@ 0x50
 8003418:	4613      	mov	r3, r2
 800341a:	eb42 0303 	adc.w	r3, r2, r3
 800341e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003428:	f7fd fbba 	bl	8000ba0 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4b61      	ldr	r3, [pc, #388]	@ (80035b8 <UART_SetConfig+0x2d4>)
 8003432:	fba3 2302 	umull	r2, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	011c      	lsls	r4, r3, #4
 800343a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003444:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	1891      	adds	r1, r2, r2
 8003452:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003454:	415b      	adcs	r3, r3
 8003456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800345c:	4641      	mov	r1, r8
 800345e:	eb12 0a01 	adds.w	sl, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0b01 	adc.w	fp, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800347c:	4692      	mov	sl, r2
 800347e:	469b      	mov	fp, r3
 8003480:	4643      	mov	r3, r8
 8003482:	eb1a 0303 	adds.w	r3, sl, r3
 8003486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800348a:	464b      	mov	r3, r9
 800348c:	eb4b 0303 	adc.w	r3, fp, r3
 8003490:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034a8:	460b      	mov	r3, r1
 80034aa:	18db      	adds	r3, r3, r3
 80034ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ae:	4613      	mov	r3, r2
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034be:	f7fd fb6f 	bl	8000ba0 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <UART_SetConfig+0x2d4>)
 80034ca:	fba3 2301 	umull	r2, r3, r3, r1
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2264      	movs	r2, #100	@ 0x64
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	1acb      	subs	r3, r1, r3
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034de:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <UART_SetConfig+0x2d4>)
 80034e0:	fba3 2302 	umull	r2, r3, r3, r2
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034ec:	441c      	add	r4, r3
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003508:	415b      	adcs	r3, r3
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800350c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6339      	str	r1, [r7, #48]	@ 0x30
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800355c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003564:	460b      	mov	r3, r1
 8003566:	18db      	adds	r3, r3, r3
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356a:	4613      	mov	r3, r2
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800357a:	f7fd fb11 	bl	8000ba0 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <UART_SetConfig+0x2d4>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2164      	movs	r1, #100	@ 0x64
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	3332      	adds	r3, #50	@ 0x32
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <UART_SetConfig+0x2d4>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 0207 	and.w	r2, r3, #7
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4422      	add	r2, r4
 80035aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ac:	e106      	b.n	80037bc <UART_SetConfig+0x4d8>
 80035ae:	bf00      	nop
 80035b0:	40011000 	.word	0x40011000
 80035b4:	40011400 	.word	0x40011400
 80035b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c0:	2200      	movs	r2, #0
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	1891      	adds	r1, r2, r2
 80035d4:	6239      	str	r1, [r7, #32]
 80035d6:	415b      	adcs	r3, r3
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035de:	4641      	mov	r1, r8
 80035e0:	1854      	adds	r4, r2, r1
 80035e2:	4649      	mov	r1, r9
 80035e4:	eb43 0501 	adc.w	r5, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003604:	464b      	mov	r3, r9
 8003606:	eb45 0303 	adc.w	r3, r5, r3
 800360a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800361a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800362a:	4629      	mov	r1, r5
 800362c:	008b      	lsls	r3, r1, #2
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003634:	4621      	mov	r1, r4
 8003636:	008a      	lsls	r2, r1, #2
 8003638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800363c:	f7fd fab0 	bl	8000ba0 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b60      	ldr	r3, [pc, #384]	@ (80037c8 <UART_SetConfig+0x4e4>)
 8003646:	fba3 2302 	umull	r2, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	011c      	lsls	r4, r3, #4
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800365c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	1891      	adds	r1, r2, r2
 8003666:	61b9      	str	r1, [r7, #24]
 8003668:	415b      	adcs	r3, r3
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003670:	4641      	mov	r1, r8
 8003672:	1851      	adds	r1, r2, r1
 8003674:	6139      	str	r1, [r7, #16]
 8003676:	4649      	mov	r1, r9
 8003678:	414b      	adcs	r3, r1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003688:	4659      	mov	r1, fp
 800368a:	00cb      	lsls	r3, r1, #3
 800368c:	4651      	mov	r1, sl
 800368e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003692:	4651      	mov	r1, sl
 8003694:	00ca      	lsls	r2, r1, #3
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	4603      	mov	r3, r0
 800369c:	4642      	mov	r2, r8
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036a4:	464b      	mov	r3, r9
 80036a6:	460a      	mov	r2, r1
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036c8:	4649      	mov	r1, r9
 80036ca:	008b      	lsls	r3, r1, #2
 80036cc:	4641      	mov	r1, r8
 80036ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d2:	4641      	mov	r1, r8
 80036d4:	008a      	lsls	r2, r1, #2
 80036d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036da:	f7fd fa61 	bl	8000ba0 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <UART_SetConfig+0x4e4>)
 80036e6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2264      	movs	r2, #100	@ 0x64
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	1acb      	subs	r3, r1, r3
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	3332      	adds	r3, #50	@ 0x32
 80036f8:	4a33      	ldr	r2, [pc, #204]	@ (80037c8 <UART_SetConfig+0x4e4>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003704:	441c      	add	r4, r3
 8003706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370a:	2200      	movs	r2, #0
 800370c:	673b      	str	r3, [r7, #112]	@ 0x70
 800370e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	1891      	adds	r1, r2, r2
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	415b      	adcs	r3, r3
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003724:	4641      	mov	r1, r8
 8003726:	1851      	adds	r1, r2, r1
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	4649      	mov	r1, r9
 800372c:	414b      	adcs	r3, r1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800373c:	4659      	mov	r1, fp
 800373e:	00cb      	lsls	r3, r1, #3
 8003740:	4651      	mov	r1, sl
 8003742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003746:	4651      	mov	r1, sl
 8003748:	00ca      	lsls	r2, r1, #3
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	4603      	mov	r3, r0
 8003750:	4642      	mov	r2, r8
 8003752:	189b      	adds	r3, r3, r2
 8003754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003756:	464b      	mov	r3, r9
 8003758:	460a      	mov	r2, r1
 800375a:	eb42 0303 	adc.w	r3, r2, r3
 800375e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	663b      	str	r3, [r7, #96]	@ 0x60
 800376a:	667a      	str	r2, [r7, #100]	@ 0x64
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003778:	4649      	mov	r1, r9
 800377a:	008b      	lsls	r3, r1, #2
 800377c:	4641      	mov	r1, r8
 800377e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003782:	4641      	mov	r1, r8
 8003784:	008a      	lsls	r2, r1, #2
 8003786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800378a:	f7fd fa09 	bl	8000ba0 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <UART_SetConfig+0x4e4>)
 8003794:	fba3 1302 	umull	r1, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2164      	movs	r1, #100	@ 0x64
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	3332      	adds	r3, #50	@ 0x32
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <UART_SetConfig+0x4e4>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4422      	add	r2, r4
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	bf00      	nop
 80037be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	@ (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000414 	.word	0x20000414

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003824 <__libc_init_array+0x3c>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2600      	movs	r6, #0
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	@ (800382c <__libc_init_array+0x44>)
 80037fc:	f000 ff76 	bl	80046ec <_init>
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2600      	movs	r6, #0
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08004758 	.word	0x08004758
 8003824:	08004758 	.word	0x08004758
 8003828:	08004758 	.word	0x08004758
 800382c:	0800475c 	.word	0x0800475c

08003830 <pow>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	ed2d 8b02 	vpush	{d8}
 8003836:	eeb0 8a40 	vmov.f32	s16, s0
 800383a:	eef0 8a60 	vmov.f32	s17, s1
 800383e:	ec55 4b11 	vmov	r4, r5, d1
 8003842:	f000 f871 	bl	8003928 <__ieee754_pow>
 8003846:	4622      	mov	r2, r4
 8003848:	462b      	mov	r3, r5
 800384a:	4620      	mov	r0, r4
 800384c:	4629      	mov	r1, r5
 800384e:	ec57 6b10 	vmov	r6, r7, d0
 8003852:	f7fd f917 	bl	8000a84 <__aeabi_dcmpun>
 8003856:	2800      	cmp	r0, #0
 8003858:	d13b      	bne.n	80038d2 <pow+0xa2>
 800385a:	ec51 0b18 	vmov	r0, r1, d8
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	f7fd f8dd 	bl	8000a20 <__aeabi_dcmpeq>
 8003866:	b1b8      	cbz	r0, 8003898 <pow+0x68>
 8003868:	2200      	movs	r2, #0
 800386a:	2300      	movs	r3, #0
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fd f8d6 	bl	8000a20 <__aeabi_dcmpeq>
 8003874:	2800      	cmp	r0, #0
 8003876:	d146      	bne.n	8003906 <pow+0xd6>
 8003878:	ec45 4b10 	vmov	d0, r4, r5
 800387c:	f000 f848 	bl	8003910 <finite>
 8003880:	b338      	cbz	r0, 80038d2 <pow+0xa2>
 8003882:	2200      	movs	r2, #0
 8003884:	2300      	movs	r3, #0
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fd f8d3 	bl	8000a34 <__aeabi_dcmplt>
 800388e:	b300      	cbz	r0, 80038d2 <pow+0xa2>
 8003890:	f7ff ffa4 	bl	80037dc <__errno>
 8003894:	2322      	movs	r3, #34	@ 0x22
 8003896:	e01b      	b.n	80038d0 <pow+0xa0>
 8003898:	ec47 6b10 	vmov	d0, r6, r7
 800389c:	f000 f838 	bl	8003910 <finite>
 80038a0:	b9e0      	cbnz	r0, 80038dc <pow+0xac>
 80038a2:	eeb0 0a48 	vmov.f32	s0, s16
 80038a6:	eef0 0a68 	vmov.f32	s1, s17
 80038aa:	f000 f831 	bl	8003910 <finite>
 80038ae:	b1a8      	cbz	r0, 80038dc <pow+0xac>
 80038b0:	ec45 4b10 	vmov	d0, r4, r5
 80038b4:	f000 f82c 	bl	8003910 <finite>
 80038b8:	b180      	cbz	r0, 80038dc <pow+0xac>
 80038ba:	4632      	mov	r2, r6
 80038bc:	463b      	mov	r3, r7
 80038be:	4630      	mov	r0, r6
 80038c0:	4639      	mov	r1, r7
 80038c2:	f7fd f8df 	bl	8000a84 <__aeabi_dcmpun>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0e2      	beq.n	8003890 <pow+0x60>
 80038ca:	f7ff ff87 	bl	80037dc <__errno>
 80038ce:	2321      	movs	r3, #33	@ 0x21
 80038d0:	6003      	str	r3, [r0, #0]
 80038d2:	ecbd 8b02 	vpop	{d8}
 80038d6:	ec47 6b10 	vmov	d0, r6, r7
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038dc:	2200      	movs	r2, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	4630      	mov	r0, r6
 80038e2:	4639      	mov	r1, r7
 80038e4:	f7fd f89c 	bl	8000a20 <__aeabi_dcmpeq>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d0f2      	beq.n	80038d2 <pow+0xa2>
 80038ec:	eeb0 0a48 	vmov.f32	s0, s16
 80038f0:	eef0 0a68 	vmov.f32	s1, s17
 80038f4:	f000 f80c 	bl	8003910 <finite>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d0ea      	beq.n	80038d2 <pow+0xa2>
 80038fc:	ec45 4b10 	vmov	d0, r4, r5
 8003900:	f000 f806 	bl	8003910 <finite>
 8003904:	e7c3      	b.n	800388e <pow+0x5e>
 8003906:	4f01      	ldr	r7, [pc, #4]	@ (800390c <pow+0xdc>)
 8003908:	2600      	movs	r6, #0
 800390a:	e7e2      	b.n	80038d2 <pow+0xa2>
 800390c:	3ff00000 	.word	0x3ff00000

08003910 <finite>:
 8003910:	b082      	sub	sp, #8
 8003912:	ed8d 0b00 	vstr	d0, [sp]
 8003916:	9801      	ldr	r0, [sp, #4]
 8003918:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800391c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003920:	0fc0      	lsrs	r0, r0, #31
 8003922:	b002      	add	sp, #8
 8003924:	4770      	bx	lr
	...

08003928 <__ieee754_pow>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	b091      	sub	sp, #68	@ 0x44
 800392e:	ed8d 1b00 	vstr	d1, [sp]
 8003932:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003936:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800393a:	ea5a 0001 	orrs.w	r0, sl, r1
 800393e:	ec57 6b10 	vmov	r6, r7, d0
 8003942:	d113      	bne.n	800396c <__ieee754_pow+0x44>
 8003944:	19b3      	adds	r3, r6, r6
 8003946:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800394a:	4152      	adcs	r2, r2
 800394c:	4298      	cmp	r0, r3
 800394e:	4b98      	ldr	r3, [pc, #608]	@ (8003bb0 <__ieee754_pow+0x288>)
 8003950:	4193      	sbcs	r3, r2
 8003952:	f080 84ea 	bcs.w	800432a <__ieee754_pow+0xa02>
 8003956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800395a:	4630      	mov	r0, r6
 800395c:	4639      	mov	r1, r7
 800395e:	f7fc fc41 	bl	80001e4 <__adddf3>
 8003962:	ec41 0b10 	vmov	d0, r0, r1
 8003966:	b011      	add	sp, #68	@ 0x44
 8003968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396c:	4a91      	ldr	r2, [pc, #580]	@ (8003bb4 <__ieee754_pow+0x28c>)
 800396e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003972:	4590      	cmp	r8, r2
 8003974:	463d      	mov	r5, r7
 8003976:	4633      	mov	r3, r6
 8003978:	d806      	bhi.n	8003988 <__ieee754_pow+0x60>
 800397a:	d101      	bne.n	8003980 <__ieee754_pow+0x58>
 800397c:	2e00      	cmp	r6, #0
 800397e:	d1ea      	bne.n	8003956 <__ieee754_pow+0x2e>
 8003980:	4592      	cmp	sl, r2
 8003982:	d801      	bhi.n	8003988 <__ieee754_pow+0x60>
 8003984:	d10e      	bne.n	80039a4 <__ieee754_pow+0x7c>
 8003986:	b169      	cbz	r1, 80039a4 <__ieee754_pow+0x7c>
 8003988:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800398c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003990:	431d      	orrs	r5, r3
 8003992:	d1e0      	bne.n	8003956 <__ieee754_pow+0x2e>
 8003994:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003998:	18db      	adds	r3, r3, r3
 800399a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800399e:	4152      	adcs	r2, r2
 80039a0:	429d      	cmp	r5, r3
 80039a2:	e7d4      	b.n	800394e <__ieee754_pow+0x26>
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	46c3      	mov	fp, r8
 80039a8:	da3a      	bge.n	8003a20 <__ieee754_pow+0xf8>
 80039aa:	4a83      	ldr	r2, [pc, #524]	@ (8003bb8 <__ieee754_pow+0x290>)
 80039ac:	4592      	cmp	sl, r2
 80039ae:	d84d      	bhi.n	8003a4c <__ieee754_pow+0x124>
 80039b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80039b4:	4592      	cmp	sl, r2
 80039b6:	f240 84c7 	bls.w	8004348 <__ieee754_pow+0xa20>
 80039ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 80039be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80039c2:	2a14      	cmp	r2, #20
 80039c4:	dd0f      	ble.n	80039e6 <__ieee754_pow+0xbe>
 80039c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80039ca:	fa21 f402 	lsr.w	r4, r1, r2
 80039ce:	fa04 f202 	lsl.w	r2, r4, r2
 80039d2:	428a      	cmp	r2, r1
 80039d4:	f040 84b8 	bne.w	8004348 <__ieee754_pow+0xa20>
 80039d8:	f004 0401 	and.w	r4, r4, #1
 80039dc:	f1c4 0402 	rsb	r4, r4, #2
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d158      	bne.n	8003a96 <__ieee754_pow+0x16e>
 80039e4:	e00e      	b.n	8003a04 <__ieee754_pow+0xdc>
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d154      	bne.n	8003a94 <__ieee754_pow+0x16c>
 80039ea:	f1c2 0214 	rsb	r2, r2, #20
 80039ee:	fa4a f402 	asr.w	r4, sl, r2
 80039f2:	fa04 f202 	lsl.w	r2, r4, r2
 80039f6:	4552      	cmp	r2, sl
 80039f8:	f040 84a3 	bne.w	8004342 <__ieee754_pow+0xa1a>
 80039fc:	f004 0401 	and.w	r4, r4, #1
 8003a00:	f1c4 0402 	rsb	r4, r4, #2
 8003a04:	4a6d      	ldr	r2, [pc, #436]	@ (8003bbc <__ieee754_pow+0x294>)
 8003a06:	4592      	cmp	sl, r2
 8003a08:	d12e      	bne.n	8003a68 <__ieee754_pow+0x140>
 8003a0a:	f1b9 0f00 	cmp.w	r9, #0
 8003a0e:	f280 8494 	bge.w	800433a <__ieee754_pow+0xa12>
 8003a12:	496a      	ldr	r1, [pc, #424]	@ (8003bbc <__ieee754_pow+0x294>)
 8003a14:	4632      	mov	r2, r6
 8003a16:	463b      	mov	r3, r7
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7fc fec3 	bl	80007a4 <__aeabi_ddiv>
 8003a1e:	e7a0      	b.n	8003962 <__ieee754_pow+0x3a>
 8003a20:	2400      	movs	r4, #0
 8003a22:	bbc1      	cbnz	r1, 8003a96 <__ieee754_pow+0x16e>
 8003a24:	4a63      	ldr	r2, [pc, #396]	@ (8003bb4 <__ieee754_pow+0x28c>)
 8003a26:	4592      	cmp	sl, r2
 8003a28:	d1ec      	bne.n	8003a04 <__ieee754_pow+0xdc>
 8003a2a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8003a2e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f000 8479 	beq.w	800432a <__ieee754_pow+0xa02>
 8003a38:	4b61      	ldr	r3, [pc, #388]	@ (8003bc0 <__ieee754_pow+0x298>)
 8003a3a:	4598      	cmp	r8, r3
 8003a3c:	d908      	bls.n	8003a50 <__ieee754_pow+0x128>
 8003a3e:	f1b9 0f00 	cmp.w	r9, #0
 8003a42:	f2c0 8476 	blt.w	8004332 <__ieee754_pow+0xa0a>
 8003a46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a4a:	e78a      	b.n	8003962 <__ieee754_pow+0x3a>
 8003a4c:	2402      	movs	r4, #2
 8003a4e:	e7e8      	b.n	8003a22 <__ieee754_pow+0xfa>
 8003a50:	f1b9 0f00 	cmp.w	r9, #0
 8003a54:	f04f 0000 	mov.w	r0, #0
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	da81      	bge.n	8003962 <__ieee754_pow+0x3a>
 8003a5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003a62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003a66:	e77c      	b.n	8003962 <__ieee754_pow+0x3a>
 8003a68:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003a6c:	d106      	bne.n	8003a7c <__ieee754_pow+0x154>
 8003a6e:	4632      	mov	r2, r6
 8003a70:	463b      	mov	r3, r7
 8003a72:	4630      	mov	r0, r6
 8003a74:	4639      	mov	r1, r7
 8003a76:	f7fc fd6b 	bl	8000550 <__aeabi_dmul>
 8003a7a:	e772      	b.n	8003962 <__ieee754_pow+0x3a>
 8003a7c:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <__ieee754_pow+0x29c>)
 8003a7e:	4591      	cmp	r9, r2
 8003a80:	d109      	bne.n	8003a96 <__ieee754_pow+0x16e>
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	db07      	blt.n	8003a96 <__ieee754_pow+0x16e>
 8003a86:	ec47 6b10 	vmov	d0, r6, r7
 8003a8a:	b011      	add	sp, #68	@ 0x44
 8003a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	f000 bd52 	b.w	8004538 <__ieee754_sqrt>
 8003a94:	2400      	movs	r4, #0
 8003a96:	ec47 6b10 	vmov	d0, r6, r7
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	f000 fc88 	bl	80043b0 <fabs>
 8003aa0:	9b02      	ldr	r3, [sp, #8]
 8003aa2:	ec51 0b10 	vmov	r0, r1, d0
 8003aa6:	bb53      	cbnz	r3, 8003afe <__ieee754_pow+0x1d6>
 8003aa8:	4b44      	ldr	r3, [pc, #272]	@ (8003bbc <__ieee754_pow+0x294>)
 8003aaa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d002      	beq.n	8003ab8 <__ieee754_pow+0x190>
 8003ab2:	f1b8 0f00 	cmp.w	r8, #0
 8003ab6:	d122      	bne.n	8003afe <__ieee754_pow+0x1d6>
 8003ab8:	f1b9 0f00 	cmp.w	r9, #0
 8003abc:	da05      	bge.n	8003aca <__ieee754_pow+0x1a2>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	493d      	ldr	r1, [pc, #244]	@ (8003bbc <__ieee754_pow+0x294>)
 8003ac6:	f7fc fe6d 	bl	80007a4 <__aeabi_ddiv>
 8003aca:	2d00      	cmp	r5, #0
 8003acc:	f6bf af49 	bge.w	8003962 <__ieee754_pow+0x3a>
 8003ad0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003ad4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003ad8:	ea58 0804 	orrs.w	r8, r8, r4
 8003adc:	d108      	bne.n	8003af0 <__ieee754_pow+0x1c8>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fc fb7b 	bl	80001e0 <__aeabi_dsub>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	e794      	b.n	8003a1a <__ieee754_pow+0xf2>
 8003af0:	2c01      	cmp	r4, #1
 8003af2:	f47f af36 	bne.w	8003962 <__ieee754_pow+0x3a>
 8003af6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003afa:	4619      	mov	r1, r3
 8003afc:	e731      	b.n	8003962 <__ieee754_pow+0x3a>
 8003afe:	0feb      	lsrs	r3, r5, #31
 8003b00:	3b01      	subs	r3, #1
 8003b02:	ea53 0204 	orrs.w	r2, r3, r4
 8003b06:	d102      	bne.n	8003b0e <__ieee754_pow+0x1e6>
 8003b08:	4632      	mov	r2, r6
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	e7e9      	b.n	8003ae2 <__ieee754_pow+0x1ba>
 8003b0e:	3c01      	subs	r4, #1
 8003b10:	431c      	orrs	r4, r3
 8003b12:	d016      	beq.n	8003b42 <__ieee754_pow+0x21a>
 8003b14:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003ba0 <__ieee754_pow+0x278>
 8003b18:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003b1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b20:	f240 8112 	bls.w	8003d48 <__ieee754_pow+0x420>
 8003b24:	4b28      	ldr	r3, [pc, #160]	@ (8003bc8 <__ieee754_pow+0x2a0>)
 8003b26:	459a      	cmp	sl, r3
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <__ieee754_pow+0x298>)
 8003b2a:	d916      	bls.n	8003b5a <__ieee754_pow+0x232>
 8003b2c:	4598      	cmp	r8, r3
 8003b2e:	d80b      	bhi.n	8003b48 <__ieee754_pow+0x220>
 8003b30:	f1b9 0f00 	cmp.w	r9, #0
 8003b34:	da0b      	bge.n	8003b4e <__ieee754_pow+0x226>
 8003b36:	2000      	movs	r0, #0
 8003b38:	b011      	add	sp, #68	@ 0x44
 8003b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3e:	f000 bcf3 	b.w	8004528 <__math_oflow>
 8003b42:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003ba8 <__ieee754_pow+0x280>
 8003b46:	e7e7      	b.n	8003b18 <__ieee754_pow+0x1f0>
 8003b48:	f1b9 0f00 	cmp.w	r9, #0
 8003b4c:	dcf3      	bgt.n	8003b36 <__ieee754_pow+0x20e>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	b011      	add	sp, #68	@ 0x44
 8003b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b56:	f000 bcdf 	b.w	8004518 <__math_uflow>
 8003b5a:	4598      	cmp	r8, r3
 8003b5c:	d20c      	bcs.n	8003b78 <__ieee754_pow+0x250>
 8003b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2300      	movs	r3, #0
 8003b66:	f7fc ff65 	bl	8000a34 <__aeabi_dcmplt>
 8003b6a:	3800      	subs	r0, #0
 8003b6c:	bf18      	it	ne
 8003b6e:	2001      	movne	r0, #1
 8003b70:	f1b9 0f00 	cmp.w	r9, #0
 8003b74:	daec      	bge.n	8003b50 <__ieee754_pow+0x228>
 8003b76:	e7df      	b.n	8003b38 <__ieee754_pow+0x210>
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <__ieee754_pow+0x294>)
 8003b7a:	4598      	cmp	r8, r3
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	d924      	bls.n	8003bcc <__ieee754_pow+0x2a4>
 8003b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b86:	2300      	movs	r3, #0
 8003b88:	f7fc ff54 	bl	8000a34 <__aeabi_dcmplt>
 8003b8c:	3800      	subs	r0, #0
 8003b8e:	bf18      	it	ne
 8003b90:	2001      	movne	r0, #1
 8003b92:	f1b9 0f00 	cmp.w	r9, #0
 8003b96:	dccf      	bgt.n	8003b38 <__ieee754_pow+0x210>
 8003b98:	e7da      	b.n	8003b50 <__ieee754_pow+0x228>
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	3ff00000 	.word	0x3ff00000
 8003ba8:	00000000 	.word	0x00000000
 8003bac:	bff00000 	.word	0xbff00000
 8003bb0:	fff00000 	.word	0xfff00000
 8003bb4:	7ff00000 	.word	0x7ff00000
 8003bb8:	433fffff 	.word	0x433fffff
 8003bbc:	3ff00000 	.word	0x3ff00000
 8003bc0:	3fefffff 	.word	0x3fefffff
 8003bc4:	3fe00000 	.word	0x3fe00000
 8003bc8:	43f00000 	.word	0x43f00000
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d38 <__ieee754_pow+0x410>)
 8003bce:	f7fc fb07 	bl	80001e0 <__aeabi_dsub>
 8003bd2:	a351      	add	r3, pc, #324	@ (adr r3, 8003d18 <__ieee754_pow+0x3f0>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	4604      	mov	r4, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	f7fc fcb8 	bl	8000550 <__aeabi_dmul>
 8003be0:	a34f      	add	r3, pc, #316	@ (adr r3, 8003d20 <__ieee754_pow+0x3f8>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	4606      	mov	r6, r0
 8003be8:	460f      	mov	r7, r1
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fcaf 	bl	8000550 <__aeabi_dmul>
 8003bf2:	4b52      	ldr	r3, [pc, #328]	@ (8003d3c <__ieee754_pow+0x414>)
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	468b      	mov	fp, r1
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc fca7 	bl	8000550 <__aeabi_dmul>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	a148      	add	r1, pc, #288	@ (adr r1, 8003d28 <__ieee754_pow+0x400>)
 8003c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c0c:	f7fc fae8 	bl	80001e0 <__aeabi_dsub>
 8003c10:	4622      	mov	r2, r4
 8003c12:	462b      	mov	r3, r5
 8003c14:	f7fc fc9c 	bl	8000550 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	4948      	ldr	r1, [pc, #288]	@ (8003d40 <__ieee754_pow+0x418>)
 8003c20:	f7fc fade 	bl	80001e0 <__aeabi_dsub>
 8003c24:	4622      	mov	r2, r4
 8003c26:	4680      	mov	r8, r0
 8003c28:	4689      	mov	r9, r1
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7fc fc8e 	bl	8000550 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	f7fc fc88 	bl	8000550 <__aeabi_dmul>
 8003c40:	a33b      	add	r3, pc, #236	@ (adr r3, 8003d30 <__ieee754_pow+0x408>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc fc83 	bl	8000550 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4650      	mov	r0, sl
 8003c50:	4659      	mov	r1, fp
 8003c52:	f7fc fac5 	bl	80001e0 <__aeabi_dsub>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4680      	mov	r8, r0
 8003c5c:	4689      	mov	r9, r1
 8003c5e:	4630      	mov	r0, r6
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fc fabf 	bl	80001e4 <__adddf3>
 8003c66:	2400      	movs	r4, #0
 8003c68:	4632      	mov	r2, r6
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	460d      	mov	r5, r1
 8003c70:	f7fc fab6 	bl	80001e0 <__aeabi_dsub>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4640      	mov	r0, r8
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	f7fc fab0 	bl	80001e0 <__aeabi_dsub>
 8003c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	4652      	mov	r2, sl
 8003c96:	465b      	mov	r3, fp
 8003c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c9c:	f7fc faa0 	bl	80001e0 <__aeabi_dsub>
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	f7fc fc54 	bl	8000550 <__aeabi_dmul>
 8003ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cac:	4680      	mov	r8, r0
 8003cae:	4689      	mov	r9, r1
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	f7fc fc4c 	bl	8000550 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fc fa90 	bl	80001e4 <__adddf3>
 8003cc4:	4652      	mov	r2, sl
 8003cc6:	465b      	mov	r3, fp
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	4620      	mov	r0, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	f7fc fc3e 	bl	8000550 <__aeabi_dmul>
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4680      	mov	r8, r0
 8003cda:	4689      	mov	r9, r1
 8003cdc:	4630      	mov	r0, r6
 8003cde:	4639      	mov	r1, r7
 8003ce0:	f7fc fa80 	bl	80001e4 <__adddf3>
 8003ce4:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <__ieee754_pow+0x41c>)
 8003ce6:	4299      	cmp	r1, r3
 8003ce8:	4604      	mov	r4, r0
 8003cea:	460d      	mov	r5, r1
 8003cec:	468a      	mov	sl, r1
 8003cee:	468b      	mov	fp, r1
 8003cf0:	f340 82ef 	ble.w	80042d2 <__ieee754_pow+0x9aa>
 8003cf4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003cf8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003cfc:	4303      	orrs	r3, r0
 8003cfe:	f000 81e8 	beq.w	80040d2 <__ieee754_pow+0x7aa>
 8003d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f7fc fe93 	bl	8000a34 <__aeabi_dcmplt>
 8003d0e:	3800      	subs	r0, #0
 8003d10:	bf18      	it	ne
 8003d12:	2001      	movne	r0, #1
 8003d14:	e710      	b.n	8003b38 <__ieee754_pow+0x210>
 8003d16:	bf00      	nop
 8003d18:	60000000 	.word	0x60000000
 8003d1c:	3ff71547 	.word	0x3ff71547
 8003d20:	f85ddf44 	.word	0xf85ddf44
 8003d24:	3e54ae0b 	.word	0x3e54ae0b
 8003d28:	55555555 	.word	0x55555555
 8003d2c:	3fd55555 	.word	0x3fd55555
 8003d30:	652b82fe 	.word	0x652b82fe
 8003d34:	3ff71547 	.word	0x3ff71547
 8003d38:	3ff00000 	.word	0x3ff00000
 8003d3c:	3fd00000 	.word	0x3fd00000
 8003d40:	3fe00000 	.word	0x3fe00000
 8003d44:	408fffff 	.word	0x408fffff
 8003d48:	4bd5      	ldr	r3, [pc, #852]	@ (80040a0 <__ieee754_pow+0x778>)
 8003d4a:	402b      	ands	r3, r5
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	b92b      	cbnz	r3, 8003d5c <__ieee754_pow+0x434>
 8003d50:	4bd4      	ldr	r3, [pc, #848]	@ (80040a4 <__ieee754_pow+0x77c>)
 8003d52:	f7fc fbfd 	bl	8000550 <__aeabi_dmul>
 8003d56:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003d5a:	468b      	mov	fp, r1
 8003d5c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003d60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003d64:	4413      	add	r3, r2
 8003d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d68:	4bcf      	ldr	r3, [pc, #828]	@ (80040a8 <__ieee754_pow+0x780>)
 8003d6a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003d6e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003d72:	459b      	cmp	fp, r3
 8003d74:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003d78:	dd08      	ble.n	8003d8c <__ieee754_pow+0x464>
 8003d7a:	4bcc      	ldr	r3, [pc, #816]	@ (80040ac <__ieee754_pow+0x784>)
 8003d7c:	459b      	cmp	fp, r3
 8003d7e:	f340 81a5 	ble.w	80040cc <__ieee754_pow+0x7a4>
 8003d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d84:	3301      	adds	r3, #1
 8003d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d88:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003d8c:	f04f 0a00 	mov.w	sl, #0
 8003d90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d96:	4bc6      	ldr	r3, [pc, #792]	@ (80040b0 <__ieee754_pow+0x788>)
 8003d98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d9c:	ed93 7b00 	vldr	d7, [r3]
 8003da0:	4629      	mov	r1, r5
 8003da2:	ec53 2b17 	vmov	r2, r3, d7
 8003da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003daa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dae:	f7fc fa17 	bl	80001e0 <__aeabi_dsub>
 8003db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003db6:	4606      	mov	r6, r0
 8003db8:	460f      	mov	r7, r1
 8003dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dbe:	f7fc fa11 	bl	80001e4 <__adddf3>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	49ba      	ldr	r1, [pc, #744]	@ (80040b4 <__ieee754_pow+0x78c>)
 8003dca:	f7fc fceb 	bl	80007a4 <__aeabi_ddiv>
 8003dce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	f7fc fbb9 	bl	8000550 <__aeabi_dmul>
 8003dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003de2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003de6:	106d      	asrs	r5, r5, #1
 8003de8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003dec:	f04f 0b00 	mov.w	fp, #0
 8003df0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003df4:	4661      	mov	r1, ip
 8003df6:	2200      	movs	r2, #0
 8003df8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	46e1      	mov	r9, ip
 8003e00:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	f7fc fba2 	bl	8000550 <__aeabi_dmul>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4630      	mov	r0, r6
 8003e12:	4639      	mov	r1, r7
 8003e14:	f7fc f9e4 	bl	80001e0 <__aeabi_dsub>
 8003e18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	4620      	mov	r0, r4
 8003e22:	4629      	mov	r1, r5
 8003e24:	f7fc f9dc 	bl	80001e0 <__aeabi_dsub>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e30:	f7fc f9d6 	bl	80001e0 <__aeabi_dsub>
 8003e34:	465a      	mov	r2, fp
 8003e36:	464b      	mov	r3, r9
 8003e38:	f7fc fb8a 	bl	8000550 <__aeabi_dmul>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4630      	mov	r0, r6
 8003e42:	4639      	mov	r1, r7
 8003e44:	f7fc f9cc 	bl	80001e0 <__aeabi_dsub>
 8003e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e4c:	f7fc fb80 	bl	8000550 <__aeabi_dmul>
 8003e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7fc fb78 	bl	8000550 <__aeabi_dmul>
 8003e60:	a37d      	add	r3, pc, #500	@ (adr r3, 8004058 <__ieee754_pow+0x730>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	4604      	mov	r4, r0
 8003e68:	460d      	mov	r5, r1
 8003e6a:	f7fc fb71 	bl	8000550 <__aeabi_dmul>
 8003e6e:	a37c      	add	r3, pc, #496	@ (adr r3, 8004060 <__ieee754_pow+0x738>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc f9b6 	bl	80001e4 <__adddf3>
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	f7fc fb68 	bl	8000550 <__aeabi_dmul>
 8003e80:	a379      	add	r3, pc, #484	@ (adr r3, 8004068 <__ieee754_pow+0x740>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc f9ad 	bl	80001e4 <__adddf3>
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	f7fc fb5f 	bl	8000550 <__aeabi_dmul>
 8003e92:	a377      	add	r3, pc, #476	@ (adr r3, 8004070 <__ieee754_pow+0x748>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc f9a4 	bl	80001e4 <__adddf3>
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	f7fc fb56 	bl	8000550 <__aeabi_dmul>
 8003ea4:	a374      	add	r3, pc, #464	@ (adr r3, 8004078 <__ieee754_pow+0x750>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc f99b 	bl	80001e4 <__adddf3>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f7fc fb4d 	bl	8000550 <__aeabi_dmul>
 8003eb6:	a372      	add	r3, pc, #456	@ (adr r3, 8004080 <__ieee754_pow+0x758>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc f992 	bl	80001e4 <__adddf3>
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	4620      	mov	r0, r4
 8003eca:	4629      	mov	r1, r5
 8003ecc:	f7fc fb40 	bl	8000550 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	f7fc fb3a 	bl	8000550 <__aeabi_dmul>
 8003edc:	465a      	mov	r2, fp
 8003ede:	4604      	mov	r4, r0
 8003ee0:	460d      	mov	r5, r1
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ee8:	f7fc f97c 	bl	80001e4 <__adddf3>
 8003eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ef0:	f7fc fb2e 	bl	8000550 <__aeabi_dmul>
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	f7fc f974 	bl	80001e4 <__adddf3>
 8003efc:	465a      	mov	r2, fp
 8003efe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f02:	464b      	mov	r3, r9
 8003f04:	4658      	mov	r0, fp
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fb22 	bl	8000550 <__aeabi_dmul>
 8003f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80040b8 <__ieee754_pow+0x790>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	4606      	mov	r6, r0
 8003f12:	460f      	mov	r7, r1
 8003f14:	f7fc f966 	bl	80001e4 <__adddf3>
 8003f18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f1c:	f7fc f962 	bl	80001e4 <__adddf3>
 8003f20:	46d8      	mov	r8, fp
 8003f22:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003f26:	460d      	mov	r5, r1
 8003f28:	465a      	mov	r2, fp
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	4649      	mov	r1, r9
 8003f30:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003f34:	f7fc fb0c 	bl	8000550 <__aeabi_dmul>
 8003f38:	465c      	mov	r4, fp
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	4689      	mov	r9, r1
 8003f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80040b8 <__ieee754_pow+0x790>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	f7fc f94b 	bl	80001e0 <__aeabi_dsub>
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	f7fc f947 	bl	80001e0 <__aeabi_dsub>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003f5a:	f7fc f941 	bl	80001e0 <__aeabi_dsub>
 8003f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f62:	f7fc faf5 	bl	8000550 <__aeabi_dmul>
 8003f66:	4622      	mov	r2, r4
 8003f68:	4606      	mov	r6, r0
 8003f6a:	460f      	mov	r7, r1
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f72:	f7fc faed 	bl	8000550 <__aeabi_dmul>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc f931 	bl	80001e4 <__adddf3>
 8003f82:	4606      	mov	r6, r0
 8003f84:	460f      	mov	r7, r1
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f7fc f929 	bl	80001e4 <__adddf3>
 8003f92:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003f96:	a33c      	add	r3, pc, #240	@ (adr r3, 8004088 <__ieee754_pow+0x760>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	4658      	mov	r0, fp
 8003f9e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	f7fc fad4 	bl	8000550 <__aeabi_dmul>
 8003fa8:	465c      	mov	r4, fp
 8003faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f7fc f913 	bl	80001e0 <__aeabi_dsub>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc f90d 	bl	80001e0 <__aeabi_dsub>
 8003fc6:	a332      	add	r3, pc, #200	@ (adr r3, 8004090 <__ieee754_pow+0x768>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fac0 	bl	8000550 <__aeabi_dmul>
 8003fd0:	a331      	add	r3, pc, #196	@ (adr r3, 8004098 <__ieee754_pow+0x770>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460f      	mov	r7, r1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc fab7 	bl	8000550 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	4639      	mov	r1, r7
 8003fea:	f7fc f8fb 	bl	80001e4 <__adddf3>
 8003fee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003ff0:	4b32      	ldr	r3, [pc, #200]	@ (80040bc <__ieee754_pow+0x794>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc f8f4 	bl	80001e4 <__adddf3>
 8003ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004000:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004002:	f7fc fa3b 	bl	800047c <__aeabi_i2d>
 8004006:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004008:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <__ieee754_pow+0x798>)
 800400a:	4413      	add	r3, r2
 800400c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004010:	4606      	mov	r6, r0
 8004012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004016:	460f      	mov	r7, r1
 8004018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401c:	f7fc f8e2 	bl	80001e4 <__adddf3>
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	f7fc f8de 	bl	80001e4 <__adddf3>
 8004028:	4632      	mov	r2, r6
 800402a:	463b      	mov	r3, r7
 800402c:	f7fc f8da 	bl	80001e4 <__adddf3>
 8004030:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004034:	4632      	mov	r2, r6
 8004036:	463b      	mov	r3, r7
 8004038:	4658      	mov	r0, fp
 800403a:	460d      	mov	r5, r1
 800403c:	f7fc f8d0 	bl	80001e0 <__aeabi_dsub>
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	f7fc f8cc 	bl	80001e0 <__aeabi_dsub>
 8004048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404c:	f7fc f8c8 	bl	80001e0 <__aeabi_dsub>
 8004050:	465c      	mov	r4, fp
 8004052:	4602      	mov	r2, r0
 8004054:	e036      	b.n	80040c4 <__ieee754_pow+0x79c>
 8004056:	bf00      	nop
 8004058:	4a454eef 	.word	0x4a454eef
 800405c:	3fca7e28 	.word	0x3fca7e28
 8004060:	93c9db65 	.word	0x93c9db65
 8004064:	3fcd864a 	.word	0x3fcd864a
 8004068:	a91d4101 	.word	0xa91d4101
 800406c:	3fd17460 	.word	0x3fd17460
 8004070:	518f264d 	.word	0x518f264d
 8004074:	3fd55555 	.word	0x3fd55555
 8004078:	db6fabff 	.word	0xdb6fabff
 800407c:	3fdb6db6 	.word	0x3fdb6db6
 8004080:	33333303 	.word	0x33333303
 8004084:	3fe33333 	.word	0x3fe33333
 8004088:	e0000000 	.word	0xe0000000
 800408c:	3feec709 	.word	0x3feec709
 8004090:	dc3a03fd 	.word	0xdc3a03fd
 8004094:	3feec709 	.word	0x3feec709
 8004098:	145b01f5 	.word	0x145b01f5
 800409c:	be3e2fe0 	.word	0xbe3e2fe0
 80040a0:	7ff00000 	.word	0x7ff00000
 80040a4:	43400000 	.word	0x43400000
 80040a8:	0003988e 	.word	0x0003988e
 80040ac:	000bb679 	.word	0x000bb679
 80040b0:	08004740 	.word	0x08004740
 80040b4:	3ff00000 	.word	0x3ff00000
 80040b8:	40080000 	.word	0x40080000
 80040bc:	08004720 	.word	0x08004720
 80040c0:	08004730 	.word	0x08004730
 80040c4:	460b      	mov	r3, r1
 80040c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ca:	e5d7      	b.n	8003c7c <__ieee754_pow+0x354>
 80040cc:	f04f 0a01 	mov.w	sl, #1
 80040d0:	e65e      	b.n	8003d90 <__ieee754_pow+0x468>
 80040d2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80043a4 <__ieee754_pow+0xa7c>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4630      	mov	r0, r6
 80040da:	4639      	mov	r1, r7
 80040dc:	f7fc f882 	bl	80001e4 <__adddf3>
 80040e0:	4642      	mov	r2, r8
 80040e2:	e9cd 0100 	strd	r0, r1, [sp]
 80040e6:	464b      	mov	r3, r9
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc f878 	bl	80001e0 <__aeabi_dsub>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040f8:	f7fc fcba 	bl	8000a70 <__aeabi_dcmpgt>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f47f ae00 	bne.w	8003d02 <__ieee754_pow+0x3da>
 8004102:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004106:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800410a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800410e:	fa43 fa0a 	asr.w	sl, r3, sl
 8004112:	44da      	add	sl, fp
 8004114:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004118:	489d      	ldr	r0, [pc, #628]	@ (8004390 <__ieee754_pow+0xa68>)
 800411a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800411e:	4108      	asrs	r0, r1
 8004120:	ea00 030a 	and.w	r3, r0, sl
 8004124:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004128:	f1c1 0114 	rsb	r1, r1, #20
 800412c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004130:	fa4a fa01 	asr.w	sl, sl, r1
 8004134:	f1bb 0f00 	cmp.w	fp, #0
 8004138:	4640      	mov	r0, r8
 800413a:	4649      	mov	r1, r9
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	bfb8      	it	lt
 8004142:	f1ca 0a00 	rsblt	sl, sl, #0
 8004146:	f7fc f84b 	bl	80001e0 <__aeabi_dsub>
 800414a:	4680      	mov	r8, r0
 800414c:	4689      	mov	r9, r1
 800414e:	4632      	mov	r2, r6
 8004150:	463b      	mov	r3, r7
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc f845 	bl	80001e4 <__adddf3>
 800415a:	2400      	movs	r4, #0
 800415c:	a37c      	add	r3, pc, #496	@ (adr r3, 8004350 <__ieee754_pow+0xa28>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	4620      	mov	r0, r4
 8004164:	460d      	mov	r5, r1
 8004166:	f7fc f9f3 	bl	8000550 <__aeabi_dmul>
 800416a:	4642      	mov	r2, r8
 800416c:	e9cd 0100 	strd	r0, r1, [sp]
 8004170:	464b      	mov	r3, r9
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc f833 	bl	80001e0 <__aeabi_dsub>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f7fc f82d 	bl	80001e0 <__aeabi_dsub>
 8004186:	a374      	add	r3, pc, #464	@ (adr r3, 8004358 <__ieee754_pow+0xa30>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fc f9e0 	bl	8000550 <__aeabi_dmul>
 8004190:	a373      	add	r3, pc, #460	@ (adr r3, 8004360 <__ieee754_pow+0xa38>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	4680      	mov	r8, r0
 8004198:	4689      	mov	r9, r1
 800419a:	4620      	mov	r0, r4
 800419c:	4629      	mov	r1, r5
 800419e:	f7fc f9d7 	bl	8000550 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4640      	mov	r0, r8
 80041a8:	4649      	mov	r1, r9
 80041aa:	f7fc f81b 	bl	80001e4 <__adddf3>
 80041ae:	4604      	mov	r4, r0
 80041b0:	460d      	mov	r5, r1
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ba:	f7fc f813 	bl	80001e4 <__adddf3>
 80041be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041c2:	4680      	mov	r8, r0
 80041c4:	4689      	mov	r9, r1
 80041c6:	f7fc f80b 	bl	80001e0 <__aeabi_dsub>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7fc f805 	bl	80001e0 <__aeabi_dsub>
 80041d6:	4642      	mov	r2, r8
 80041d8:	4606      	mov	r6, r0
 80041da:	460f      	mov	r7, r1
 80041dc:	464b      	mov	r3, r9
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc f9b5 	bl	8000550 <__aeabi_dmul>
 80041e6:	a360      	add	r3, pc, #384	@ (adr r3, 8004368 <__ieee754_pow+0xa40>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	4604      	mov	r4, r0
 80041ee:	460d      	mov	r5, r1
 80041f0:	f7fc f9ae 	bl	8000550 <__aeabi_dmul>
 80041f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8004370 <__ieee754_pow+0xa48>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fb fff1 	bl	80001e0 <__aeabi_dsub>
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	f7fc f9a5 	bl	8000550 <__aeabi_dmul>
 8004206:	a35c      	add	r3, pc, #368	@ (adr r3, 8004378 <__ieee754_pow+0xa50>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fb ffea 	bl	80001e4 <__adddf3>
 8004210:	4622      	mov	r2, r4
 8004212:	462b      	mov	r3, r5
 8004214:	f7fc f99c 	bl	8000550 <__aeabi_dmul>
 8004218:	a359      	add	r3, pc, #356	@ (adr r3, 8004380 <__ieee754_pow+0xa58>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f7fb ffdf 	bl	80001e0 <__aeabi_dsub>
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f7fc f993 	bl	8000550 <__aeabi_dmul>
 800422a:	a357      	add	r3, pc, #348	@ (adr r3, 8004388 <__ieee754_pow+0xa60>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fb ffd8 	bl	80001e4 <__adddf3>
 8004234:	4622      	mov	r2, r4
 8004236:	462b      	mov	r3, r5
 8004238:	f7fc f98a 	bl	8000550 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4640      	mov	r0, r8
 8004242:	4649      	mov	r1, r9
 8004244:	f7fb ffcc 	bl	80001e0 <__aeabi_dsub>
 8004248:	4604      	mov	r4, r0
 800424a:	460d      	mov	r5, r1
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4640      	mov	r0, r8
 8004252:	4649      	mov	r1, r9
 8004254:	f7fc f97c 	bl	8000550 <__aeabi_dmul>
 8004258:	2200      	movs	r2, #0
 800425a:	e9cd 0100 	strd	r0, r1, [sp]
 800425e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fb ffbb 	bl	80001e0 <__aeabi_dsub>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004272:	f7fc fa97 	bl	80007a4 <__aeabi_ddiv>
 8004276:	4632      	mov	r2, r6
 8004278:	4604      	mov	r4, r0
 800427a:	460d      	mov	r5, r1
 800427c:	463b      	mov	r3, r7
 800427e:	4640      	mov	r0, r8
 8004280:	4649      	mov	r1, r9
 8004282:	f7fc f965 	bl	8000550 <__aeabi_dmul>
 8004286:	4632      	mov	r2, r6
 8004288:	463b      	mov	r3, r7
 800428a:	f7fb ffab 	bl	80001e4 <__adddf3>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fb ffa3 	bl	80001e0 <__aeabi_dsub>
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	f7fb ff9f 	bl	80001e0 <__aeabi_dsub>
 80042a2:	460b      	mov	r3, r1
 80042a4:	4602      	mov	r2, r0
 80042a6:	493b      	ldr	r1, [pc, #236]	@ (8004394 <__ieee754_pow+0xa6c>)
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7fb ff99 	bl	80001e0 <__aeabi_dsub>
 80042ae:	ec41 0b10 	vmov	d0, r0, r1
 80042b2:	ee10 3a90 	vmov	r3, s1
 80042b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042be:	da30      	bge.n	8004322 <__ieee754_pow+0x9fa>
 80042c0:	4650      	mov	r0, sl
 80042c2:	f000 f87d 	bl	80043c0 <scalbn>
 80042c6:	ec51 0b10 	vmov	r0, r1, d0
 80042ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ce:	f7ff bbd2 	b.w	8003a76 <__ieee754_pow+0x14e>
 80042d2:	4c31      	ldr	r4, [pc, #196]	@ (8004398 <__ieee754_pow+0xa70>)
 80042d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d91a      	bls.n	8004312 <__ieee754_pow+0x9ea>
 80042dc:	4b2f      	ldr	r3, [pc, #188]	@ (800439c <__ieee754_pow+0xa74>)
 80042de:	440b      	add	r3, r1
 80042e0:	4303      	orrs	r3, r0
 80042e2:	d009      	beq.n	80042f8 <__ieee754_pow+0x9d0>
 80042e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	f7fc fba2 	bl	8000a34 <__aeabi_dcmplt>
 80042f0:	3800      	subs	r0, #0
 80042f2:	bf18      	it	ne
 80042f4:	2001      	movne	r0, #1
 80042f6:	e42b      	b.n	8003b50 <__ieee754_pow+0x228>
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	f7fb ff70 	bl	80001e0 <__aeabi_dsub>
 8004300:	4632      	mov	r2, r6
 8004302:	463b      	mov	r3, r7
 8004304:	f7fc fbaa 	bl	8000a5c <__aeabi_dcmpge>
 8004308:	2800      	cmp	r0, #0
 800430a:	d1eb      	bne.n	80042e4 <__ieee754_pow+0x9bc>
 800430c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80043ac <__ieee754_pow+0xa84>
 8004310:	e6f7      	b.n	8004102 <__ieee754_pow+0x7da>
 8004312:	469a      	mov	sl, r3
 8004314:	4b22      	ldr	r3, [pc, #136]	@ (80043a0 <__ieee754_pow+0xa78>)
 8004316:	459a      	cmp	sl, r3
 8004318:	f63f aef3 	bhi.w	8004102 <__ieee754_pow+0x7da>
 800431c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004320:	e715      	b.n	800414e <__ieee754_pow+0x826>
 8004322:	ec51 0b10 	vmov	r0, r1, d0
 8004326:	4619      	mov	r1, r3
 8004328:	e7cf      	b.n	80042ca <__ieee754_pow+0x9a2>
 800432a:	491a      	ldr	r1, [pc, #104]	@ (8004394 <__ieee754_pow+0xa6c>)
 800432c:	2000      	movs	r0, #0
 800432e:	f7ff bb18 	b.w	8003962 <__ieee754_pow+0x3a>
 8004332:	2000      	movs	r0, #0
 8004334:	2100      	movs	r1, #0
 8004336:	f7ff bb14 	b.w	8003962 <__ieee754_pow+0x3a>
 800433a:	4630      	mov	r0, r6
 800433c:	4639      	mov	r1, r7
 800433e:	f7ff bb10 	b.w	8003962 <__ieee754_pow+0x3a>
 8004342:	460c      	mov	r4, r1
 8004344:	f7ff bb5e 	b.w	8003a04 <__ieee754_pow+0xdc>
 8004348:	2400      	movs	r4, #0
 800434a:	f7ff bb49 	b.w	80039e0 <__ieee754_pow+0xb8>
 800434e:	bf00      	nop
 8004350:	00000000 	.word	0x00000000
 8004354:	3fe62e43 	.word	0x3fe62e43
 8004358:	fefa39ef 	.word	0xfefa39ef
 800435c:	3fe62e42 	.word	0x3fe62e42
 8004360:	0ca86c39 	.word	0x0ca86c39
 8004364:	be205c61 	.word	0xbe205c61
 8004368:	72bea4d0 	.word	0x72bea4d0
 800436c:	3e663769 	.word	0x3e663769
 8004370:	c5d26bf1 	.word	0xc5d26bf1
 8004374:	3ebbbd41 	.word	0x3ebbbd41
 8004378:	af25de2c 	.word	0xaf25de2c
 800437c:	3f11566a 	.word	0x3f11566a
 8004380:	16bebd93 	.word	0x16bebd93
 8004384:	3f66c16c 	.word	0x3f66c16c
 8004388:	5555553e 	.word	0x5555553e
 800438c:	3fc55555 	.word	0x3fc55555
 8004390:	fff00000 	.word	0xfff00000
 8004394:	3ff00000 	.word	0x3ff00000
 8004398:	4090cbff 	.word	0x4090cbff
 800439c:	3f6f3400 	.word	0x3f6f3400
 80043a0:	3fe00000 	.word	0x3fe00000
 80043a4:	652b82fe 	.word	0x652b82fe
 80043a8:	3c971547 	.word	0x3c971547
 80043ac:	4090cc00 	.word	0x4090cc00

080043b0 <fabs>:
 80043b0:	ec51 0b10 	vmov	r0, r1, d0
 80043b4:	4602      	mov	r2, r0
 80043b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80043ba:	ec43 2b10 	vmov	d0, r2, r3
 80043be:	4770      	bx	lr

080043c0 <scalbn>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	ec55 4b10 	vmov	r4, r5, d0
 80043c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80043ca:	4606      	mov	r6, r0
 80043cc:	462b      	mov	r3, r5
 80043ce:	b991      	cbnz	r1, 80043f6 <scalbn+0x36>
 80043d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80043d4:	4323      	orrs	r3, r4
 80043d6:	d03d      	beq.n	8004454 <scalbn+0x94>
 80043d8:	4b35      	ldr	r3, [pc, #212]	@ (80044b0 <scalbn+0xf0>)
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	2200      	movs	r2, #0
 80043e0:	f7fc f8b6 	bl	8000550 <__aeabi_dmul>
 80043e4:	4b33      	ldr	r3, [pc, #204]	@ (80044b4 <scalbn+0xf4>)
 80043e6:	429e      	cmp	r6, r3
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
 80043ec:	da0f      	bge.n	800440e <scalbn+0x4e>
 80043ee:	a328      	add	r3, pc, #160	@ (adr r3, 8004490 <scalbn+0xd0>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	e01e      	b.n	8004434 <scalbn+0x74>
 80043f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80043fa:	4291      	cmp	r1, r2
 80043fc:	d10b      	bne.n	8004416 <scalbn+0x56>
 80043fe:	4622      	mov	r2, r4
 8004400:	4620      	mov	r0, r4
 8004402:	4629      	mov	r1, r5
 8004404:	f7fb feee 	bl	80001e4 <__adddf3>
 8004408:	4604      	mov	r4, r0
 800440a:	460d      	mov	r5, r1
 800440c:	e022      	b.n	8004454 <scalbn+0x94>
 800440e:	460b      	mov	r3, r1
 8004410:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004414:	3936      	subs	r1, #54	@ 0x36
 8004416:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800441a:	4296      	cmp	r6, r2
 800441c:	dd0d      	ble.n	800443a <scalbn+0x7a>
 800441e:	2d00      	cmp	r5, #0
 8004420:	a11d      	add	r1, pc, #116	@ (adr r1, 8004498 <scalbn+0xd8>)
 8004422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004426:	da02      	bge.n	800442e <scalbn+0x6e>
 8004428:	a11d      	add	r1, pc, #116	@ (adr r1, 80044a0 <scalbn+0xe0>)
 800442a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800442e:	a31a      	add	r3, pc, #104	@ (adr r3, 8004498 <scalbn+0xd8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc f88c 	bl	8000550 <__aeabi_dmul>
 8004438:	e7e6      	b.n	8004408 <scalbn+0x48>
 800443a:	1872      	adds	r2, r6, r1
 800443c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004440:	428a      	cmp	r2, r1
 8004442:	dcec      	bgt.n	800441e <scalbn+0x5e>
 8004444:	2a00      	cmp	r2, #0
 8004446:	dd08      	ble.n	800445a <scalbn+0x9a>
 8004448:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800444c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004450:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004454:	ec45 4b10 	vmov	d0, r4, r5
 8004458:	bd70      	pop	{r4, r5, r6, pc}
 800445a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800445e:	da08      	bge.n	8004472 <scalbn+0xb2>
 8004460:	2d00      	cmp	r5, #0
 8004462:	a10b      	add	r1, pc, #44	@ (adr r1, 8004490 <scalbn+0xd0>)
 8004464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004468:	dac1      	bge.n	80043ee <scalbn+0x2e>
 800446a:	a10f      	add	r1, pc, #60	@ (adr r1, 80044a8 <scalbn+0xe8>)
 800446c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004470:	e7bd      	b.n	80043ee <scalbn+0x2e>
 8004472:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004476:	3236      	adds	r2, #54	@ 0x36
 8004478:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800447c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004480:	4620      	mov	r0, r4
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <scalbn+0xf8>)
 8004484:	4629      	mov	r1, r5
 8004486:	2200      	movs	r2, #0
 8004488:	e7d4      	b.n	8004434 <scalbn+0x74>
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w
 8004490:	c2f8f359 	.word	0xc2f8f359
 8004494:	01a56e1f 	.word	0x01a56e1f
 8004498:	8800759c 	.word	0x8800759c
 800449c:	7e37e43c 	.word	0x7e37e43c
 80044a0:	8800759c 	.word	0x8800759c
 80044a4:	fe37e43c 	.word	0xfe37e43c
 80044a8:	c2f8f359 	.word	0xc2f8f359
 80044ac:	81a56e1f 	.word	0x81a56e1f
 80044b0:	43500000 	.word	0x43500000
 80044b4:	ffff3cb0 	.word	0xffff3cb0
 80044b8:	3c900000 	.word	0x3c900000

080044bc <with_errno>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	ed2d 8b02 	vpush	{d8}
 80044c2:	eeb0 8a40 	vmov.f32	s16, s0
 80044c6:	eef0 8a60 	vmov.f32	s17, s1
 80044ca:	4604      	mov	r4, r0
 80044cc:	f7ff f986 	bl	80037dc <__errno>
 80044d0:	eeb0 0a48 	vmov.f32	s0, s16
 80044d4:	eef0 0a68 	vmov.f32	s1, s17
 80044d8:	ecbd 8b02 	vpop	{d8}
 80044dc:	6004      	str	r4, [r0, #0]
 80044de:	bd10      	pop	{r4, pc}

080044e0 <xflow>:
 80044e0:	4603      	mov	r3, r0
 80044e2:	b507      	push	{r0, r1, r2, lr}
 80044e4:	ec51 0b10 	vmov	r0, r1, d0
 80044e8:	b183      	cbz	r3, 800450c <xflow+0x2c>
 80044ea:	4602      	mov	r2, r0
 80044ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044f0:	e9cd 2300 	strd	r2, r3, [sp]
 80044f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044f8:	f7fc f82a 	bl	8000550 <__aeabi_dmul>
 80044fc:	ec41 0b10 	vmov	d0, r0, r1
 8004500:	2022      	movs	r0, #34	@ 0x22
 8004502:	b003      	add	sp, #12
 8004504:	f85d eb04 	ldr.w	lr, [sp], #4
 8004508:	f7ff bfd8 	b.w	80044bc <with_errno>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	e7ee      	b.n	80044f0 <xflow+0x10>
 8004512:	0000      	movs	r0, r0
 8004514:	0000      	movs	r0, r0
	...

08004518 <__math_uflow>:
 8004518:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004520 <__math_uflow+0x8>
 800451c:	f7ff bfe0 	b.w	80044e0 <xflow>
 8004520:	00000000 	.word	0x00000000
 8004524:	10000000 	.word	0x10000000

08004528 <__math_oflow>:
 8004528:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004530 <__math_oflow+0x8>
 800452c:	f7ff bfd8 	b.w	80044e0 <xflow>
 8004530:	00000000 	.word	0x00000000
 8004534:	70000000 	.word	0x70000000

08004538 <__ieee754_sqrt>:
 8004538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <__ieee754_sqrt+0x1a8>)
 800453e:	ec55 4b10 	vmov	r4, r5, d0
 8004542:	43aa      	bics	r2, r5
 8004544:	462b      	mov	r3, r5
 8004546:	4621      	mov	r1, r4
 8004548:	d110      	bne.n	800456c <__ieee754_sqrt+0x34>
 800454a:	4622      	mov	r2, r4
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fb fffe 	bl	8000550 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb fe42 	bl	80001e4 <__adddf3>
 8004560:	4604      	mov	r4, r0
 8004562:	460d      	mov	r5, r1
 8004564:	ec45 4b10 	vmov	d0, r4, r5
 8004568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456c:	2d00      	cmp	r5, #0
 800456e:	dc0e      	bgt.n	800458e <__ieee754_sqrt+0x56>
 8004570:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004574:	4322      	orrs	r2, r4
 8004576:	d0f5      	beq.n	8004564 <__ieee754_sqrt+0x2c>
 8004578:	b19d      	cbz	r5, 80045a2 <__ieee754_sqrt+0x6a>
 800457a:	4622      	mov	r2, r4
 800457c:	4620      	mov	r0, r4
 800457e:	4629      	mov	r1, r5
 8004580:	f7fb fe2e 	bl	80001e0 <__aeabi_dsub>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	f7fc f90c 	bl	80007a4 <__aeabi_ddiv>
 800458c:	e7e8      	b.n	8004560 <__ieee754_sqrt+0x28>
 800458e:	152a      	asrs	r2, r5, #20
 8004590:	d115      	bne.n	80045be <__ieee754_sqrt+0x86>
 8004592:	2000      	movs	r0, #0
 8004594:	e009      	b.n	80045aa <__ieee754_sqrt+0x72>
 8004596:	0acb      	lsrs	r3, r1, #11
 8004598:	3a15      	subs	r2, #21
 800459a:	0549      	lsls	r1, r1, #21
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0fa      	beq.n	8004596 <__ieee754_sqrt+0x5e>
 80045a0:	e7f7      	b.n	8004592 <__ieee754_sqrt+0x5a>
 80045a2:	462a      	mov	r2, r5
 80045a4:	e7fa      	b.n	800459c <__ieee754_sqrt+0x64>
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	3001      	adds	r0, #1
 80045aa:	02dc      	lsls	r4, r3, #11
 80045ac:	d5fb      	bpl.n	80045a6 <__ieee754_sqrt+0x6e>
 80045ae:	1e44      	subs	r4, r0, #1
 80045b0:	1b12      	subs	r2, r2, r4
 80045b2:	f1c0 0420 	rsb	r4, r0, #32
 80045b6:	fa21 f404 	lsr.w	r4, r1, r4
 80045ba:	4323      	orrs	r3, r4
 80045bc:	4081      	lsls	r1, r0
 80045be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80045c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ca:	07d2      	lsls	r2, r2, #31
 80045cc:	bf5c      	itt	pl
 80045ce:	005b      	lslpl	r3, r3, #1
 80045d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80045d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045d8:	bf58      	it	pl
 80045da:	0049      	lslpl	r1, r1, #1
 80045dc:	2600      	movs	r6, #0
 80045de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80045e2:	106d      	asrs	r5, r5, #1
 80045e4:	0049      	lsls	r1, r1, #1
 80045e6:	2016      	movs	r0, #22
 80045e8:	4632      	mov	r2, r6
 80045ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80045ee:	1917      	adds	r7, r2, r4
 80045f0:	429f      	cmp	r7, r3
 80045f2:	bfde      	ittt	le
 80045f4:	193a      	addle	r2, r7, r4
 80045f6:	1bdb      	suble	r3, r3, r7
 80045f8:	1936      	addle	r6, r6, r4
 80045fa:	0fcf      	lsrs	r7, r1, #31
 80045fc:	3801      	subs	r0, #1
 80045fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004602:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004606:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800460a:	d1f0      	bne.n	80045ee <__ieee754_sqrt+0xb6>
 800460c:	4604      	mov	r4, r0
 800460e:	2720      	movs	r7, #32
 8004610:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004614:	429a      	cmp	r2, r3
 8004616:	eb00 0e0c 	add.w	lr, r0, ip
 800461a:	db02      	blt.n	8004622 <__ieee754_sqrt+0xea>
 800461c:	d113      	bne.n	8004646 <__ieee754_sqrt+0x10e>
 800461e:	458e      	cmp	lr, r1
 8004620:	d811      	bhi.n	8004646 <__ieee754_sqrt+0x10e>
 8004622:	f1be 0f00 	cmp.w	lr, #0
 8004626:	eb0e 000c 	add.w	r0, lr, ip
 800462a:	da42      	bge.n	80046b2 <__ieee754_sqrt+0x17a>
 800462c:	2800      	cmp	r0, #0
 800462e:	db40      	blt.n	80046b2 <__ieee754_sqrt+0x17a>
 8004630:	f102 0801 	add.w	r8, r2, #1
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	458e      	cmp	lr, r1
 8004638:	bf88      	it	hi
 800463a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800463e:	eba1 010e 	sub.w	r1, r1, lr
 8004642:	4464      	add	r4, ip
 8004644:	4642      	mov	r2, r8
 8004646:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800464a:	3f01      	subs	r7, #1
 800464c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004650:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004654:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004658:	d1dc      	bne.n	8004614 <__ieee754_sqrt+0xdc>
 800465a:	4319      	orrs	r1, r3
 800465c:	d01b      	beq.n	8004696 <__ieee754_sqrt+0x15e>
 800465e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80046e4 <__ieee754_sqrt+0x1ac>
 8004662:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80046e8 <__ieee754_sqrt+0x1b0>
 8004666:	e9da 0100 	ldrd	r0, r1, [sl]
 800466a:	e9db 2300 	ldrd	r2, r3, [fp]
 800466e:	f7fb fdb7 	bl	80001e0 <__aeabi_dsub>
 8004672:	e9da 8900 	ldrd	r8, r9, [sl]
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fc f9e3 	bl	8000a48 <__aeabi_dcmple>
 8004682:	b140      	cbz	r0, 8004696 <__ieee754_sqrt+0x15e>
 8004684:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8004688:	e9da 0100 	ldrd	r0, r1, [sl]
 800468c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004690:	d111      	bne.n	80046b6 <__ieee754_sqrt+0x17e>
 8004692:	3601      	adds	r6, #1
 8004694:	463c      	mov	r4, r7
 8004696:	1072      	asrs	r2, r6, #1
 8004698:	0863      	lsrs	r3, r4, #1
 800469a:	07f1      	lsls	r1, r6, #31
 800469c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80046a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80046a4:	bf48      	it	mi
 80046a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80046aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80046ae:	4618      	mov	r0, r3
 80046b0:	e756      	b.n	8004560 <__ieee754_sqrt+0x28>
 80046b2:	4690      	mov	r8, r2
 80046b4:	e7be      	b.n	8004634 <__ieee754_sqrt+0xfc>
 80046b6:	f7fb fd95 	bl	80001e4 <__adddf3>
 80046ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fc f9b5 	bl	8000a34 <__aeabi_dcmplt>
 80046ca:	b120      	cbz	r0, 80046d6 <__ieee754_sqrt+0x19e>
 80046cc:	1ca0      	adds	r0, r4, #2
 80046ce:	bf08      	it	eq
 80046d0:	3601      	addeq	r6, #1
 80046d2:	3402      	adds	r4, #2
 80046d4:	e7df      	b.n	8004696 <__ieee754_sqrt+0x15e>
 80046d6:	1c63      	adds	r3, r4, #1
 80046d8:	f023 0401 	bic.w	r4, r3, #1
 80046dc:	e7db      	b.n	8004696 <__ieee754_sqrt+0x15e>
 80046de:	bf00      	nop
 80046e0:	7ff00000 	.word	0x7ff00000
 80046e4:	20000470 	.word	0x20000470
 80046e8:	20000468 	.word	0x20000468

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
